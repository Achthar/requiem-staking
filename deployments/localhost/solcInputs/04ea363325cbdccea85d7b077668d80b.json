{
  "language": "Solidity",
  "sources": {
    "contracts/BloodRedRequiem.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/EnumerableSet.sol\";\nimport \"./interfaces/IGovernanceLock.sol\";\n\nusing SafeERC20 for IERC20 global;\nusing EnumerableSet for EnumerableSet.UintSet global;\n\ncontract BloodRedRequiem is ERC20Burnable, IGovernanceLock, Ownable {\n  // flags\n  uint256 private _unlocked;\n\n  // constants\n  uint256 public constant REF_DATE = 1640991600; // 20220101 00:00\n  uint256 public constant MINDAYS = 1;\n  uint256 public constant MAXDAYS = 3 * 365;\n\n  uint256 public constant MAXTIME = MAXDAYS * 1 days; // 3 years\n  uint256 public constant MINTIME = 60 * 60; // 1 hour\n  uint256 public constant MAX_WITHDRAWAL_PENALTY = 50000; // 50%\n  uint256 public constant PRECISION = 100000; // 5 decimals\n\n  address public lockedToken;\n  address public penaltyCollector;\n  uint256 public minLockedAmount;\n  uint256 public earlyWithdrawPenaltyRate;\n\n  mapping(address => mapping(uint256 => uint256)) public mintedForLock;\n\n  // the dictionary that contains the locked positions for each endtime\n  mapping(address => mapping(uint256 => uint256)) public lockedPosition;\n\n  // 18-decimal multiplier mapped from user to lockEnd\n  mapping(address => mapping(uint256 => uint256)) public multipliers;\n\n  // tracks the maturities for locks per user\n  mapping(address => EnumerableSet.UintSet) private lockEnds;\n  /* ========== MODIFIERS ========== */\n\n  modifier lock() {\n    require(_unlocked == 1, \"LOCKED\");\n    _unlocked = 0;\n    _;\n    _unlocked = 1;\n  }\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    address _lockedToken,\n    uint256 _minLockedAmount\n  ) ERC20(_name, _symbol, 18) {\n    lockedToken = _lockedToken;\n    minLockedAmount = _minLockedAmount;\n    earlyWithdrawPenaltyRate = 30000; // 30%\n    _unlocked = 1;\n  }\n\n  /* ========== PUBLIC FUNCTIONS ========== */\n\n  function locked_of(address _addr, uint256 _end)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return lockedPosition[_addr][_end];\n  }\n\n  /**\n   * Gets lock data for user\n   * @param _addr user to get data of\n   */\n  function get_locks(address _addr)\n    external\n    view\n    override\n    returns (LockedBalance[] memory _balances)\n  {\n    uint256 length = lockEnds[_addr].length();\n    _balances = new LockedBalance[](length);\n    for (uint256 i = 0; i < length; i++) {\n      uint256 _end = lockEnds[_addr].at(i);\n      _balances[i] = LockedBalance(\n        lockedPosition[_addr][_end],\n        _end,\n        mintedForLock[_addr][_end],\n        (lockedPosition[_addr][_end] * multipliers[_addr][_end]) / 1e18\n      );\n    }\n  }\n\n  // returns minted voting power for lock\n  function get_minted_for_locks(address _addr)\n    external\n    view\n    override\n    returns (uint256[] memory _minted)\n  {\n    uint256 length = lockEnds[_addr].length();\n    _minted = new uint256[](length);\n    for (uint256 i = 0; i < length; i++) {\n      uint256 _end = lockEnds[_addr].at(i);\n      _minted[i] = mintedForLock[_addr][_end];\n    }\n  }\n\n  // returns minted voting power for lock\n  function get_minted_for_lock(address _addr, uint256 _end)\n    external\n    view\n    override\n    returns (uint256 _minted)\n  {\n    _minted = mintedForLock[_addr][_end];\n  }\n\n  function voting_power_unlock_time(uint256 _value, uint256 _unlock_time)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    uint256 _now = block.timestamp;\n    if (_unlock_time <= _now) return 0;\n    uint256 _lockedSeconds = _unlock_time - _now;\n    if (_lockedSeconds >= MAXTIME) {\n      return _value;\n    }\n    return (_value * _lockedSeconds) / MAXTIME;\n  }\n\n  function get_share(address _addr) public view returns (uint256 _vote) {\n    uint256 _length = lockEnds[_addr].length();\n    _vote = 0;\n    for (uint256 i = 0; i < _length; i++) {\n      uint256 _end = lockEnds[_addr].at(i);\n      _vote += lockedPosition[_addr][_end] * multipliers[_addr][_end];\n    }\n\n    _vote /= 1e18;\n  }\n\n  function get_voting_power(address _addr, uint256 _amount)\n    public\n    view\n    returns (uint256 _votingPower)\n  {\n    uint256 _length = lockEnds[_addr].length();\n    uint256 _locked = 0;\n    _votingPower = 0;\n    for (uint256 i = 0; i < _length; i++) {\n      uint256 _end = lockEnds[_addr].at(i);\n      _votingPower += lockedPosition[_addr][_end] * multipliers[_addr][_end];\n      _locked += lockedPosition[_addr][_end];\n    }\n\n    // we pick the minimum of amount and locked, otherwise\n    _votingPower =\n      (_votingPower * _amount > _locked ? _locked : _amount) /\n      _locked /\n      1e18;\n  }\n\n  function get_amount_minted(uint256 _value, uint256 _unlock_time)\n    public\n    pure\n    returns (uint256)\n  {\n    return (_value * (_unlock_time - REF_DATE)) / MAXTIME;\n  }\n\n  function voting_power_locked_days(uint256 _value, uint256 _days)\n    public\n    pure\n    override\n    returns (uint256)\n  {\n    if (_days >= MAXDAYS) {\n      return _value;\n    }\n    return (_value * _days) / MAXDAYS;\n  }\n\n  /**\n   * Create new lock with defined maturity time\n   * - That shall help standardizing these positions\n   * @param _value amount to lock\n   * @param _end expiry timestamp\n   */\n  function create_lock(uint256 _value, uint256 _end) external {\n    uint256 _now = block.timestamp;\n    uint256 _duration = _end - _now;\n    require(_value >= minLockedAmount, \"less than min amount\");\n    require(_duration >= MINTIME, \"Shorter than MINTIME\");\n    require(_duration <= MAXTIME, \"Longer than MAXTIME\");\n    _create_lock(_msgSender(), _value, _end);\n  }\n\n  /**\n   * Increases the maturity of _amount from _end to _newEnd\n   * @param _amount amount to change the maturity for\n   * @param _end maturity\n   * @param _newEnd new maturity\n   */\n  function increase_time_to_maturity(\n    uint256 _amount,\n    uint256 _end,\n    uint256 _newEnd\n  ) external {\n    uint256 _now = block.timestamp;\n    uint256 _duration = _newEnd - _now;\n    require(_duration >= MINTIME, \"Voting lock can MINTIME min\");\n    require(_duration <= MAXTIME, \"Voting lock can MAXTIME max\");\n    _extend_maturity(_msgSender(), _amount, _end, _newEnd);\n  }\n\n  /**\n   * Function to increase position for given _end\n   * @param _value increase position for position in _end by value\n   * @param _end maturity of the position to increase\n   */\n  function increase_position(uint256 _value, uint256 _end) external {\n    require(_value >= minLockedAmount, \"less than min amount\");\n    _increase_position(_msgSender(), _value, _end);\n  }\n\n  // withdraws from all locks whenever possible\n  function withdrawAll() external override lock {\n    uint256 _endsLength = lockEnds[_msgSender()].length();\n    for (uint256 i = 0; i < _endsLength; i++) {\n      uint256 _end = lockEnds[_msgSender()].at(i);\n      uint256 _locked = lockedPosition[_msgSender()][_end];\n      uint256 _now = block.timestamp;\n      if (_locked > 0 && _now >= _end) {\n        // delete position and multiplier\n        delete lockedPosition[_msgSender()][_end];\n        delete multipliers[_msgSender()][_end];\n\n        // burn minted amount\n        _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\n\n        // delete minted entry\n        delete mintedForLock[_msgSender()][_end];\n        IERC20(lockedToken).safeTransfer(_msgSender(), _locked);\n\n        emit Withdraw(_msgSender(), _locked, _now);\n      }\n    }\n  }\n\n  function withdraw(uint256 _end, uint256 _amount) external override lock {\n    uint256 _locked = lockedPosition[_msgSender()][_end];\n    uint256 _now = block.timestamp;\n    require(_locked > 0, \"Nothing to withdraw\");\n    require(_now >= _end, \"The lock didn't expire\");\n    require(_locked >= _amount, \"Insufficient locked\");\n    if (_amount >= _locked) {\n      delete lockedPosition[_msgSender()][_end];\n      delete multipliers[_msgSender()][_end];\n      _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\n      delete mintedForLock[_msgSender()][_end];\n      lockEnds[_msgSender()].remove(_end);\n    } else {\n      lockedPosition[_msgSender()][_end] -= _amount;\n      _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\n      mintedForLock[_msgSender()][_end] -= get_amount_minted(_amount, _end);\n    }\n\n    IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n    emit Withdraw(_msgSender(), _amount, _now);\n  }\n\n  // This will charge PENALTY if lock is not expired yet\n  function emergencyWithdraw(uint256 _end) external lock {\n    uint256 _amount = lockedPosition[_msgSender()][_end];\n    uint256 _now = block.timestamp;\n    require(_amount > 0, \"Nothing to withdraw\");\n    if (_now < _end) {\n      uint256 _fee = (_amount * earlyWithdrawPenaltyRate) / PRECISION;\n      _penalize(_fee);\n      _amount = _amount - _fee;\n    }\n    delete lockedPosition[_msgSender()][_end];\n    delete multipliers[_msgSender()][_end];\n    _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\n    delete mintedForLock[_msgSender()][_end];\n    lockEnds[_msgSender()].remove(_end);\n\n    IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n    emit Withdraw(_msgSender(), _amount, _now);\n  }\n\n  // This will charge PENALTY if lock is not expired yet\n  function emergencyWithdrawAll() external lock {\n    uint256 _endsLength = lockEnds[_msgSender()].length();\n    for (uint256 i = 0; i < _endsLength; i++) {\n      uint256 _end = lockEnds[_msgSender()].at(i);\n      uint256 _locked = lockedPosition[_msgSender()][_end];\n      uint256 _now = block.timestamp;\n      if (_locked > 0) {\n        if (_now < _end) {\n          uint256 _fee = (_locked * earlyWithdrawPenaltyRate) / PRECISION;\n          _penalize(_fee);\n          lockedPosition[_msgSender()][_end] = _locked - _fee;\n        }\n        delete lockedPosition[_msgSender()][_end];\n        delete multipliers[_msgSender()][_end];\n        _burn(_msgSender(), mintedForLock[_msgSender()][i]);\n        delete mintedForLock[_msgSender()][_end];\n\n        IERC20(lockedToken).safeTransfer(_msgSender(), _locked);\n\n        emit Withdraw(_msgSender(), _locked, _now);\n      }\n    }\n  }\n\n  function transferLockShare(\n    uint256 _amount,\n    uint256 _end,\n    address _to\n  ) public {\n    uint256 _share = (_amount * 1e18) / lockedPosition[_msgSender()][_end];\n\n    uint256 _toSend = (_share * mintedForLock[_msgSender()][_end]) / 1e18;\n\n    // send the respective amount of this token\n    IERC20(address(this)).safeTransferFrom(\n      _msgSender(),\n      address(this),\n      _toSend\n    );\n\n    // adjust locked balances\n    _transferLockShare(_msgSender(), _amount, _toSend, _end, _to);\n  }\n\n  function transferFullLock(uint256 _end, address _to) public {\n    // for a full transfer, the full minted amount has to be paid\n    uint256 _minted = mintedForLock[_msgSender()][_end];\n\n    // send the underying amount of this token\n    IERC20(address(this)).safeTransferFrom(_msgSender(), _to, _minted);\n\n    _transferFullLock(_msgSender(), _to, _end);\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n\n  /**\n  creates lock\n   */\n  function _create_lock(\n    address _addr,\n    uint256 _value,\n    uint256 _end\n  ) internal lock {\n    require(!lockEnds[_addr].contains(_end), \"position exists\");\n    uint256 _vp = get_amount_minted(_value, _end);\n    require(_vp > 0, \"No benefit to lock\");\n    lockedPosition[_addr][_end] = _value;\n\n    IERC20(lockedToken).safeTransferFrom(_addr, address(this), _value);\n    _mint(_addr, _vp);\n    mintedForLock[_addr][_end] = _vp;\n    lockEnds[_addr].add(_end);\n    multipliers[_addr][_end] = _calculate_multiplier(block.timestamp, _end);\n  }\n\n  /**\n   * Extends the maturity\n   * Moves also the minted amounts\n   * @param _addr user\n   * @param _amount Amount to move from old end to end\n   * @param _end end of locked amount to move\n   * @param _newEnd target end\n   */\n  function _extend_maturity(\n    address _addr,\n    uint256 _amount,\n    uint256 _end,\n    uint256 _newEnd\n  ) internal lock {\n    uint256 _vp = get_amount_minted(_amount, _end);\n    uint256 _vpNew = get_amount_minted(_amount, _newEnd);\n    uint256 _oldLocked = lockedPosition[_addr][_end];\n    uint256 _now = block.timestamp;\n    // adjust multipliers\n    if (lockEnds[_addr].contains(_newEnd)) {\n      // position exists\n      multipliers[_addr][_newEnd] = _calculate_adjusted_multiplier_position(\n        _amount,\n        _now,\n        _newEnd,\n        lockedPosition[_addr][_newEnd],\n        multipliers[_addr][_newEnd]\n      );\n      // increase on new\n      lockedPosition[_addr][_newEnd] += _amount;\n      mintedForLock[_addr][_newEnd] += _vpNew;\n    } else {\n      // position does not exist\n      multipliers[_addr][_newEnd] = _calculate_adjusted_multiplier_maturity(\n        _now,\n        _end,\n        _newEnd,\n        multipliers[_addr][_end]\n      );\n      // create on new\n      lockedPosition[_addr][_newEnd] = _amount;\n      mintedForLock[_addr][_newEnd] = _vpNew;\n      lockEnds[_addr].add(_newEnd);\n    }\n\n    if (_amount == _oldLocked) {\n      // delete from old\n      delete lockedPosition[_addr][_end];\n      delete mintedForLock[_addr][_end];\n      delete multipliers[_addr][_end];\n      lockEnds[_addr].remove(_end);\n    } else {\n      // decrease from old\n      lockedPosition[_addr][_end] -= _amount;\n      mintedForLock[_addr][_end] -= _vp;\n    }\n\n    uint256 _vpDiff = _vpNew - _vp;\n    require(_vpDiff > 0, \"No benefit to lock\");\n    _mint(_addr, _vpDiff);\n\n    emit Deposit(_addr, _amount, _newEnd, _now);\n  }\n\n  /**\n   * Function to increase position for given _end\n   * @param _addr user\n   * @param _value increase position for position in _end by value\n   * @param _end maturity of the position to increase\n   */\n  function _increase_position(\n    address _addr,\n    uint256 _value,\n    uint256 _end\n  ) internal lock {\n    // calculate amount to mint\n    uint256 _vp = get_amount_minted(_value, _end); // voting_power_unlock_time(_value, _end);\n\n    // adjust multiplier\n    uint256 _now = block.timestamp;\n    multipliers[_addr][_end] = _calculate_adjusted_multiplier_position(\n      _value,\n      _now,\n      _end,\n      _value,\n      multipliers[_addr][_end]\n    );\n\n    // increase locked amount\n    lockedPosition[_addr][_end] += _value;\n\n    require(_vp > 0, \"No benefit to lock\");\n\n    IERC20(lockedToken).safeTransferFrom(_msgSender(), address(this), _value);\n\n    _mint(_addr, _vp);\n    mintedForLock[_addr][_end] += _vp;\n\n    emit Deposit(_addr, _value, _end, _now);\n  }\n\n  function _penalize(uint256 _amount) internal {\n    if (penaltyCollector != address(0)) {\n      // send to collector if `penaltyCollector` set\n      IERC20(lockedToken).safeTransfer(penaltyCollector, _amount);\n    } else {\n      ERC20Burnable(lockedToken).burn(_amount);\n    }\n  }\n\n  // /**\n  //  * @dev Before transfer function that moves the respective locks to the recipient\n  //  * Standard ERC20 function adjusted for ERC20 lock which does NOT execute these lines\n  //  * for minting and burning as it would interfere with the lock logic.\n  //  * @param from sender\n  //  * @param to recipient\n  //  * @param amount amount of this token to be sent\n  //  */\n  // function _beforeTokenTransfer(\n  //   address from,\n  //   address to,\n  //   uint256 amount\n  // ) internal override {\n  //   uint256 _ids = lockIds[from];\n  //   uint256 _amountLeft = amount;\n  //   for (uint256 i = 0; i < _ids; i++) {\n  //     uint256 minted = mintedForLock[from][i];\n  //     if (_amountLeft >= minted) {\n  //       _transferFullLock(from, to, i);\n  //       _amountLeft -= minted;\n  //     } else if (_amountLeft > 0) {\n  //       // here we just transfer the last bit left\n  //       _transferLock(_amountLeft, i, to);\n  //       break;\n  //     } else break;\n  //   }\n  // }\n\n  /**\n  * @dev Function that transfers the share of the underlying lock amount to the recipient.\n  @param _amount amount of locked token to transfer\n  @param _end id of lock to transfer\n  @param _to recipient address\n  */\n  function _transferLockShare(\n    address _from,\n    uint256 _amount,\n    uint256 _vp,\n    uint256 _end,\n    address _to\n  ) internal {\n    uint256 _locked = lockedPosition[_from][_end];\n    require(_amount <= _locked, \"Insufficient funds in Lock\");\n\n    // log the amount for the recipient\n    _receiveLock(_amount, _vp, _end, _to);\n\n    // reduce this users lock amount\n    lockedPosition[_from][_end] -= _amount;\n\n    // reduce related voting power\n    mintedForLock[_from][_end] -= _vp;\n  }\n\n  /**\n  * @dev Function that transfers the full lock of the user to the recipient.\n  @param _end id of lock to transfer\n  @param _to recipient address\n  */\n  function _transferFullLock(\n    address _from,\n    address _to,\n    uint256 _end\n  ) internal {\n    // log the amount for the recipient\n    _receiveLock(\n      lockedPosition[_from][_end],\n      mintedForLock[_from][_end],\n      _end,\n      _to\n    );\n\n    // reduce this users lock amount\n    delete lockedPosition[_from][_end];\n    delete mintedForLock[_from][_end];\n\n    delete multipliers[_from][_end];\n    // delete index\n    lockEnds[_from].remove(_end);\n  }\n\n  /**\n  Function that logs the recipients lock\n  All locks will searched and once a match is found the lock amount is added\n  @param _lockAmount locked amount that is received\n  @param _lockEnd lock end time\n  @param _recipient recipient address\n  - does NOT reduce the senders lock, that has to be done before\n   */\n  function _receiveLock(\n    uint256 _lockAmount,\n    uint256 _vp,\n    uint256 _lockEnd,\n    address _recipient\n  ) internal {\n    bool _lockExists = lockEnds[_recipient].contains(_lockEnd);\n    uint256 _now = block.timestamp;\n    if (_lockExists) {\n      mintedForLock[_recipient][_lockEnd] += _vp;\n      multipliers[_recipient][\n        _lockEnd\n      ] = _calculate_adjusted_multiplier_position(\n        _lockAmount,\n        _now,\n        _lockEnd,\n        lockedPosition[_recipient][_lockEnd],\n        multipliers[_recipient][_lockEnd]\n      );\n      lockedPosition[_recipient][_lockEnd] += _lockAmount;\n    } else {\n      multipliers[_recipient][_lockEnd] = _calculate_multiplier(_now, _lockEnd);\n      lockedPosition[_recipient][_lockEnd] = _lockAmount;\n      mintedForLock[_recipient][_lockEnd] = _vp;\n      lockEnds[_recipient].add(_lockEnd);\n    }\n  }\n\n  function _getEarliestEnd(address _addr) internal view returns (uint256 _min) {\n    uint256 _count = lockEnds[_addr].length();\n    if (_count == 0) return 0;\n    _min = lockEnds[_addr].at(0);\n    for (uint256 i = 1; i < lockEnds[_addr].length(); i++) {\n      uint256 _current = lockEnds[_addr].at(i);\n      if (_current < _min) {\n        _min = _current;\n      }\n    }\n    return _min;\n  }\n\n  function _getLatestEnd(address _addr) internal view returns (uint256 _max) {\n    uint256 _count = lockEnds[_addr].length();\n    if (_count == 0) return 0;\n    _max = lockEnds[_addr].at(0);\n    for (uint256 i = 1; i < lockEnds[_addr].length(); i++) {\n      uint256 _current = lockEnds[_addr].at(i);\n      if (_current > _max) {\n        _max = _current;\n      }\n    }\n    return _max;\n  }\n\n  function _calculate_multiplier(uint256 _ref, uint256 _end)\n    internal\n    pure\n    returns (uint256)\n  {\n    return ((_end - _ref) * 1e18) / (_end - REF_DATE);\n  }\n\n  function _calculate_adjusted_multiplier_position(\n    uint256 _amount,\n    uint256 _ref,\n    uint256 _end,\n    uint256 _position,\n    uint256 _oldMultiplier\n  ) internal pure returns (uint256) {\n    return\n      (_position *\n        _oldMultiplier +\n        _amount *\n        _calculate_multiplier(_ref, _end)) /\n      (_amount + _position) /\n      1e18;\n  }\n\n  function _calculate_adjusted_multiplier_maturity(\n    uint256 _ref,\n    uint256 _endOld,\n    uint256 _end,\n    uint256 _oldMultiplier\n  ) internal pure returns (uint256) {\n    return\n      (_endOld *\n        _oldMultiplier +\n        (_end - _endOld) *\n        _calculate_multiplier(_ref, _end)) /\n      _end /\n      1e18;\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  function setMinLockedAmount(uint256 _minLockedAmount) external onlyOwner {\n    minLockedAmount = _minLockedAmount;\n    emit MinLockedAmountSet(_minLockedAmount);\n  }\n\n  function setEarlyWithdrawPenaltyRate(uint256 _earlyWithdrawPenaltyRate)\n    external\n    onlyOwner\n  {\n    require(\n      _earlyWithdrawPenaltyRate <= MAX_WITHDRAWAL_PENALTY,\n      \"withdrawal penalty is too high\"\n    ); // <= 50%\n    earlyWithdrawPenaltyRate = _earlyWithdrawPenaltyRate;\n    emit EarlyWithdrawPenaltySet(_earlyWithdrawPenaltyRate);\n  }\n\n  function setPenaltyCollector(address _addr) external onlyOwner {\n    penaltyCollector = _addr;\n    emit PenaltyCollectorSet(_addr);\n  }\n\n  /* =============== EVENTS ==================== */\n  event Deposit(\n    address indexed provider,\n    uint256 value,\n    uint256 locktime,\n    uint256 timestamp\n  );\n  event Withdraw(address indexed provider, uint256 value, uint256 timestamp);\n  event PenaltyCollectorSet(address indexed addr);\n  event EarlyWithdrawPenaltySet(uint256 indexed penalty);\n  event MinLockedAmountSet(uint256 indexed amount);\n}\n"
    },
    "contracts/libraries/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./ERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n  /**\n   * @dev Destroys `amount` tokens from the caller.\n   *\n   * See {ERC20-_burn}.\n   */\n  function burn(uint256 amount) public virtual {\n    _burn(_msgSender(), amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n   * allowance.\n   *\n   * See {ERC20-_burn} and {ERC20-allowance}.\n   *\n   * Requirements:\n   *\n   * - the caller must have allowance for ``accounts``'s tokens of at least\n   * `amount`.\n   */\n  function burnFrom(address account, uint256 amount) public virtual {\n    uint256 currentAllowance = allowance(account, _msgSender());\n    require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n    unchecked {\n      _approve(account, _msgSender(), currentAllowance - amount);\n    }\n    _burn(account, amount);\n  }\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\n// work differently from the OpenZeppelin version if it is not.\n\npragma solidity ^0.8.13;\n\nimport \"../interfaces/ERC20/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      address(token),\n      abi.encodeWithSelector(token.transfer.selector, to, value)\n    );\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      address(token),\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n    );\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\n    _callOptionalReturn(\n      address(token),\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n    );\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   *\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\n   */\n  function _callOptionalReturn(address token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves.\n    (bool success, bytes memory returndata) = token.call(data);\n\n    // If the low-level call didn't succeed we return whatever was returned from it.\n    assembly {\n      if eq(success, 0) {\n        returndatacopy(0, 0, returndatasize())\n        revert(0, returndatasize())\n      }\n    }\n\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\n    require(\n      returndata.length == 0 || abi.decode(returndata, (bool)),\n      \"SAFE_ERC20_CALL_FAILED\"\n    );\n  }\n}\n"
    },
    "contracts/libraries/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    \n  address internal _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor () {\n    _owner = msg.sender;\n    emit OwnershipTransferred( address(0), _owner );\n  }\n\n  function owner() public view override returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\n    _;\n  }\n\n  function renounceOwnership() public virtual override onlyOwner() {\n    emit OwnershipTransferred( _owner, address(0) );\n    _owner = address(0);\n  }\n\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\n    require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred( _owner, newOwner_ );\n    _owner = newOwner_;\n  }\n}"
    },
    "contracts/libraries/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}"
    },
    "contracts/interfaces/IGovernanceLock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IGovernanceLock {\n  struct LockedBalance {\n    uint256 amount;\n    uint256 end;\n    uint256 minted;\n    uint256 votingPower;\n  }\n\n  function get_locks(address _addr)\n    external\n    view\n    returns (LockedBalance[] memory _balances);\n\n  function get_minted_for_locks(address _addr)\n    external\n    view\n    returns (uint256[] memory _minted);\n\n  function get_minted_for_lock(address _addr, uint256 _end)\n    external\n    view\n    returns (uint256 _minted);\n\n  function locked_of(address _addr, uint256 _end)\n    external\n    view\n    returns (uint256);\n\n  function voting_power_unlock_time(uint256 _value, uint256 _unlock_time)\n    external\n    view\n    returns (uint256);\n\n  function voting_power_locked_days(uint256 _value, uint256 _days)\n    external\n    view\n    returns (uint256);\n\n  function create_lock(uint256 _value, uint256 _days) external;\n\n  function increase_position(uint256 _value, uint256 _end) external;\n\n  function increase_time_to_maturity(\n    uint256 _amount,\n    uint256 _end,\n    uint256 _newEnd\n  ) external;\n\n  function withdraw(uint256 _end, uint256 _amount) external;\n\n  function withdrawAll() external;\n}\n"
    },
    "contracts/libraries/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"../interfaces/ERC20/IERC20.sol\";\nimport \"../interfaces/ERC20/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 internal _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override(IERC20, IERC20Metadata) returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/interfaces/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/ERC20/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IOwnable {\n  function owner() external view returns (address);\n\n  function renounceOwnership() external;\n  \n  function transferOwnership( address newOwner_ ) external;\n}"
    },
    "contracts/rewarders/ComplexRewarderTime.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.13;\n\nimport \"../interfaces/IRewarder.sol\";\nimport \"../interfaces/IMiniChefV2.sol\";\nimport \"../libraries/Ownable.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\ncontract ComplexRewarderTime is IRewarder, Ownable {\n  using SafeERC20 for IERC20;\n\n  IERC20 private rewardToken;\n\n  /// @notice Info of each MCV2 user.\n  /// `amount` LP token amount the user has provided.\n  /// `rewardDebt` The amount of reward entitled to the user.\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n  }\n\n  /// @notice Info of each MCV2 pool.\n  /// `allocPoint` The amount of allocation points assigned to the pool.\n  /// Also known as the amount of SUSHI to distribute per block.\n  struct PoolInfo {\n    uint256 accRewardPerShare;\n    uint256 lastRewardTime;\n    uint256 allocPoint;\n  }\n\n  /// @notice Info of each pool.\n  mapping(uint256 => PoolInfo) public poolInfo;\n\n  uint256[] public poolIds;\n\n  /// @notice Info of each user that stakes LP tokens.\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n  /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 totalAllocPoint;\n\n  uint256 public rewardPerSecond;\n  uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n  address private REQUIEM_CHEF;\n\n  event LogOnReward(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\n  event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n  event LogUpdatePool(\n    uint256 indexed pid,\n    uint256 lastRewardTime,\n    uint256 lpSupply,\n    uint256 accRewardPerShare\n  );\n  event LogRewardPerSecond(uint256 rewardPerSecond);\n  event LogInit();\n\n  constructor(\n    IERC20 _rewardToken,\n    uint256 _rewardPerSecond,\n    address _REQUIEM_CHEF\n  ) {\n    rewardToken = _rewardToken;\n    rewardPerSecond = _rewardPerSecond;\n    REQUIEM_CHEF = _REQUIEM_CHEF;\n  }\n\n  function onReward(\n    uint256 pid,\n    address _user,\n    address to,\n    uint256,\n    uint256 lpToken\n  ) external override onlyMCV2 {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][_user];\n    uint256 pending;\n    if (user.amount > 0) {\n      pending =\n        (user.amount * pool.accRewardPerShare) /\n        ACC_TOKEN_PRECISION -\n        user.rewardDebt;\n      rewardToken.safeTransfer(to, pending);\n    }\n    user.amount = lpToken;\n    user.rewardDebt = (lpToken * pool.accRewardPerShare) / ACC_TOKEN_PRECISION;\n    emit LogOnReward(_user, pid, pending, to);\n  }\n\n  function pendingTokens(\n    uint256 pid,\n    address user,\n    uint256\n  )\n    external\n    view\n    override\n    returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\n  {\n    IERC20[] memory _rewardTokens = new IERC20[](1);\n    _rewardTokens[0] = (rewardToken);\n    uint256[] memory _rewardAmounts = new uint256[](1);\n    _rewardAmounts[0] = pendingToken(pid, user);\n    return (_rewardTokens, _rewardAmounts);\n  }\n\n  /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n  /// @param _rewardPerSecond The amount of Sushi to be distributed per second.\n  function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n    rewardPerSecond = _rewardPerSecond;\n    emit LogRewardPerSecond(_rewardPerSecond);\n  }\n\n  modifier onlyMCV2() {\n    require(msg.sender == REQUIEM_CHEF, \"Only MCV2 can call this function.\");\n    _;\n  }\n\n  /// @notice Returns the number of MCV2 pools.\n  function poolLength() public view returns (uint256 pools) {\n    pools = poolIds.length;\n  }\n\n  /// @notice Add a new LP to the pool. Can only be called by the owner.\n  /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n  /// @param allocPoint AP of the new pool.\n  /// @param _pid Pid on MCV2\n  function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\n    require(poolInfo[_pid].lastRewardTime == 0, \"Pool already exists\");\n    uint256 lastRewardTime = block.timestamp;\n    totalAllocPoint += allocPoint;\n\n    poolInfo[_pid] = PoolInfo({\n      allocPoint: allocPoint,\n      lastRewardTime: lastRewardTime,\n      accRewardPerShare: 0\n    });\n    poolIds.push(_pid);\n    emit LogPoolAddition(_pid, allocPoint);\n  }\n\n  /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _allocPoint New AP of the pool.\n  function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n    totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n    poolInfo[_pid].allocPoint = _allocPoint;\n    emit LogSetPool(_pid, _allocPoint);\n  }\n\n  /// @notice View function to see pending Token\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _user Address of user.\n  /// @return pending reward for a given user.\n  function pendingToken(uint256 _pid, address _user)\n    public\n    view\n    returns (uint256 pending)\n  {\n    PoolInfo memory pool = poolInfo[_pid];\n    UserInfo storage user = userInfo[_pid][_user];\n    uint256 accRewardPerShare = pool.accRewardPerShare;\n    uint256 lpSupply = IMiniChefV2(REQUIEM_CHEF).lpToken(_pid).balanceOf(\n      REQUIEM_CHEF\n    );\n    if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n      uint256 time = block.timestamp - pool.lastRewardTime;\n      uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n        totalAllocPoint;\n      accRewardPerShare += (rewardAmount * ACC_TOKEN_PRECISION) / lpSupply;\n    }\n    pending =\n      (user.amount * accRewardPerShare) /\n      ACC_TOKEN_PRECISION -\n      user.rewardDebt;\n  }\n\n  /// @notice Update reward variables for all pools. Be careful of gas spending!\n  /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n  function massUpdatePools(uint256[] calldata pids) external {\n    uint256 len = pids.length;\n    for (uint256 i = 0; i < len; ++i) {\n      updatePool(pids[i]);\n    }\n  }\n\n  /// @notice Update reward variables of the given pool.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @return pool Returns the pool that was updated.\n  function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    pool = poolInfo[pid];\n    if (block.timestamp > pool.lastRewardTime) {\n      uint256 lpSupply = IMiniChefV2(REQUIEM_CHEF).lpToken(pid).balanceOf(\n        REQUIEM_CHEF\n      );\n\n      if (lpSupply > 0) {\n        uint256 time = block.timestamp - pool.lastRewardTime;\n        uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n          totalAllocPoint;\n        pool.accRewardPerShare =\n          pool.accRewardPerShare +\n          (rewardAmount * ACC_TOKEN_PRECISION) /\n          lpSupply;\n      }\n      pool.lastRewardTime = block.timestamp;\n      poolInfo[pid] = pool;\n      emit LogUpdatePool(\n        pid,\n        pool.lastRewardTime,\n        lpSupply,\n        pool.accRewardPerShare\n      );\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./ERC20/IERC20.sol\";\n\ninterface IRewarder {\n  function onReward(\n    uint256 pid,\n    address user,\n    address recipient,\n    uint256 rewardAmount,\n    uint256 newLpAmount\n  ) external;\n\n  function pendingTokens(\n    uint256 pid,\n    address user,\n    uint256 rewardAmount\n  ) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"./ERC20/IERC20.sol\";\n\ninterface IMiniChefV2 {\n  function lpToken(uint256 _pid) external view returns (IERC20);\n}\n"
    },
    "contracts/wREQT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/ERC20.sol\";\nimport \"./interfaces/IStaking.sol\";\n\ncontract wREQT is ERC20 {\n  using SafeERC20 for ERC20;\n\n  address public immutable staking;\n  address public immutable REQT;\n  address public immutable sREQT;\n\n  constructor(\n    address _staking,\n    address _REQT,\n    address _sREQT\n  ) ERC20(\"Wrapped sREQT\", \"wsREQT\", 18) {\n    require(_staking != address(0));\n    staking = _staking;\n    require(_REQT != address(0));\n    REQT = _REQT;\n    require(_sREQT != address(0));\n    sREQT = _sREQT;\n  }\n\n  /**\n        @notice stakes REQT and wraps sREQT\n        @param _amount uint\n        @return uint\n     */\n  function wrapFromREQT(uint256 _amount) external returns (uint256) {\n    IERC20(REQT).transferFrom(msg.sender, address(this), _amount);\n\n    IERC20(REQT).approve(staking, _amount); // stake REQT for sREQT\n    IStaking(staking).stake(_amount, address(this));\n\n    uint256 value = wREQTValue(_amount);\n    _mint(msg.sender, value);\n    return value;\n  }\n\n  /**\n        @notice unwrap sREQT and unstake REQT\n        @param _amount uint\n        @return uint\n     */\n  function unwrapToREQT(uint256 _amount) external returns (uint256) {\n    _burn(msg.sender, _amount);\n\n    uint256 value = sREQTValue(_amount);\n    IERC20(sREQT).approve(staking, value); // unstake sREQT for REQT\n    IStaking(staking).unstake(value, address(this));\n\n    IERC20(REQT).transfer(msg.sender, value);\n    return value;\n  }\n\n  /**\n        @notice wrap sREQT\n        @param _amount uint\n        @return uint\n     */\n  function wrapFromsREQT(uint256 _amount) external returns (uint256) {\n    IERC20(sREQT).transferFrom(msg.sender, address(this), _amount);\n\n    uint256 value = wREQTValue(_amount);\n    _mint(msg.sender, value);\n    return value;\n  }\n\n  /**\n        @notice unwrap sREQT\n        @param _amount uint\n        @return uint\n     */\n  function unwrapTosREQT(uint256 _amount) external returns (uint256) {\n    _burn(msg.sender, _amount);\n\n    uint256 value = sREQTValue(_amount);\n    IERC20(sREQT).transfer(msg.sender, value);\n    return value;\n  }\n\n  /**\n        @notice converts wREQT amount to sREQT\n        @param _amount uint\n        @return uint\n     */\n  function sREQTValue(uint256 _amount) public view returns (uint256) {\n    return (_amount * IStaking(staking).index()) / (10**decimals());\n  }\n\n  /**\n        @notice converts sREQT amount to wREQT\n        @param _amount uint\n        @return uint\n     */\n  function wREQTValue(uint256 _amount) public view returns (uint256) {\n    return (_amount * 10**decimals()) / IStaking(staking).index();\n  }\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IStaking {\n  function stake(uint256 _amount, address _recipient) external returns (bool);\n\n  function claim(address _recipient) external;\n\n  function unstake(uint256 _amount, address _recipient) external returns (bool);\n\n  function index() external view returns (uint256);\n}\n"
    },
    "contracts/StakingHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./interfaces/IStaking.sol\";\nimport \"./interfaces/ERC20/IERC20.sol\";\n\ncontract StakingHelper {\n\n    address public immutable staking;\n    address public immutable REQT;\n\n    constructor ( address _staking, address _REQT ) {\n        require( _staking != address(0) );\n        staking = _staking;\n        require( _REQT != address(0) );\n        REQT = _REQT;\n    }\n\n    function stake( uint _amount ) external {\n        IERC20( REQT ).transferFrom( msg.sender, address(this), _amount );\n        IERC20( REQT ).approve( staking, _amount );\n        IStaking( staking ).stake( _amount, msg.sender );\n        IStaking( staking ).claim( msg.sender );\n    }\n}"
    },
    "contracts/StakingWarmup.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./interfaces/ERC20/IERC20.sol\";\n\ncontract StakingWarmup {\n\n    address public immutable staking;\n    address public immutable sREQT;\n\n    constructor ( address _staking, address _sREQT ) {\n        require( _staking != address(0) );\n        staking = _staking;\n        require( _sREQT != address(0) );\n        sREQT = _sREQT;\n    }\n\n    function retrieve( address _staker, uint _amount ) external {\n        require( msg.sender == staking );\n        IERC20( sREQT ).transfer( _staker, _amount );\n    }\n}"
    },
    "contracts/RequiemMaster.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.13;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/ERC20/IERC20.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IFundDistributor.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\n/*  RequiemMaster is a fork from Sushi's MiniChef v2 with slightly modification.\n    1.  Rewards will be transferred from a seperated contract so that it will be more flexible to switch between:\n        [mint reward token directly] OR [transfer them instead]\n    2.  Add a Harvest all function to quickly harvest rewards from all the deposited pools\n*/\ncontract RequiemMaster is Ownable {\n  using SafeERC20 for IERC20;\n\n  struct UserInfo {\n    uint256 amount;\n    int256 rewardDebt;\n  }\n\n  struct PoolInfo {\n    uint256 accRewardPerShare;\n    uint256 lastRewardTime;\n    uint256 allocPoint;\n  }\n\n  IERC20 public reward;\n  IFundDistributor public fund;\n\n  /// @notice Info of each MCV2 pool.\n  PoolInfo[] public poolInfo;\n  /// @notice Address of the LP token for each MCV2 pool.\n  IERC20[] public lpToken;\n  /// @notice Address of each `IRewarder` contract in MCV2.\n  IRewarder[] public rewarder;\n\n  /// @notice Info of each user that stakes LP tokens.\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n  /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint = 0;\n\n  uint256 public rewardPerSecond;\n  uint256 private constant ACC_REWARD_PRECISION = 1e12;\n\n  constructor(IERC20 _reward, IFundDistributor _fund) {\n    reward = _reward;\n    fund = _fund;\n  }\n\n  /* ========== PUBLIC FUNCTIONS ========== */\n\n  /// @notice Returns the number of MCV2 pools.\n  function poolLength() public view returns (uint256 pools) {\n    pools = poolInfo.length;\n  }\n\n  /// @notice View function to see pending reward on frontend.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _user Address of user.\n  /// @return pending reward for a given user.\n  function pendingReward(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256 pending)\n  {\n    PoolInfo memory pool = poolInfo[_pid];\n    UserInfo storage user = userInfo[_pid][_user];\n    uint256 accRewardPerShare = pool.accRewardPerShare;\n    uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n    if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n      uint256 time = block.timestamp - pool.lastRewardTime;\n      uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n        totalAllocPoint;\n      accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\n    }\n    pending = uint256(\n      int256((user.amount * accRewardPerShare) / ACC_REWARD_PRECISION) -\n        user.rewardDebt\n    );\n  }\n\n  /// @notice Update reward variables of the given pool.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @return pool Returns the pool that was updated.\n  function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    pool = poolInfo[pid];\n    if (block.timestamp > pool.lastRewardTime) {\n      uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n      if (lpSupply > 0) {\n        uint256 time = block.timestamp - pool.lastRewardTime;\n        uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n          totalAllocPoint;\n        pool.accRewardPerShare +=\n          (rewardAmount * ACC_REWARD_PRECISION) /\n          lpSupply;\n      }\n      pool.lastRewardTime = block.timestamp;\n      poolInfo[pid] = pool;\n      emit LogUpdatePool(\n        pid,\n        pool.lastRewardTime,\n        lpSupply,\n        pool.accRewardPerShare\n      );\n    }\n  }\n\n  /// @notice Update reward variables for all pools. Be careful of gas spending!\n  /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n  function massUpdatePools(uint256[] calldata pids) external {\n    uint256 len = pids.length;\n    for (uint256 i = 0; i < len; ++i) {\n      updatePool(pids[i]);\n    }\n  }\n\n  /// @notice Deposit LP tokens to MCV2 for reward allocation.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to deposit.\n  /// @param to The receiver of `amount` deposit benefit.\n  function deposit(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][to];\n\n    // Effects\n    user.amount += amount;\n    user.rewardDebt += int256(\n      (amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, to, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n    emit Deposit(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens.\n  function withdraw(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    // Effects\n    user.rewardDebt -= int256(\n      (amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    user.amount -= amount;\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of rewards.\n  function harvest(uint256 pid, address to) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedReward = int256(\n      (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n    // Effects\n    user.rewardDebt = accumulatedReward;\n\n    // Interactions\n    fund.distributeTo(to, _pendingReward);\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\n    }\n\n    emit Harvest(msg.sender, pid, _pendingReward);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens and rewards.\n  function withdrawAndHarvest(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedReward = int256(\n      (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n    // Effects\n    user.rewardDebt =\n      accumulatedReward -\n      int256((amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\n    user.amount -= amount;\n\n    // Interactions\n    fund.distributeTo(to, _pendingReward);\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n    emit Harvest(msg.sender, pid, _pendingReward);\n  }\n\n  /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of the LP tokens.\n  function emergencyWithdraw(uint256 pid, address to) public {\n    UserInfo storage user = userInfo[pid][msg.sender];\n    uint256 amount = user.amount;\n    user.amount = 0;\n    user.rewardDebt = 0;\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, 0, 0);\n    }\n\n    // Note: transfer can fail or succeed if `amount` is zero.\n    lpToken[pid].safeTransfer(to, amount);\n    emit EmergencyWithdraw(msg.sender, pid, amount, to);\n  }\n\n  function harvestAllRewards(address to) external {\n    uint256 length = poolInfo.length;\n    for (uint256 pid = 0; pid < length; ++pid) {\n      if (userInfo[pid][msg.sender].amount > 0) {\n        harvest(pid, to);\n      }\n    }\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n\n  function checkPoolDuplicate(IERC20 _lpToken) internal view {\n    uint256 length = poolInfo.length;\n    for (uint256 pid = 0; pid < length; ++pid) {\n      require(lpToken[pid] != _lpToken, \"add: existing pool?\");\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  /// @notice Add a new LP to the pool. Can only be called by the owner.\n  /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n  /// @param allocPoint AP of the new pool.\n  /// @param _lpToken Address of the LP ERC-20 token.\n  /// @param _rewarder Address of the rewarder delegate.\n  function add(\n    uint256 allocPoint,\n    IERC20 _lpToken,\n    IRewarder _rewarder\n  ) public onlyOwner {\n    checkPoolDuplicate(_lpToken);\n\n    totalAllocPoint += allocPoint;\n    lpToken.push(_lpToken);\n    rewarder.push(_rewarder);\n\n    poolInfo.push(\n      PoolInfo({\n        allocPoint: allocPoint,\n        lastRewardTime: block.timestamp,\n        accRewardPerShare: 0\n      })\n    );\n    emit LogPoolAddition(lpToken.length - 1, allocPoint, _lpToken, _rewarder);\n  }\n\n  /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _allocPoint New AP of the pool.\n  /// @param _rewarder Address of the rewarder delegate.\n  /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n  function set(\n    uint256 _pid,\n    uint256 _allocPoint,\n    IRewarder _rewarder,\n    bool overwrite\n  ) public onlyOwner {\n    totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n    poolInfo[_pid].allocPoint = _allocPoint;\n    if (overwrite) {\n      rewarder[_pid] = _rewarder;\n    }\n    emit LogSetPool(\n      _pid,\n      _allocPoint,\n      overwrite ? _rewarder : rewarder[_pid],\n      overwrite\n    );\n  }\n\n  /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n  /// @param _rewardPerSecond The amount of reward to be distributed per second.\n  function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n    rewardPerSecond = _rewardPerSecond;\n    emit LogRewardPerSecond(_rewardPerSecond);\n  }\n\n  /// @notice Set the new fund contract.\n  /// @param _fund The address of new fund contract.\n  function setFund(IFundDistributor _fund) public onlyOwner {\n    fund = _fund;\n    emit PoolFundChanged(address(_fund));\n  }\n\n  /* =============== EVENTS ==================== */\n\n  event Deposit(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Withdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n  event LogPoolAddition(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IERC20 indexed lpToken,\n    IRewarder indexed rewarder\n  );\n  event LogSetPool(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IRewarder indexed rewarder,\n    bool overwrite\n  );\n  event LogUpdatePool(\n    uint256 indexed pid,\n    uint256 lastRewardTime,\n    uint256 lpSupply,\n    uint256 accRewardPerShare\n  );\n  event LogRewardPerSecond(uint256 rewardPerSecond);\n  event PoolFundChanged(address indexed fund);\n}\n"
    },
    "contracts/interfaces/IFundDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface IFundDistributor {\n  function distributeTo(address _receiver, uint256 _amount) external;\n}\n"
    },
    "contracts/RequiemChef.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.13;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/ERC20/IERC20.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IFundDistributor.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\n/*  RequiemChef is a fork from Sushi's MiniChef v2 with slightly modification.\n    1.  Rewards will be transferred from a seperated contract so that it will be more flexible to switch between:\n        [mint reward token directly] OR [transfer them instead]\n    2.  Add a Harvest all function to quickly harvest rewards from all the deposited pools\n*/\ncontract RequiemChef is Ownable {\n  using SafeERC20 for IERC20;\n\n  struct UserInfo {\n    uint256 amount;\n    int256 rewardDebt;\n  }\n\n  struct PoolInfo {\n    uint256 accRewardPerShare;\n    uint256 lastRewardTime;\n    uint256 allocPoint;\n  }\n\n  IERC20 public reward;\n  IFundDistributor public fund;\n\n  /// @notice Info of each MCV2 pool.\n  PoolInfo[] public poolInfo;\n  /// @notice Address of the LP token for each MCV2 pool.\n  IERC20[] public lpToken;\n  /// @notice Address of each `IRewarder` contract in MCV2.\n  IRewarder[] public rewarder;\n\n  /// @notice Info of each user that stakes LP tokens.\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n  /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint = 0;\n\n  uint256 public rewardPerSecond;\n  uint256 private constant ACC_REWARD_PRECISION = 1e12;\n\n  constructor(IERC20 _reward, IFundDistributor _fund) {\n    reward = _reward;\n    fund = _fund;\n  }\n\n  /* ========== PUBLIC FUNCTIONS ========== */\n\n  /// @notice Returns the number of MCV2 pools.\n  function poolLength() public view returns (uint256 pools) {\n    pools = poolInfo.length;\n  }\n\n  /// @notice View function to see pending reward on frontend.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _user Address of user.\n  /// @return pending reward for a given user.\n  function pendingReward(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256 pending)\n  {\n    PoolInfo memory pool = poolInfo[_pid];\n    UserInfo storage user = userInfo[_pid][_user];\n    uint256 accRewardPerShare = pool.accRewardPerShare;\n    uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n    if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n      uint256 time = block.timestamp - pool.lastRewardTime;\n      uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n        totalAllocPoint;\n      accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\n    }\n    pending = uint256(\n      int256((user.amount * accRewardPerShare) / ACC_REWARD_PRECISION) -\n        user.rewardDebt\n    );\n  }\n\n  /// @notice Update reward variables of the given pool.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @return pool Returns the pool that was updated.\n  function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    pool = poolInfo[pid];\n    if (block.timestamp > pool.lastRewardTime) {\n      uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n      if (lpSupply > 0) {\n        uint256 time = block.timestamp - pool.lastRewardTime;\n        uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\n          totalAllocPoint;\n        pool.accRewardPerShare +=\n          (rewardAmount * ACC_REWARD_PRECISION) /\n          lpSupply;\n      }\n      pool.lastRewardTime = block.timestamp;\n      poolInfo[pid] = pool;\n      emit LogUpdatePool(\n        pid,\n        pool.lastRewardTime,\n        lpSupply,\n        pool.accRewardPerShare\n      );\n    }\n  }\n\n  /// @notice Update reward variables for all pools. Be careful of gas spending!\n  /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n  function massUpdatePools(uint256[] calldata pids) external {\n    uint256 len = pids.length;\n    for (uint256 i = 0; i < len; ++i) {\n      updatePool(pids[i]);\n    }\n  }\n\n  /// @notice Deposit LP tokens to MCV2 for reward allocation.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to deposit.\n  /// @param to The receiver of `amount` deposit benefit.\n  function deposit(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][to];\n\n    // Effects\n    user.amount += amount;\n    user.rewardDebt += int256(\n      (amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, to, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n    emit Deposit(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens.\n  function withdraw(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    // Effects\n    user.rewardDebt -= int256(\n      (amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    user.amount -= amount;\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of rewards.\n  function harvest(uint256 pid, address to) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedReward = int256(\n      (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n    // Effects\n    user.rewardDebt = accumulatedReward;\n\n    // Interactions\n    fund.distributeTo(to, _pendingReward);\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\n    }\n\n    emit Harvest(msg.sender, pid, _pendingReward);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens and rewards.\n  function withdrawAndHarvest(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedReward = int256(\n      (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION\n    );\n    uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n    // Effects\n    user.rewardDebt =\n      accumulatedReward -\n      int256((amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\n    user.amount -= amount;\n\n    // Interactions\n    fund.distributeTo(to, _pendingReward);\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n    emit Harvest(msg.sender, pid, _pendingReward);\n  }\n\n  /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of the LP tokens.\n  function emergencyWithdraw(uint256 pid, address to) public {\n    UserInfo storage user = userInfo[pid][msg.sender];\n    uint256 amount = user.amount;\n    user.amount = 0;\n    user.rewardDebt = 0;\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onReward(pid, msg.sender, to, 0, 0);\n    }\n\n    // Note: transfer can fail or succeed if `amount` is zero.\n    lpToken[pid].safeTransfer(to, amount);\n    emit EmergencyWithdraw(msg.sender, pid, amount, to);\n  }\n\n  function harvestAllRewards(address to) external {\n    uint256 length = poolInfo.length;\n    for (uint256 pid = 0; pid < length; ++pid) {\n      if (userInfo[pid][msg.sender].amount > 0) {\n        harvest(pid, to);\n      }\n    }\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n\n  function checkPoolDuplicate(IERC20 _lpToken) internal view {\n    uint256 length = poolInfo.length;\n    for (uint256 pid = 0; pid < length; ++pid) {\n      require(lpToken[pid] != _lpToken, \"add: existing pool?\");\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  /// @notice Add a new LP to the pool. Can only be called by the owner.\n  /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n  /// @param allocPoint AP of the new pool.\n  /// @param _lpToken Address of the LP ERC-20 token.\n  /// @param _rewarder Address of the rewarder delegate.\n  function add(\n    uint256 allocPoint,\n    IERC20 _lpToken,\n    IRewarder _rewarder\n  ) public onlyOwner {\n    checkPoolDuplicate(_lpToken);\n\n    totalAllocPoint += allocPoint;\n    lpToken.push(_lpToken);\n    rewarder.push(_rewarder);\n\n    poolInfo.push(\n      PoolInfo({\n        allocPoint: allocPoint,\n        lastRewardTime: block.timestamp,\n        accRewardPerShare: 0\n      })\n    );\n    emit LogPoolAddition(lpToken.length - 1, allocPoint, _lpToken, _rewarder);\n  }\n\n  /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _allocPoint New AP of the pool.\n  /// @param _rewarder Address of the rewarder delegate.\n  /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n  function set(\n    uint256 _pid,\n    uint256 _allocPoint,\n    IRewarder _rewarder,\n    bool overwrite\n  ) public onlyOwner {\n    totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n    poolInfo[_pid].allocPoint = _allocPoint;\n    if (overwrite) {\n      rewarder[_pid] = _rewarder;\n    }\n    emit LogSetPool(\n      _pid,\n      _allocPoint,\n      overwrite ? _rewarder : rewarder[_pid],\n      overwrite\n    );\n  }\n\n  /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n  /// @param _rewardPerSecond The amount of reward to be distributed per second.\n  function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n    rewardPerSecond = _rewardPerSecond;\n    emit LogRewardPerSecond(_rewardPerSecond);\n  }\n\n  /// @notice Set the new fund contract.\n  /// @param _fund The address of new fund contract.\n  function setFund(IFundDistributor _fund) public onlyOwner {\n    fund = _fund;\n    emit PoolFundChanged(address(_fund));\n  }\n\n  /* =============== EVENTS ==================== */\n\n  event Deposit(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Withdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n  event LogPoolAddition(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IERC20 indexed lpToken,\n    IRewarder indexed rewarder\n  );\n  event LogSetPool(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IRewarder indexed rewarder,\n    bool overwrite\n  );\n  event LogUpdatePool(\n    uint256 indexed pid,\n    uint256 lastRewardTime,\n    uint256 lpSupply,\n    uint256 accRewardPerShare\n  );\n  event LogRewardPerSecond(uint256 rewardPerSecond);\n  event PoolFundChanged(address indexed fund);\n}\n"
    },
    "contracts/RedRequiemStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./interfaces/ERC20/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/proxy/UUPSUpgradeable.sol\";\nimport \"./libraries/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./libraries/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IFundDistributor.sol\";\n\nusing SafeERC20 for IERC20 global;\n\n// solhint-disable max-line-length\n\ncontract RedRequiemStaking is Initializable, OwnableUpgradeable, UUPSUpgradeable, ReentrancyGuardUpgradeable {\n\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    IERC20 public usdc;\n    IERC20 public redRequiem;\n\n    // governance\n    address public reserveFund;\n\n    uint256 public accRewardPerShare;\n    uint256 public lastRewardTime;\n    uint256 public endRewardTime;\n    uint256 public startRewardTime;\n\n    uint256 public rewardPerSecond;\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\n    uint256 private constant MISSING_DECIMALS = 12;\n\n    mapping (address => UserInfo) public userInfo;\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyReserveFund() {\n        require(reserveFund == msg.sender || owner() == msg.sender, \"RedRequiemStaking: caller is not the reserveFund\");\n        _;\n    }\n\n    /** This required by UUPS pattern */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function initialize(\n        IERC20 _usdc,\n        IERC20 _redRequiem\n    ) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        usdc = _usdc;\n        redRequiem = _redRequiem;\n        lastRewardTime = block.timestamp;\n        startRewardTime = block.timestamp;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function getRewardForDuration(uint256 _from, uint256 _to) public view returns (uint256) {\n        uint256 _rewardPerSecond = rewardPerSecond;\n        if (_from >= _to || _from >= endRewardTime) return 0;\n        if (_to <= startRewardTime) return 0;\n        if (_from <= startRewardTime) {\n            if (_to <= endRewardTime) return (_to - startRewardTime) * _rewardPerSecond;\n            else return (endRewardTime - startRewardTime) * _rewardPerSecond;\n        }\n        if (_to <= endRewardTime) return (_to - _from) * _rewardPerSecond;\n        else return (endRewardTime - _from) * _rewardPerSecond;\n    }\n\n    function getRewardPerSecond() public view returns (uint256) {\n        return getRewardForDuration(block.timestamp, block.timestamp + 1);\n    }\n\n\n    /// @notice View function to see pending reward on frontend.\n    /// @param _user Address of user.\n    /// @return pending reward for a given user.\n    function pendingReward(address _user) external view returns (uint256 pending) {\n        UserInfo storage user = userInfo[_user];\n        uint256 supply = redRequiem.balanceOf(address(this));\n        uint256 _accRewardPerShare = accRewardPerShare;\n        if (block.timestamp > lastRewardTime && supply != 0) {\n            uint256 rewardAmount = getRewardForDuration(lastRewardTime, block.timestamp);\n            _accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / supply;\n        }\n        pending = uint256(int256(user.amount * _accRewardPerShare / ACC_REWARD_PRECISION) - user.rewardDebt) / (10 ** MISSING_DECIMALS);\n    }\n\n    /// @notice Update reward variables of the given pool.\n    function updatePool() public {\n        if (block.timestamp > lastRewardTime) {\n            uint256 supply = redRequiem.balanceOf(address(this));\n            if (supply > 0) {\n                uint256 rewardAmount = getRewardForDuration(lastRewardTime, block.timestamp);\n                accRewardPerShare += rewardAmount * ACC_REWARD_PRECISION / supply;\n            }\n            lastRewardTime = block.timestamp;\n            emit LogUpdatePool(lastRewardTime, supply, accRewardPerShare);\n        }\n    }\n\n    /// @notice Deposit LP tokens to MCV2 for reward allocation.\n    /// @param amount LP token amount to deposit.\n    /// @param to The receiver of `amount` deposit benefit.\n    function deposit(uint256 amount, address to) public {\n        updatePool();\n        UserInfo storage user = userInfo[to];\n\n        // Effects\n        user.amount += amount;\n        user.rewardDebt += int256(amount * accRewardPerShare / ACC_REWARD_PRECISION);\n\n        redRequiem.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, amount, to);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens.\n    function withdraw(uint256 amount, address to) public {\n        updatePool();\n        UserInfo storage user = userInfo[msg.sender];\n\n        // Effects\n        user.rewardDebt -= int256(amount * accRewardPerShare / ACC_REWARD_PRECISION);\n        user.amount -= amount;\n\n        redRequiem.safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, amount, to);\n    }\n\n    /// @notice Harvest proceeds for transaction sender to `to`.\n    /// @param to Receiver of rewards.\n    function harvest(address to) public {\n        updatePool();\n        UserInfo storage user = userInfo[msg.sender];\n        int256 accumulatedReward = int256(user.amount * accRewardPerShare / ACC_REWARD_PRECISION);\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt) / (10 ** MISSING_DECIMALS);\n\n        // Effects\n        user.rewardDebt = accumulatedReward;\n\n        // Interactions\n        if (_pendingReward > 0) {\n            usdc.safeTransfer(to, _pendingReward);\n        }\n\n        emit Harvest(msg.sender, _pendingReward);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens and rewards.\n    function withdrawAndHarvest(uint256 amount, address to) public {\n        updatePool();\n        UserInfo storage user = userInfo[msg.sender];\n        int256 accumulatedReward = int256(user.amount * accRewardPerShare / ACC_REWARD_PRECISION);\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt) / (10 ** MISSING_DECIMALS);\n\n        // Effects\n        user.rewardDebt = accumulatedReward - int256(amount * accRewardPerShare / ACC_REWARD_PRECISION);\n        user.amount -= amount;\n\n        // Interactions\n        if (_pendingReward > 0) {\n            usdc.safeTransfer(to, _pendingReward);\n        }\n\n        redRequiem.safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, amount, to);\n        emit Harvest(msg.sender, _pendingReward);\n    }\n\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    /// @param to Receiver of the LP tokens.\n    function emergencyWithdraw(address to) public {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        redRequiem.safeTransfer(to, amount);\n        emit EmergencyWithdraw(msg.sender, amount, to);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n    /// @param _rewardPerSecond The amount of reward to be distributed per second.\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n        rewardPerSecond = _rewardPerSecond;\n        emit LogRewardPerSecond(_rewardPerSecond);\n    }\n\n    function allocateMoreRewards(uint256 _addedReward, uint256 _days) external onlyReserveFund {\n        updatePool();\n        uint256 _pendingSeconds = (endRewardTime >  block.timestamp) ? (endRewardTime - block.timestamp) : 0;\n        uint256 _newPendingReward = (rewardPerSecond * _pendingSeconds) + _addedReward * (10 ** MISSING_DECIMALS);\n        uint256 _newPendingSeconds = _pendingSeconds + (_days * (1 days));\n        uint256 _newRewardPerSecond = _newPendingReward / _newPendingSeconds;\n        rewardPerSecond = _newRewardPerSecond;\n        if (_days > 0) {\n            if (endRewardTime <  block.timestamp) {\n                endRewardTime =  block.timestamp + (_days * (1 days));\n            } else {\n                endRewardTime = endRewardTime +  (_days * (1 days));\n            }\n        }\n        usdc.safeTransferFrom(msg.sender, address(this), _addedReward);\n        emit LogRewardPerSecond(_newRewardPerSecond);\n    }\n\n    function setReserveFund(address _reserveFund) external onlyReserveFund {\n        reserveFund = _reserveFund;\n    }\n\n    function rescueFund(uint256 _amount) external onlyOwner {\n        require(_amount > 0 && _amount <= usdc.balanceOf(address(this)), \"invalid amount\");\n        usdc.safeTransfer(owner(), _amount);\n        emit FundRescued(owner(), _amount);\n    }\n\n    /* =============== EVENTS ==================== */\n\n    event Deposit(address indexed user, uint256 amount, address indexed to);\n    event Withdraw(address indexed user, uint256 amount, address indexed to);\n    event EmergencyWithdraw(address indexed user, uint256 amount, address indexed to);\n    event Harvest(address indexed user, uint256 amount);\n    event LogUpdatePool(uint256 lastRewardTime, uint256 lpSupply, uint256 accRewardPerShare);\n    event LogRewardPerSecond(uint256 rewardPerSecond);\n    event FundRescued(address indexed receiver, uint256 amount);\n}"
    },
    "contracts/libraries/proxy/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967UpgradeUpgradeable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/libraries/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../interfaces/IBeaconUpgradeable.sol\";\nimport \"./utils/AddressUpgradeable.sol\";\nimport \"./utils/StorageSlotUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n// solhint-disable max-line-length\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "contracts/libraries/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n// solhint-disable max-line-length\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n// solhint-disable max-line-length\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}"
    },
    "contracts/libraries/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/RequiemERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/ERC20Permit.sol\";\nimport \"./libraries/Ownable.sol\";\n\n/**\n *  Governance token for requiem.finance\n *  - Flexible minting allowed for flexibility\n *  - Total supply cap for better control\n *  - Controllable minters with indivitual caps\n */\ncontract RequiemERC20Token is ERC20Permit, Ownable, ERC20Burnable {\n  uint256 public MAX_TOTAL_SUPPLY = 10_000_000_000 ether; // 10bn\n\n  mapping(address => uint256) public minters; // minter's address => minter's max cap\n  mapping(address => uint256) public minters_minted;\n\n  /* ========== EVENTS ========== */\n  event MinterUpdate(address indexed account, uint256 cap);\n  event MaxTotalSupplyUpdated(uint256 _newCap);\n\n  /* ========== Modifiers =============== */\n\n  modifier onlyMinter() {\n    require(minters[msg.sender] > 0, \"Only minter can interact\");\n    _;\n  }\n\n  constructor() ERC20(\"Requiem Token\", \"REQT\", 18) ERC20Permit(\"REQT\") {}\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  function mint(address _recipient, uint256 _amount) public onlyMinter {\n    minters_minted[_msgSender()] += _amount;\n    require(\n      minters[_msgSender()] >= minters_minted[_msgSender()],\n      \"Minting amount exceeds minter cap\"\n    );\n    _mint(_recipient, _amount);\n  }\n\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal override {\n    super._beforeTokenTransfer(_from, _to, _amount);\n    if (_from == address(0)) {\n      // When minting tokens\n      require(\n        totalSupply() + _amount <= MAX_TOTAL_SUPPLY,\n        \"Max total supply exceeded\"\n      );\n    }\n    if (_to == address(0)) {\n      // When burning tokens\n      require(\n        MAX_TOTAL_SUPPLY >= _amount,\n        \"Burn amount exceeds max total supply\"\n      );\n      MAX_TOTAL_SUPPLY -= _amount;\n    }\n  }\n\n  /* ========== OWNER FUNCTIONS ========== */\n\n  function setMinter(address _account, uint256 _minterCap) external onlyOwner {\n    require(_account != address(0), \"invalid address\");\n    require(\n      minters_minted[_account] <= _minterCap,\n      \"Minter already minted a larger amount than new cap\"\n    );\n    minters[_account] = _minterCap;\n    emit MinterUpdate(_account, _minterCap);\n  }\n\n  function resetMaxTotalSupply(uint256 _newCap) external onlyOwner {\n    require(_newCap >= totalSupply(), \"_newCap is below current total supply\");\n    MAX_TOTAL_SUPPLY = _newCap;\n    emit MaxTotalSupplyUpdated(_newCap);\n  }\n}\n"
    },
    "contracts/libraries/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./ERC20.sol\";\nimport \"../interfaces/ERC20/IERC20Permit.sol\";\nimport \"./EIP712.sol\";\n\n// solhint-disable no-empty-blocks\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n  mapping(address => uint256) private _nonces;\n\n  // solhint-disable-next-line var-name-mixedcase\n  bytes32 private immutable _PERMIT_TYPEHASH =\n    keccak256(\n      \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n  /**\n   * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n   *\n   * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n   */\n  constructor(string memory name) EIP712(name, \"1\") {}\n\n  /**\n   * @dev See {IERC20Permit-permit}.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public virtual override {\n    // solhint-disable-next-line not-rely-on-time\n    require(block.timestamp <= deadline, \"EXPIRED_PERMIT\");\n\n    uint256 nonce = _nonces[owner];\n    bytes32 structHash = keccak256(\n      abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline)\n    );\n\n    bytes32 hash = _hashTypedDataV4(structHash);\n\n    address signer = ecrecover(hash, v, r, s);\n    require((signer != address(0)) && (signer == owner), \"INVALID_SIGNATURE\");\n\n    _nonces[owner] = nonce + 1;\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev See {IERC20Permit-nonces}.\n   */\n  function nonces(address owner) public view override returns (uint256) {\n    return _nonces[owner];\n  }\n\n  /**\n   * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n}\n"
    },
    "contracts/interfaces/ERC20/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/libraries/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _HASHED_NAME = keccak256(bytes(name));\n        _HASHED_VERSION = keccak256(bytes(version));\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    function _getChainId() private view returns (uint256 chainId) {\n        // Silence state mutability warning without generating bytecode.\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\n        // https://github.com/ethereum/solidity/issues/2691\n        this;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
    },
    "contracts/sRequiemERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./libraries/ERC20Permit.sol\";\nimport \"./libraries/Manageable.sol\";\n\ncontract sRequiem is ERC20Permit, Manageable {\n  modifier onlyStakingContract() {\n    require(msg.sender == stakingContract);\n    _;\n  }\n\n  address public stakingContract;\n  address public initializer;\n\n  event LogSupply(\n    uint256 indexed epoch,\n    uint256 timestamp,\n    uint256 _totalSupply\n  );\n  event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n  event LogStakingContractUpdated(address stakingContract);\n\n  struct Rebase {\n    uint256 epoch;\n    uint256 rebase; // 18 decimals\n    uint256 totalStakedBefore;\n    uint256 totalStakedAfter;\n    uint256 amountRebased;\n    uint256 index;\n    uint256 blockNumberOccured;\n  }\n  Rebase[] public rebases;\n\n  uint256 public INDEX;\n\n  uint256 private constant MAX_UINT256 = ~uint256(0);\n  uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\n\n  // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n  // Use the highest value that fits in a uint256 for max granularity.\n  uint256 private constant TOTAL_GONS =\n    MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n  // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n  uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n  uint256 private _gonsPerFragment;\n  mapping(address => uint256) private _gonBalances;\n\n  mapping(address => mapping(address => uint256)) private _allowedValue;\n\n  constructor() ERC20(\"Staked Requiem\", \"sREQT\", 9) ERC20Permit(\"sREQT\") {\n    initializer = msg.sender;\n    _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n    _gonsPerFragment = TOTAL_GONS / _totalSupply;\n  }\n\n  function initialize(address stakingContract_) external returns (bool) {\n    require(msg.sender == initializer);\n    require(stakingContract_ != address(0));\n    stakingContract = stakingContract_;\n    _gonBalances[stakingContract] = TOTAL_GONS;\n\n    emit Transfer(address(0x0), stakingContract, _totalSupply);\n    emit LogStakingContractUpdated(stakingContract_);\n\n    initializer = address(0);\n    return true;\n  }\n\n  function setIndex(uint256 _INDEX) external onlyManager returns (bool) {\n    require(INDEX == 0);\n    INDEX = gonsForBalance(_INDEX);\n    return true;\n  }\n\n  /**\n        @notice increases sREQT supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n  function rebase(uint256 profit_, uint256 epoch_)\n    public\n    onlyStakingContract\n    returns (uint256)\n  {\n    uint256 rebaseAmount;\n    uint256 circulatingSupply_ = circulatingSupply();\n\n    if (profit_ == 0) {\n      emit LogSupply(epoch_, block.timestamp, _totalSupply);\n      emit LogRebase(epoch_, 0, index());\n      return _totalSupply;\n    } else if (circulatingSupply_ > 0) {\n      rebaseAmount = (profit_ * _totalSupply) / circulatingSupply_;\n    } else {\n      rebaseAmount = profit_;\n    }\n\n    _totalSupply = _totalSupply + rebaseAmount;\n\n    if (_totalSupply > MAX_SUPPLY) {\n      _totalSupply = MAX_SUPPLY;\n    }\n\n    _gonsPerFragment = TOTAL_GONS / _totalSupply;\n\n    _storeRebase(circulatingSupply_, profit_, epoch_);\n\n    return _totalSupply;\n  }\n\n  /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n        @return bool\n     */\n  function _storeRebase(\n    uint256 previousCirculating_,\n    uint256 profit_,\n    uint256 epoch_\n  ) internal returns (bool) {\n    uint256 rebasePercent = (profit_ * 1e18) / previousCirculating_;\n\n    rebases.push(\n      Rebase({\n        epoch: epoch_,\n        rebase: rebasePercent, // 18 decimals\n        totalStakedBefore: previousCirculating_,\n        totalStakedAfter: circulatingSupply(),\n        amountRebased: profit_,\n        index: index(),\n        blockNumberOccured: block.number\n      })\n    );\n\n    emit LogSupply(epoch_, block.timestamp, _totalSupply);\n    emit LogRebase(epoch_, rebasePercent, index());\n\n    return true;\n  }\n\n  function balanceOf(address who) public view override returns (uint256) {\n    return _gonBalances[who] / _gonsPerFragment;\n  }\n\n  function gonsForBalance(uint256 amount) public view returns (uint256) {\n    return amount * _gonsPerFragment;\n  }\n\n  function balanceForGons(uint256 gons) public view returns (uint256) {\n    return gons / _gonsPerFragment;\n  }\n\n  // Staking contract holds excess sREQT\n  function circulatingSupply() public view returns (uint256) {\n    return _totalSupply - balanceOf(stakingContract);\n  }\n\n  function index() public view returns (uint256) {\n    return balanceForGons(INDEX);\n  }\n\n  function transfer(address to, uint256 value) public override returns (bool) {\n    uint256 gonValue = value * _gonsPerFragment;\n    _gonBalances[msg.sender] -= gonValue;\n    _gonBalances[to] += gonValue;\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function allowance(address owner_, address spender)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return _allowedValue[owner_][spender];\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) public override returns (bool) {\n    _allowedValue[from][msg.sender] -= value;\n    emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n    uint256 gonValue = gonsForBalance(value);\n    _gonBalances[from] = _gonBalances[from] - gonValue;\n    _gonBalances[to] = _gonBalances[to] + gonValue;\n    emit Transfer(from, to, value);\n\n    return true;\n  }\n\n  function approve(address spender, uint256 value)\n    public\n    override\n    returns (bool)\n  {\n    _allowedValue[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  // What gets called in a permit\n  function _approve(\n    address owner,\n    address spender,\n    uint256 value\n  ) internal virtual override {\n    _allowedValue[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue)\n    public\n    override\n    returns (bool)\n  {\n    _allowedValue[msg.sender][spender] += addedValue;\n    emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    override\n    returns (bool)\n  {\n    uint256 oldValue = _allowedValue[msg.sender][spender];\n    if (subtractedValue >= oldValue) {\n      _allowedValue[msg.sender][spender] = 0;\n    } else {\n      _allowedValue[msg.sender][spender] = oldValue - subtractedValue;\n    }\n    emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\n    return true;\n  }\n}\n"
    },
    "contracts/libraries/Manageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"../interfaces/IManageable.sol\";\n\ncontract Manageable is IManageable {\n\n    address internal _owner;\n    address internal _newOwner;\n\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = msg.sender;\n        emit OwnershipPushed( address(0), _owner );\n    }\n\n    function policy() public view override returns (address) {\n        return _owner;\n    }\n\n    modifier onlyPolicy() {\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n\n    modifier onlyManager() {\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n\n    function renounceManagement() public virtual override onlyPolicy() {\n        emit OwnershipPushed( _owner, address(0) );\n        _owner = address(0);\n    }\n\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipPushed( _owner, newOwner_ );\n        _newOwner = newOwner_;\n    }\n    \n    function pullManagement() public virtual override {\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\n        emit OwnershipPulled( _owner, _newOwner );\n        _owner = _newOwner;\n    }\n}"
    },
    "contracts/interfaces/IManageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n\ninterface IManageable {\n  function policy() external view returns (address);\n\n  function renounceManagement() external;\n  \n  function pushManagement( address newOwner_ ) external;\n  \n  function pullManagement() external;\n}"
    },
    "contracts/RequiemDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./interfaces/ERC20/IERC20.sol\";\nimport \"./libraries/ERC20.sol\";\nimport \"./libraries/Context.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/ERC20/IRewardToken.sol\";\nimport \"./interfaces/ERC20/IRewardToken.sol\";\n\nusing SafeERC20 for IRewardToken global;\n\ncontract RequiemDistributor is Ownable, Initializable, Context {\n\n  IRewardToken public reward;\n  uint256 public missingDecimals;\n\n  // CONTRACTS\n  mapping(address => bool) public requesters;\n\n  /* ========== MODIFIER ========== */\n\n  modifier onlyRequester() {\n    require(requesters[_msgSender()], \"Only pool can request transfer\");\n    _;\n  }\n\n  function initialize(address _reward) external initializer {\n    reward = IRewardToken(_reward);\n    missingDecimals = 18 - ERC20(_reward).decimals();\n  }\n\n  /* ========== MUTATIVE ====================== */\n\n  function distributeTo(address _receiver, uint256 _amount)\n    public\n    onlyRequester\n  {\n    require(_receiver != address(0), \"Invalid address\");\n    if (_amount > 0) {\n      reward.mint(_receiver, _amount / (10**missingDecimals));\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  function addRequester(address _requester) external onlyOwner {\n    require(!requesters[_requester], \"requester existed\");\n    requesters[_requester] = true;\n    emit RequesterAdded(_requester);\n  }\n\n  function removeRequester(address _requester) external onlyOwner {\n    require(requesters[_requester], \"requester not found\");\n    delete requesters[_requester];\n    emit RequesterRemoved(_requester);\n  }\n\n  /* ========== EVENTS ========================= */\n\n  event RequesterAdded(address indexed requester);\n  event RequesterRemoved(address indexed requester);\n  event FundRequested(uint256 indexed amount);\n}\n"
    },
    "contracts/interfaces/ERC20/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./IERC20.sol\";\n\ninterface IRewardToken is IERC20 {\n    function mint(address _recipient, uint256 _amount) external;\n}\n"
    },
    "contracts/FundDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./interfaces/ERC20/IERC20.sol\";\nimport \"./libraries/ERC20.sol\";\nimport \"./libraries/Context.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/ERC20/IRewardToken.sol\";\n\ncontract FundDistributor is Ownable, Initializable, Context {\n  using SafeERC20 for IRewardToken;\n\n  IRewardToken public reward;\n  uint256 public missingDecimals;\n\n  // CONTRACTS\n  mapping(address => bool) public requesters;\n\n  /* ========== MODIFIER ========== */\n\n  modifier onlyRequester() {\n    require(requesters[_msgSender()], \"Only pool can request transfer\");\n    _;\n  }\n\n  function initialize(address _reward) external initializer {\n    reward = IRewardToken(_reward);\n    missingDecimals = 18 - ERC20(_reward).decimals();\n  }\n\n  /* ========== MUTATIVE ====================== */\n\n  function distributeTo(address _receiver, uint256 _amount)\n    public\n    onlyRequester\n  {\n    require(_receiver != address(0), \"Invalid address\");\n    if (_amount > 0) {\n      reward.mint(_receiver, _amount / (10**missingDecimals));\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  function addRequester(address _requester) external onlyOwner {\n    require(!requesters[_requester], \"requester existed\");\n    requesters[_requester] = true;\n    emit RequesterAdded(_requester);\n  }\n\n  function removeRequester(address _requester) external onlyOwner {\n    require(requesters[_requester], \"requester not found\");\n    delete requesters[_requester];\n    emit RequesterRemoved(_requester);\n  }\n\n  /* ========== EVENTS ========================= */\n\n  event RequesterAdded(address indexed requester);\n  event RequesterRemoved(address indexed requester);\n  event FundRequested(uint256 indexed amount);\n}\n"
    },
    "contracts/libraries/ERC20Lock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"../interfaces/ERC20/IERC20.sol\";\nimport \"../interfaces/ERC20/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Lock is Context, IERC20, IERC20Metadata {\n  mapping(address => uint256) private _balances;\n\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  uint256 internal _totalSupply;\n\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   * All two of these values are immutable: they can only be set once during\n   * construction.\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) {\n    _name = name_;\n    _symbol = symbol_;\n    _decimals = decimals_;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\n   * overridden;\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals()\n    public\n    view\n    virtual\n    override(IERC20, IERC20Metadata)\n    returns (uint8)\n  {\n    return _decimals;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(address account)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount)\n    public\n    virtual\n    override\n    returns (bool)\n  {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(address owner, address spender)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount)\n    public\n    virtual\n    override\n    returns (bool)\n  {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   *\n   * Requirements:\n   *\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``sender``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\n    require(\n      currentAllowance >= amount,\n      \"ERC20: transfer amount exceeds allowance\"\n    );\n    unchecked {\n      _approve(sender, _msgSender(), currentAllowance - amount);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    _approve(\n      _msgSender(),\n      spender,\n      _allowances[_msgSender()][spender] + addedValue\n    );\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\n    require(\n      currentAllowance >= subtractedValue,\n      \"ERC20: decreased allowance below zero\"\n    );\n    unchecked {\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) internal virtual {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    _beforeTokenTransfer(sender, recipient, amount);\n\n    uint256 senderBalance = _balances[sender];\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    unchecked {\n      _balances[sender] = senderBalance - amount;\n    }\n    _balances[recipient] += amount;\n\n    emit Transfer(sender, recipient, amount);\n\n    _afterTokenTransfer(sender, recipient, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Custom version that does not execute before and after transaction tasks.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: mint to the zero address\");\n    _totalSupply += amount;\n    _balances[account] += amount;\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   * Custom version that does not execute the before and after transaction\n   * tasks.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n\n    uint256 accountBalance = _balances[account];\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n      _balances[account] = accountBalance - amount;\n    }\n    _totalSupply -= amount;\n\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   *\n   * This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * has been transferred to `to`.\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n}\n"
    },
    "contracts/libraries/ERC20BurnableLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./ERC20Lock.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableLock is Context, ERC20Lock {\n  /**\n   * @dev Destroys `amount` tokens from the caller.\n   *\n   * See {ERC20-_burn}.\n   */\n  function burn(uint256 amount) public virtual {\n    _burn(_msgSender(), amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n   * allowance.\n   *\n   * See {ERC20-_burn} and {ERC20-allowance}.\n   *\n   * Requirements:\n   *\n   * - the caller must have allowance for ``accounts``'s tokens of at least\n   * `amount`.\n   */\n  function burnFrom(address account, uint256 amount) public virtual {\n    uint256 currentAllowance = allowance(account, _msgSender());\n    require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n    unchecked {\n      _approve(account, _msgSender(), currentAllowance - amount);\n    }\n    _burn(account, amount);\n  }\n}\n"
    },
    "contracts/RedRequiem.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IGovernanceToken.sol\";\n\nusing SafeERC20 for IERC20 global;\n\ncontract RedRequiem is ERC20Burnable, IGovernanceToken, Ownable {\n    // flags\n    uint256 private _unlocked;\n\n    uint256 public constant MINDAYS = 7;\n    uint256 public constant MAXDAYS = 3 * 365;\n\n    uint256 public constant MAXTIME = MAXDAYS * 1 days; // 3 years\n    uint256 public constant MAX_WITHDRAWAL_PENALTY = 50000; // 50%\n    uint256 public constant PRECISION = 100000; // 5 decimals\n\n    address public lockedToken;\n    address public penaltyCollector;\n    uint256 public minLockedAmount;\n    uint256 public earlyWithdrawPenaltyRate;\n\n    struct LockedBalance {\n        uint256 amount;\n        uint256 end;\n    }\n\n    mapping(address => LockedBalance) public locked;\n    mapping(address => uint256) public mintedForLock;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier lock() {\n        require(_unlocked == 1, \"LOCKED\");\n        _unlocked = 0;\n        _;\n        _unlocked = 1;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lockedToken,\n        uint256 _minLockedAmount) ERC20(_name, _symbol, 18)\n    {\n        lockedToken = _lockedToken;\n        minLockedAmount = _minLockedAmount;\n        earlyWithdrawPenaltyRate = 30000; // 30%\n        _unlocked = 1;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function locked__of(address _addr) external view override returns (uint256) {\n        return locked[_addr].amount;\n    }\n\n    function locked__end(address _addr) external view override returns (uint256) {\n        return locked[_addr].end;\n    }\n\n    function voting_power_unlock_time(uint256 _value, uint256 _unlock_time) public view override returns (uint256) {\n        uint256 _now = block.timestamp;\n        if (_unlock_time <= _now) return 0;\n        uint256 _lockedSeconds = _unlock_time - _now;\n        if (_lockedSeconds >= MAXTIME) {\n            return _value;\n        }\n        return _value * _lockedSeconds / MAXTIME;\n    }\n\n    function voting_power_locked_days(uint256 _value, uint256 _days) public pure override returns (uint256) {\n        if (_days >= MAXDAYS) {\n            return _value;\n        }\n        return _value * _days / MAXDAYS;\n    }\n\n    function deposit_for(address _addr, uint256 _value) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        _deposit_for(_addr, _value, 0);\n    }\n\n    function create_lock(uint256 _value, uint256 _days) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        require(locked[_msgSender()].amount == 0, \"Withdraw old tokens first\");\n        require(_days >= MINDAYS, \"Voting lock can be 7 days min\");\n        require(_days <= MAXDAYS, \"Voting lock can be 4 years max\");\n        _deposit_for(_msgSender(), _value, _days);\n    }\n\n    function increase_amount(uint256 _value) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        _deposit_for(_msgSender(), _value, 0);\n    }\n\n    function increase_unlock_time(uint256 _days) external override {\n        require(_days >= MINDAYS, \"Voting lock can be 7 days min\");\n        require(_days <= MAXDAYS, \"Voting lock can be 4 years max\");\n        _deposit_for(_msgSender(), 0, _days);\n    }\n\n    function withdraw() external override lock {\n        LockedBalance storage _locked = locked[_msgSender()];\n        uint256 _now = block.timestamp;\n        require(_locked.amount > 0, \"Nothing to withdraw\");\n        require(_now >= _locked.end, \"The lock didn't expire\");\n        uint256 _amount = _locked.amount;\n        _locked.end = 0;\n        _locked.amount = 0;\n        _burn(_msgSender(), mintedForLock[_msgSender()]);\n        mintedForLock[_msgSender()] = 0;\n        IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n        emit Withdraw(_msgSender(), _amount, _now);\n    }\n\n    // This will charge PENALTY if lock is not expired yet\n    function emergencyWithdraw() external lock {\n        LockedBalance storage _locked = locked[_msgSender()];\n        uint256 _now = block.timestamp;\n        require(_locked.amount > 0, \"Nothing to withdraw\");\n        uint256 _amount = _locked.amount;\n        if (_now < _locked.end) {\n            uint256 _fee = _amount * earlyWithdrawPenaltyRate / PRECISION;\n            _penalize(_fee);\n            _amount = _amount - _fee;\n        }\n        _locked.end = 0;\n        _locked.amount = 0;\n        _burn(_msgSender(), mintedForLock[_msgSender()]);\n        mintedForLock[_msgSender()] = 0;\n\n        IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n        emit Withdraw(_msgSender(), _amount, _now);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _deposit_for(\n        address _addr,\n        uint256 _value,\n        uint256 _days\n    ) internal lock {\n        LockedBalance storage _locked = locked[_addr];\n        uint256 _now = block.timestamp;\n        uint256 _amount = _locked.amount;\n        uint256 _end = _locked.end;\n        uint256 _vp;\n        if (_amount == 0) {\n            _vp = voting_power_locked_days(_value, _days);\n            _locked.amount = _value;\n            _locked.end = _now + _days * 1 days;\n        } else if (_days == 0) {\n            _vp = voting_power_unlock_time(_value, _end);\n            _locked.amount = _amount + _value;\n        } else {\n            require(_value == 0, \"Cannot increase amount and extend lock in the same time\");\n            _vp = voting_power_locked_days(_amount, _days);\n            _locked.end = _end + _days * 1 days;\n            require(_locked.end - _now <= MAXTIME, \"Cannot extend lock to more than 4 years\");\n        }\n        require(_vp > 0, \"No benefit to lock\");\n        if (_value > 0) {\n            IERC20(lockedToken).safeTransferFrom(_msgSender(), address(this), _value);\n        }\n        _mint(_addr, _vp);\n        mintedForLock[_addr] += _vp;\n\n        emit Deposit(_addr, _locked.amount, _locked.end, _now);\n    }\n\n    function _penalize(uint256 _amount) internal {\n        if (penaltyCollector != address(0)) {\n            // send to collector if `penaltyCollector` set\n            IERC20(lockedToken).safeTransfer(penaltyCollector, _amount);\n        } else {\n            ERC20Burnable(lockedToken).burn(_amount);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setMinLockedAmount(uint256 _minLockedAmount) external onlyOwner {\n        minLockedAmount = _minLockedAmount;\n        emit MinLockedAmountSet(_minLockedAmount);\n    }\n\n    function setEarlyWithdrawPenaltyRate(uint256 _earlyWithdrawPenaltyRate) external onlyOwner {\n        require(_earlyWithdrawPenaltyRate <= MAX_WITHDRAWAL_PENALTY, \"withdrawal penalty is too high\"); // <= 50%\n        earlyWithdrawPenaltyRate = _earlyWithdrawPenaltyRate;\n        emit EarlyWithdrawPenaltySet(_earlyWithdrawPenaltyRate);\n    }\n\n    function setPenaltyCollector(address _addr) external onlyOwner {\n        penaltyCollector = _addr;\n        emit PenaltyCollectorSet(_addr);\n    }\n\n    /* =============== EVENTS ==================== */\n    event Deposit(address indexed provider, uint256 value, uint256 locktime, uint256 timestamp);\n    event Withdraw(address indexed provider, uint256 value, uint256 timestamp);\n    event PenaltyCollectorSet(address indexed addr);\n    event EarlyWithdrawPenaltySet(uint256 indexed penalty);\n    event MinLockedAmountSet(uint256 indexed amount);\n}\n"
    },
    "contracts/interfaces/IGovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IGovernanceToken {\n    function locked__of(address _addr) external view returns (uint256);\n\n    function locked__end(address _addr) external view returns (uint256);\n\n    function voting_power_unlock_time(uint256 _value, uint256 _unlock_time) external view returns (uint256);\n\n    function voting_power_locked_days(uint256 _value, uint256 _days) external view returns (uint256);\n\n    function deposit_for(address _addr, uint256 _value) external;\n\n    function create_lock(uint256 _value, uint256 _days) external;\n\n    function increase_amount(uint256 _value) external;\n\n    function increase_unlock_time(uint256 _days) external;\n\n    function withdraw() external;\n}\n"
    },
    "contracts/interfaces/IRequiemStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./ERC20/IERC20.sol\";\n\n// solhint-disable var-name-mixedcase\n\ninterface IRequiemStableSwap {\n\n  // pool data view functions\n  function getLpToken() external view returns (IERC20 lpToken);\n\n  function getA() external view returns (uint256);\n\n  function getAPrecise() external view returns (uint256);\n\n  function getToken(uint8 index) external view returns (IERC20);\n\n  function getTokens() external view returns (IERC20[] memory);\n\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n  function getTokenBalance(uint8 index) external view returns (uint256);\n\n  function getTokenBalances() external view returns (uint256[] memory);\n\n  function getNumberOfTokens() external view returns (uint256);\n\n  function getVirtualPrice() external view returns (uint256);\n\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n    external\n    view\n    returns (uint256);\n\n  function calculateSwap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function calculateRemoveLiquidity(address account, uint256 amount)\n    external\n    view\n    returns (uint256[] memory);\n\n  function calculateRemoveLiquidityOneToken(\n    address account,\n    uint256 tokenAmount,\n    uint8 tokenIndex\n  ) external view returns (uint256 availableTokenAmount);\n\n  function getAdminBalances()\n    external\n    view\n    returns (uint256[] memory adminBalances);\n\n  function getAdminBalance(uint8 index) external view returns (uint256);\n\n  function calculateCurrentWithdrawFee(address account)\n    external\n    view\n    returns (uint256);\n\n  // state modifying functions\n  function swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy,\n    address to,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function addLiquidity(\n    uint256[] calldata amounts,\n    uint256 minToMint,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function removeLiquidity(\n    uint256 amount,\n    uint256[] calldata minAmounts,\n    uint256 deadline\n  ) external returns (uint256[] memory);\n\n  function removeLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 minAmount,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function removeLiquidityImbalance(\n    uint256[] calldata amounts,\n    uint256 maxBurnAmount,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function updateUserWithdrawFee(address recipient, uint256 transferAmount)\n    external;\n}\n"
    },
    "contracts/interfaces/IBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./ERC20/IERC20.sol\";\n\ninterface IBondDepository {\n\n  // Info about each type of market\n  struct Market {\n    uint256 capacity; // capacity remaining\n    IERC20 quoteToken; // token to accept as payment\n    bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\n    uint64 totalDebt; // total debt from market\n    uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\n    uint64 sold; // base tokens out\n    uint256 purchased; // quote tokens in\n  }\n\n  // Info for creating new markets\n  struct Terms {\n    bool fixedTerm; // fixed term or fixed expiration\n    uint64 controlVariable; // scaling variable for price\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\n    uint64 maxDebt; // 9 decimal debt maximum in OHM\n  }\n\n  // Additional info about market.\n  struct Metadata {\n    uint48 lastTune; // last timestamp when control variable was tuned\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\n    uint48 depositInterval; // target frequency of deposits\n    uint48 tuneInterval; // frequency of tuning\n    uint8 quoteDecimals; // decimals of quote token\n  }\n\n  // Control variable adjustment data\n  struct Adjustment {\n    uint64 change;\n    uint48 lastAdjustment;\n    uint48 timeToAdjusted;\n    bool active;\n  }\n\n\n  /**\n   * @notice deposit market\n   * @param _bid uint256\n   * @param _amount uint256\n   * @param _maxPrice uint256\n   * @param _user address\n   * @param _referral address\n   * @return payout_ uint256\n   * @return expiry_ uint256\n   * @return index_ uint256\n   */\n  function deposit(\n    uint256 _bid,\n    uint256 _amount,\n    uint256 _maxPrice,\n    address _user,\n    address _referral\n  ) external returns (\n    uint256 payout_, \n    uint256 expiry_,\n    uint256 index_\n  );\n\n  function create (\n    IERC20 _quoteToken, // token used to deposit\n    uint256[3] memory _market, // [capacity, initial price]\n    bool[2] memory _booleans, // [capacity in quote, fixed term]\n    uint256[2] memory _terms, // [vesting, conclusion]\n    uint32[2] memory _intervals // [deposit interval, tune interval]\n  ) external returns (uint256 id_);\n  function close(uint256 _id) external;\n\n  function isLive(uint256 _bid) external view returns (bool);\n  function liveMarkets() external view returns (uint256[] memory);\n  function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\n  function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\n  function marketPrice(uint256 _bid) external view returns (uint256);\n  function currentDebt(uint256 _bid) external view returns (uint256);\n  function debtRatio(uint256 _bid) external view returns (uint256);\n  function debtDecay(uint256 _bid) external view returns (uint64);\n}"
    },
    "contracts/StakingDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./libraries/math/SafeMath.sol\";\nimport \"./libraries/Policy.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\ncontract Distributor is Policy {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n    \n    \n    \n    /* ====== VARIABLES ====== */\n\n    address public immutable OHM;\n    address public immutable treasury;\n    \n    uint public immutable epochLength;\n    uint public nextEpochBlock;\n    \n    mapping( uint => Adjust ) public adjustments;\n    \n    \n    /* ====== STRUCTS ====== */\n        \n    struct Info {\n        uint rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n    Info[] public info;\n    \n    struct Adjust {\n        bool add;\n        uint rate;\n        uint target;\n    }\n    \n    \n    \n    /* ====== CONSTRUCTOR ====== */\n\n    constructor( address _treasury, address _ohm, uint _epochLength, uint _nextEpochBlock ) {        \n        require( _treasury != address(0) );\n        treasury = _treasury;\n        require( _ohm != address(0) );\n        OHM = _ohm;\n        epochLength = _epochLength;\n        nextEpochBlock = _nextEpochBlock;\n    }\n    \n    \n    \n    /* ====== PUBLIC FUNCTIONS ====== */\n    \n    /**\n        @notice send epoch reward to staking contract\n     */\n    function distribute() external returns ( bool ) {\n        if ( nextEpochBlock <= block.number ) {\n            nextEpochBlock = nextEpochBlock.add( epochLength ); // set next epoch block\n            \n            // distribute rewards to each recipient\n            for ( uint i = 0; i < info.length; i++ ) {\n                if ( info[ i ].rate > 0 ) {\n                    ITreasury( treasury ).mintRewards( // mint and send from treasury\n                        info[ i ].recipient, \n                        nextRewardAt( info[ i ].rate ) \n                    );\n                    adjust( i ); // check for adjustment\n                }\n            }\n            return true;\n        } else { \n            return false; \n        }\n    }\n    \n    \n    \n    /* ====== INTERNAL FUNCTIONS ====== */\n\n    /**\n        @notice increment reward rate for collector\n     */\n    function adjust( uint _index ) internal {\n        Adjust memory adjustment = adjustments[ _index ];\n        if ( adjustment.rate != 0 ) {\n            if ( adjustment.add ) { // if rate should increase\n                info[ _index ].rate = info[ _index ].rate.add( adjustment.rate ); // raise rate\n                if ( info[ _index ].rate >= adjustment.target ) { // if target met\n                    adjustments[ _index ].rate = 0; // turn off adjustment\n                }\n            } else { // if rate should decrease\n                info[ _index ].rate = info[ _index ].rate.sub( adjustment.rate ); // lower rate\n                if ( info[ _index ].rate <= adjustment.target ) { // if target met\n                    adjustments[ _index ].rate = 0; // turn off adjustment\n                }\n            }\n        }\n    }\n    \n    \n    \n    /* ====== VIEW FUNCTIONS ====== */\n\n    /**\n        @notice view function for next reward at given rate\n        @param _rate uint\n        @return uint\n     */\n    function nextRewardAt( uint _rate ) public view returns ( uint ) {\n        return IERC20( OHM ).totalSupply().mul( _rate ).div( 1000000 );\n    }\n\n    /**\n        @notice view function for next reward for specified address\n        @param _recipient address\n        @return uint\n     */\n    function nextRewardFor( address _recipient ) public view returns ( uint ) {\n        uint reward;\n        for ( uint i = 0; i < info.length; i++ ) {\n            if ( info[ i ].recipient == _recipient ) {\n                reward = nextRewardAt( info[ i ].rate );\n            }\n        }\n        return reward;\n    }\n    \n    \n    \n    /* ====== POLICY FUNCTIONS ====== */\n\n    /**\n        @notice adds recipient for distributions\n        @param _recipient address\n        @param _rewardRate uint\n     */\n    function addRecipient( address _recipient, uint _rewardRate ) external onlyPolicy() {\n        require( _recipient != address(0) );\n        info.push( Info({\n            recipient: _recipient,\n            rate: _rewardRate\n        }));\n    }\n\n    /**\n        @notice removes recipient for distributions\n        @param _index uint\n        @param _recipient address\n     */\n    function removeRecipient( uint _index, address _recipient ) external onlyPolicy() {\n        require( _recipient == info[ _index ].recipient );\n        info[ _index ].recipient = address(0);\n        info[ _index ].rate = 0;\n    }\n\n    /**\n        @notice set adjustment info for a collector's reward rate\n        @param _index uint\n        @param _add bool\n        @param _rate uint\n        @param _target uint\n     */\n    function setAdjustment( uint _index, bool _add, uint _rate, uint _target ) external onlyPolicy() {\n        adjustments[ _index ] = Adjust({\n            add: _add,\n            rate: _rate,\n            target: _target\n        });\n    }\n}"
    },
    "contracts/libraries/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  function mod(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\n    if (a > 3) {\n      c = a;\n      uint256 b = add(div(a, 2), 1);\n      while (b < c) {\n        c = b;\n        b = div(add(div(a, b), b), 2);\n      }\n    } else if (a != 0) {\n      c = 1;\n    }\n  }\n}\n"
    },
    "contracts/libraries/Policy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/IPolicy.sol\";\n\ncontract Policy is IPolicy {\n  address internal _policy;\n  address internal _newPolicy;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  constructor() {\n    _policy = msg.sender;\n    emit OwnershipTransferred(address(0), _policy);\n  }\n\n  function policy() public view override returns (address) {\n    return _policy;\n  }\n\n  modifier onlyPolicy() {\n    require(_policy == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function renouncePolicy() public virtual override onlyPolicy {\n    emit OwnershipTransferred(_policy, address(0));\n    _policy = address(0);\n  }\n\n  function pushPolicy(address newPolicy_) public virtual override onlyPolicy {\n    require(newPolicy_ != address(0), \"Ownable: new owner is the zero address\");\n    _newPolicy = newPolicy_;\n  }\n\n  function pullPolicy() public virtual override {\n    require(msg.sender == _newPolicy);\n    emit OwnershipTransferred(_policy, _newPolicy);\n    _policy = _newPolicy;\n  }\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ITreasury {\n  function deposit(\n    uint256 _amount,\n    address _token,\n    uint256 _profit\n  ) external returns (uint256 send_);\n\n  function valueOf(address _token, uint256 _amount)\n    external\n    view\n    returns (uint256 value_);\n\n  function mintRewards(address _recipient, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IPolicy {\n\n    function policy() external view returns (address);\n\n    function renouncePolicy() external;\n  \n    function pushPolicy( address newPolicy_ ) external;\n\n    function pullPolicy() external;\n}\n"
    },
    "contracts/libraries/VaultOwned.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./Ownable.sol\";\n\ncontract VaultOwned is Ownable {\n    \n  address internal _vault;\n\n  function setVault( address vault_ ) external onlyOwner() returns ( bool ) {\n    _vault = vault_;\n\n    return true;\n  }\n\n  function vault() public view returns (address) {\n    return _vault;\n  }\n\n  modifier onlyVault() {\n    require( _vault == msg.sender, \"VaultOwned: caller is not the Vault\" );\n    _;\n  }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
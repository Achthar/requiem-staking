{
  "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_REQT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondCalculator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        }
      ],
      "name": "initializeBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidityBond",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverLostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_addition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buffer",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RequiemQBondDepository.PARAMETER",
          "name": "_parameter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_input",
          "type": "uint256"
        }
      ],
      "name": "setBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_helper",
          "type": "bool"
        }
      ],
      "name": "setStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useHelper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewBondData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bondPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bondPriceInUsd_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentDebt_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0a50d38591848e331d0135cc1536e5813c499df051209ce4db20a85d45e61c0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "transactionIndex": 0,
    "gasUsed": "2535356",
    "logsBloom": "0x
    "blockHash": "0xc8198618db49e76b5171774e251bcb21b6c1266b06b968f95b62158ef8a1face",
    "transactionHash": "0xe0a50d38591848e331d0135cc1536e5813c499df051209ce4db20a85d45e61c0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26,
        "transactionHash": "0xe0a50d38591848e331d0135cc1536e5813c499df051209ce4db20a85d45e61c0",
        "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc8198618db49e76b5171774e251bcb21b6c1266b06b968f95b62158ef8a1face"
      }
    ],
    "blockNumber": 26,
    "cumulativeGasUsed": "2535356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0x7A9d6D59A86dA96a912030bf3F0E373B3f71a50c",
    "0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c"
  ],
  "solcInputHash": "0f20472ed843c15e57cd0f08d39ae87b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REQT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RequiemQBondDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBondData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondPriceInUsd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentDebt_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice()\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD()\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt()\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay()\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio()\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_controlVariable\":\"uint\",\"_fee\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint\"}},\"maxPayout()\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"recoverLostToken(address)\":{\"returns\":{\"_0\":\"bool\"}},\"redeem(address,bool)\":{\"params\":{\"_recipient\":\"address\",\"_stake\":\"bool\"},\"returns\":{\"_0\":\"uint\"}},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"params\":{\"_addition\":\"bool\",\"_buffer\":\"uint\",\"_increment\":\"uint\",\"_target\":\"uint\"}},\"setBondTerms(uint8,uint256)\":{\"params\":{\"_input\":\"uint\",\"_parameter\":\"PARAMETER\"}},\"setStaking(address,bool)\":{\"params\":{\"_helper\":\"bool\",\"_staking\":\"address\"}},\"standardizedDebtRatio()\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice()\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD()\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt()\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay()\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio()\":{\"notice\":\"calculate current ratio of debt to REQT supply\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"deposit bond\"},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"initializes bond parameters\"},\"maxPayout()\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address)\":{\"notice\":\"calculate amount of REQT available for claim by depositor\"},\"percentVestedFor(address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"recoverLostToken(address)\":{\"notice\":\"allow anyone to send lost tokens (excluding principle or REQT) to the DAO\"},\"redeem(address,bool)\":{\"notice\":\"redeem bond for user\"},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"notice\":\"set control variable adjustment\"},\"setBondTerms(uint8,uint256)\":{\"notice\":\"set parameters for new bonds\"},\"setStaking(address,bool)\":{\"notice\":\"set contract for auto stake\"},\"standardizedDebtRatio()\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemQBondDepository.sol\":\"RequiemQBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RequiemQBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./libraries/Manageable.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IStakingHelper.sol\\\";\\nimport \\\"./interfaces/IBondCalculator.sol\\\";\\n\\ncontract RequiemQBondDepository is Manageable {\\n  using FixedPoint for *;\\n  using SafeERC20 for IERC20;\\n\\n  /* ======== EVENTS ======== */\\n\\n  event BondCreated(\\n    uint256 deposit,\\n    uint256 indexed payout,\\n    uint256 indexed expires,\\n    uint256 indexed priceInUSD\\n  );\\n  event BondRedeemed(\\n    address indexed recipient,\\n    uint256 payout,\\n    uint256 remaining\\n  );\\n  event BondPriceChanged(\\n    uint256 indexed priceInUSD,\\n    uint256 indexed internalPrice,\\n    uint256 indexed debtRatio\\n  );\\n  event ControlVariableAdjustment(\\n    uint256 initialBCV,\\n    uint256 newBCV,\\n    uint256 adjustment,\\n    bool addition\\n  );\\n\\n  /* ======== STATE VARIABLES ======== */\\n\\n  address public immutable REQT; // token given as payment for bond\\n  address public immutable principle; // token used to create bond\\n  address public immutable treasury; // mints REQT when receives principle\\n  address public immutable DAO; // receives profit share from bond\\n\\n  bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\\n  address public immutable bondCalculator; // calculates value of LP tokens\\n\\n  address public staking; // to auto-stake payout\\n  address public stakingHelper; // to stake and claim if no staking warmup\\n  bool public useHelper;\\n\\n  Terms public terms; // stores terms for new bonds\\n  Adjust public adjustment; // stores adjustment to BCV data\\n\\n  mapping(address => Bond) public bondInfo; // stores bond information for depositors\\n\\n  uint256 public totalDebt; // total value of outstanding bonds; used for pricing\\n  uint256 public lastDecay; // reference block for debt decay\\n\\n  /* ======== STRUCTS ======== */\\n\\n  // Info for creating new bonds\\n  struct Terms {\\n    uint256 controlVariable; // scaling variable for price\\n    uint256 vestingTerm; // in blocks\\n    uint256 minimumPrice; // vs principle value\\n    uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n    uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n    uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n  }\\n\\n  // Info for bond holder\\n  struct Bond {\\n    uint256 payout; // REQT remaining to be paid\\n    uint256 vesting; // Blocks left to vest\\n    uint256 lastBlock; // Last interaction\\n    uint256 pricePaid; // In DAI, for front end viewing\\n  }\\n\\n  // Info for incremental adjustments to control variable\\n  struct Adjust {\\n    bool add; // addition or subtraction\\n    uint256 rate; // increment\\n    uint256 target; // BCV when adjustment finished\\n    uint256 buffer; // minimum length (in blocks) between adjustments\\n    uint256 lastBlock; // block when last adjustment made\\n  }\\n\\n  /* ======== INITIALIZATION ======== */\\n\\n  constructor(\\n    address _REQT,\\n    address _principle,\\n    address _treasury,\\n    address _DAO,\\n    address _bondCalculator\\n  ) {\\n    require(_REQT != address(0));\\n    REQT = _REQT;\\n    require(_principle != address(0));\\n    principle = _principle;\\n    require(_treasury != address(0));\\n    treasury = _treasury;\\n    require(_DAO != address(0));\\n    DAO = _DAO;\\n    // bondCalculator should be address(0) if not LP bond\\n    bondCalculator = _bondCalculator;\\n    isLiquidityBond = (_bondCalculator != address(0));\\n  }\\n\\n  /**\\n   *  @notice initializes bond parameters\\n   *  @param _controlVariable uint\\n   *  @param _vestingTerm uint\\n   *  @param _minimumPrice uint\\n   *  @param _maxPayout uint\\n   *  @param _fee uint\\n   *  @param _maxDebt uint\\n   *  @param _initialDebt uint\\n   */\\n  function initializeBondTerms(\\n    uint256 _controlVariable,\\n    uint256 _vestingTerm,\\n    uint256 _minimumPrice,\\n    uint256 _maxPayout,\\n    uint256 _fee,\\n    uint256 _maxDebt,\\n    uint256 _initialDebt\\n  ) external onlyPolicy {\\n    require(terms.controlVariable == 0, \\\"Bonds must be initialized from 0\\\");\\n    terms = Terms({\\n      controlVariable: _controlVariable,\\n      vestingTerm: _vestingTerm,\\n      minimumPrice: _minimumPrice,\\n      maxPayout: _maxPayout,\\n      fee: _fee,\\n      maxDebt: _maxDebt\\n    });\\n    totalDebt = _initialDebt;\\n    lastDecay = block.number;\\n  }\\n\\n  /* ======== POLICY FUNCTIONS ======== */\\n\\n  enum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT\\n  }\\n\\n  /**\\n   *  @notice set parameters for new bonds\\n   *  @param _parameter PARAMETER\\n   *  @param _input uint\\n   */\\n  function setBondTerms(PARAMETER _parameter, uint256 _input)\\n    external\\n    onlyPolicy\\n  {\\n    if (_parameter == PARAMETER.VESTING) {\\n      // 0\\n      require(_input >= 10000, \\\"Vesting must be longer than 36 hours\\\");\\n      terms.vestingTerm = _input;\\n    } else if (_parameter == PARAMETER.PAYOUT) {\\n      // 1\\n      require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n      terms.maxPayout = _input;\\n    } else if (_parameter == PARAMETER.FEE) {\\n      // 2\\n      require(_input <= 10000, \\\"DAO fee cannot exceed payout\\\");\\n      terms.fee = _input;\\n    } else if (_parameter == PARAMETER.DEBT) {\\n      // 3\\n      terms.maxDebt = _input;\\n    }\\n  }\\n\\n  /**\\n   *  @notice set control variable adjustment\\n   *  @param _addition bool\\n   *  @param _increment uint\\n   *  @param _target uint\\n   *  @param _buffer uint\\n   */\\n  function setAdjustment(\\n    bool _addition,\\n    uint256 _increment,\\n    uint256 _target,\\n    uint256 _buffer\\n  ) external onlyPolicy {\\n    require(\\n      _increment <= (terms.controlVariable * 25) / 1000,\\n      \\\"Increment too large\\\"\\n    );\\n\\n    adjustment = Adjust({\\n      add: _addition,\\n      rate: _increment,\\n      target: _target,\\n      buffer: _buffer,\\n      lastBlock: block.number\\n    });\\n  }\\n\\n  /**\\n   *  @notice set contract for auto stake\\n   *  @param _staking address\\n   *  @param _helper bool\\n   */\\n  function setStaking(address _staking, bool _helper) external onlyPolicy {\\n    require(_staking != address(0));\\n    if (_helper) {\\n      useHelper = true;\\n      stakingHelper = _staking;\\n    } else {\\n      useHelper = false;\\n      staking = _staking;\\n    }\\n  }\\n\\n  /* ======== USER FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice deposit bond\\n   *  @param _amount uint\\n   *  @param _maxPrice uint\\n   *  @param _depositor address\\n   *  @return uint\\n   */\\n  function deposit(\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _depositor\\n  ) external returns (uint256) {\\n    require(_depositor != address(0), \\\"Invalid address\\\");\\n\\n    decayDebt();\\n    require(totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\");\\n\\n    uint256 priceInUSD = bondPriceInUSD(); // Stored in bond info\\n    uint256 nativePrice = _bondPrice();\\n\\n    require(_maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\"); // slippage protection\\n\\n    uint256 value = ITreasury(treasury).valueOf(principle, _amount);\\n\\n    uint256 payout = payoutFor(value); // payout to bonder is computed\\n\\n    require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 REQT ( underflow protection )\\n    require(payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n    // profits are calculated\\n    uint256 fee = (payout * terms.fee) / 10000;\\n    require(value > payout + fee, \\\"VALUE is less than payout plus fee\\\");\\n    uint256 profit = value - payout - fee;\\n\\n    /**\\n            principle is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) REQT\\n         */\\n    IERC20(principle).safeTransferFrom(msg.sender, address(this), _amount);\\n    IERC20(principle).approve(address(treasury), _amount);\\n    ITreasury(treasury).deposit(_amount, principle, profit);\\n\\n    if (fee != 0) {\\n      // fee is transferred to dao\\n      IERC20(REQT).safeTransfer(DAO, fee);\\n    }\\n\\n    // total debt is increased\\n    totalDebt = totalDebt + value;\\n\\n    // depositor info is stored\\n    bondInfo[_depositor] = Bond({\\n      payout: bondInfo[_depositor].payout + payout,\\n      vesting: terms.vestingTerm,\\n      lastBlock: block.number,\\n      pricePaid: priceInUSD\\n    });\\n\\n    // indexed events are emitted\\n    emit BondCreated(\\n      _amount,\\n      payout,\\n      block.number + terms.vestingTerm,\\n      priceInUSD\\n    );\\n    emit BondPriceChanged(bondPriceInUSD(), _bondPrice(), debtRatio());\\n\\n    adjust(); // control variable is adjusted\\n    return payout;\\n  }\\n\\n  /**\\n   *  @notice redeem bond for user\\n   *  @param _recipient address\\n   *  @param _stake bool\\n   *  @return uint\\n   */\\n  function redeem(address _recipient, bool _stake) external returns (uint256) {\\n    Bond memory info = bondInfo[_recipient];\\n    uint256 percentVested = percentVestedFor(_recipient); // (blocks since last interaction / vesting term remaining)\\n\\n    if (percentVested >= 10000) {\\n      // if fully vested\\n      delete bondInfo[_recipient]; // delete user info\\n      emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n      return stakeOrSend(_recipient, _stake, info.payout); // pay user everything due\\n    } else {\\n      // if unfinished\\n      // calculate payout vested\\n      uint256 payout = (info.payout * percentVested) / 10000;\\n\\n      // store updated deposit info\\n      bondInfo[_recipient] = Bond({\\n        payout: info.payout - payout,\\n        vesting: info.vesting - (block.number - info.lastBlock),\\n        lastBlock: block.number,\\n        pricePaid: info.pricePaid\\n      });\\n\\n      emit BondRedeemed(_recipient, payout, bondInfo[_recipient].payout);\\n      return stakeOrSend(_recipient, _stake, payout);\\n    }\\n  }\\n\\n  /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice allow user to stake payout automatically\\n   *  @param _stake bool\\n   *  @param _amount uint\\n   *  @return uint\\n   */\\n  function stakeOrSend(\\n    address _recipient,\\n    bool _stake,\\n    uint256 _amount\\n  ) internal returns (uint256) {\\n    if (!_stake) {\\n      // if user does not want to stake\\n      IERC20(REQT).transfer(_recipient, _amount); // send payout\\n    } else {\\n      // if user wants to stake\\n      if (useHelper) {\\n        // use if staking warmup is 0\\n        IERC20(REQT).approve(stakingHelper, _amount);\\n        IStakingHelper(stakingHelper).stake(_amount, _recipient);\\n      } else {\\n        IERC20(REQT).approve(staking, _amount);\\n        IStaking(staking).stake(_amount, _recipient);\\n      }\\n    }\\n    return _amount;\\n  }\\n\\n  /**\\n   *  @notice makes incremental adjustment to control variable\\n   */\\n  function adjust() internal {\\n    uint256 blockCanAdjust = adjustment.lastBlock + adjustment.buffer;\\n    if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\\n      uint256 initial = terms.controlVariable;\\n      if (adjustment.add) {\\n        terms.controlVariable = terms.controlVariable + adjustment.rate;\\n        if (terms.controlVariable >= adjustment.target) {\\n          adjustment.rate = 0;\\n        }\\n      } else {\\n        terms.controlVariable = terms.controlVariable - adjustment.rate;\\n        if (terms.controlVariable <= adjustment.target) {\\n          adjustment.rate = 0;\\n        }\\n      }\\n      adjustment.lastBlock = block.number;\\n      emit ControlVariableAdjustment(\\n        initial,\\n        terms.controlVariable,\\n        adjustment.rate,\\n        adjustment.add\\n      );\\n    }\\n  }\\n\\n  /**\\n   *  @notice reduce total debt\\n   */\\n  function decayDebt() internal {\\n    totalDebt -= debtDecay();\\n    lastDecay = block.number;\\n  }\\n\\n  /* ======== VIEW FUNCTIONS ======== */\\n\\n  /**\\n   *  @notice determine maximum bond size\\n   *  @return uint\\n   */\\n  function maxPayout() public view returns (uint256) {\\n    return (IERC20(REQT).totalSupply() * terms.maxPayout) / 100000;\\n  }\\n\\n  /**\\n   *  @notice calculate interest due for new bond\\n   *  @param _value uint\\n   *  @return uint\\n   */\\n  function payoutFor(uint256 _value) public view returns (uint256) {\\n    return FixedPoint.fraction(_value, bondPrice()).decode112with18() / 1e16;\\n  }\\n\\n  /**\\n   *  @notice calculate current bond premium\\n   *  @return price_ uint\\n   */\\n  function bondPrice() public view returns (uint256 price_) {\\n    price_ = (terms.controlVariable * debtRatio() + 1000000000) / 1e7;\\n    if (price_ < terms.minimumPrice) {\\n      price_ = terms.minimumPrice;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate current bond price and remove floor if above\\n   *  @return price_ uint\\n   */\\n  function _bondPrice() internal returns (uint256 price_) {\\n    price_ = (terms.controlVariable * debtRatio() + 1000000000) / 1e7;\\n    if (price_ < terms.minimumPrice) {\\n      price_ = terms.minimumPrice;\\n    } else if (terms.minimumPrice != 0) {\\n      terms.minimumPrice = 0;\\n    }\\n  }\\n\\n  /**\\n   *  @notice converts bond price to DAI value\\n   *  @return price_ uint\\n   */\\n  function bondPriceInUSD() public view returns (uint256 price_) {\\n    if (isLiquidityBond) {\\n      price_ =\\n        (bondPrice() * IBondCalculator(bondCalculator).markdown(principle)) /\\n        100;\\n    } else {\\n      price_ = (bondPrice() * 10**IERC20(principle).decimals()) / 100;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate current ratio of debt to REQT supply\\n   *  @return debtRatio_ uint\\n   */\\n  function debtRatio() public view returns (uint256 debtRatio_) {\\n    uint256 supply = IERC20(REQT).totalSupply();\\n    // we have to add the decimals that are eventually missing if reqt has less than\\n    // 18 decimals as the weighted pair lp tokens always have 18 decimals\\n    debtRatio_ =\\n      FixedPoint\\n        .fraction(currentDebt() * (10**(18 - IERC20(REQT).decimals())), supply)\\n        .decode112with18() /\\n      1e18;\\n  }\\n\\n  /**\\n   *  @notice debt ratio in same terms for reserve or liquidity bonds\\n   *  @return uint\\n   */\\n  function standardizedDebtRatio() external view returns (uint256) {\\n    if (isLiquidityBond) {\\n      // adjustment of the case if reqt and LP token decimals deviate\\n      // the latter usually has 18\\n      return\\n        (debtRatio() * IBondCalculator(bondCalculator).markdown(principle)) /\\n        (10**(18 - IERC20(REQT).decimals()));\\n    } else {\\n      return debtRatio();\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate debt factoring in decay\\n   *  @return uint\\n   */\\n  function currentDebt() public view returns (uint256) {\\n    return totalDebt - debtDecay();\\n  }\\n\\n  /**\\n   *  @notice amount to decay total debt by\\n   *  @return decay_ uint\\n   */\\n  function debtDecay() public view returns (uint256 decay_) {\\n    uint256 blocksSinceLast = block.number - lastDecay;\\n    decay_ = (totalDebt * blocksSinceLast) / terms.vestingTerm;\\n    if (decay_ > totalDebt) {\\n      decay_ = totalDebt;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate how far into vesting a depositor is\\n   *  @param _depositor address\\n   *  @return percentVested_ uint\\n   */\\n  function percentVestedFor(address _depositor)\\n    public\\n    view\\n    returns (uint256 percentVested_)\\n  {\\n    Bond memory bond = bondInfo[_depositor];\\n    uint256 blocksSinceLast = block.number - bond.lastBlock;\\n    uint256 vesting = bond.vesting;\\n\\n    if (vesting > 0) {\\n      percentVested_ = (blocksSinceLast * 10000) / vesting;\\n    } else {\\n      percentVested_ = 0;\\n    }\\n  }\\n\\n  /**\\n   *  @notice calculate amount of REQT available for claim by depositor\\n   *  @param _depositor address\\n   *  @return pendingPayout_ uint\\n   */\\n  function pendingPayoutFor(address _depositor)\\n    external\\n    view\\n    returns (uint256 pendingPayout_)\\n  {\\n    uint256 percentVested = percentVestedFor(_depositor);\\n    uint256 payout = bondInfo[_depositor].payout;\\n\\n    if (percentVested >= 10000) {\\n      pendingPayout_ = payout;\\n    } else {\\n      pendingPayout_ = (payout * percentVested) / 10000;\\n    }\\n  }\\n\\n  // a view function that shows the full data at once\\n  function viewBondData()\\n    external\\n    view\\n    returns (\\n      uint256 _bondPrice_,\\n      uint256 _bondPriceInUsd_,\\n      uint256 _currentDebt_\\n    )\\n  {\\n    _currentDebt_ = totalDebt - debtDecay();\\n\\n    _bondPrice_ = (terms.controlVariable * debtRatio() + 1000000000) / 1e7;\\n    if (_bondPrice_ < terms.minimumPrice) {\\n      _bondPrice_ = terms.minimumPrice;\\n    }\\n\\n    if (isLiquidityBond) {\\n      _bondPriceInUsd_ =\\n        (bondPrice() * IBondCalculator(bondCalculator).markdown(principle)) /\\n        100;\\n    } else {\\n      _bondPriceInUsd_ = (bondPrice() * 10**IERC20(principle).decimals()) / 100;\\n    }\\n  }\\n\\n  /* ======= AUXILLIARY ======= */\\n\\n  /**\\n   *  @notice allow anyone to send lost tokens (excluding principle or REQT) to the DAO\\n   *  @return bool\\n   */\\n  function recoverLostToken(address _token) external returns (bool) {\\n    require(_token != REQT);\\n    require(_token != principle);\\n    IERC20(_token).safeTransfer(DAO, IERC20(_token).balanceOf(address(this)));\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x2ed284144e5aa1060ffebd8d688baa24f5a8dd50b36c15673d2a4eb1fb53e5f8\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc8de46b5781a713fd63eb204be9a9a821aab6468f5ca504ec90c1aec6b8a3bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBondCalculator {\\n  function valuation(address _LP, uint256 _amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function markdown(address _LP) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5c77e26ba0e28d703be80f22bd3014c73a97159741360cea638c164fdffc13bb\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n\\ninterface IManageable {\\n  function policy() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\",\"keccak256\":\"0xa295012398e6b24514d628e22bc6aee9a4df737961dd646d728e676123034d12\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n  function stake(uint256 _amount, address _recipient) external returns (bool);\\n\\n  function claim(address _recipient) external;\\n\\n  function unstake(uint256 _amount, address _recipient) external returns (bool);\\n\\n  function index() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3c8d84a2b805703cecbc00e2dd27a561db720946eb8f0caa6a8553eb9eb3de5\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStakingHelper {\\n  function stake(uint256 _amount, address _recipient) external;\\n}\\n\",\"keccak256\":\"0xbdadb87177436b426e016c65e5dd98da74409f3bc963b0ddb18e020989d3d437\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ITreasury {\\n  function deposit(\\n    uint256 _amount,\\n    address _token,\\n    uint256 _profit\\n  ) external returns (uint256 send_);\\n\\n  function valueOf(address _token, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 value_);\\n\\n  function mintRewards(address _recipient, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7eafe12d901ec2bfd90939cdb6d161b0fe615336382b7edf3b930c416d2485d2\",\"license\":\"MIT\"},\"contracts/libraries/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\ncontract Manageable is IManageable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function policy() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyPolicy() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\",\"keccak256\":\"0x5f70377ccfe343b704282ca2b360251536e6640166290e6f99b60bc4634ed5a2\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    RequiemErrors._require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      Errors.SAFE_ERC20_CALL_FAILED\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc2deaa0858d31692b977c478b7139e60fd3084eff4ed832ba55f6c8d890ec489\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= type(uint144).max) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1458dee48a18e010fc603e371c30ead771eaff8b1ead78af037c5a6a6a285e72\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable no-inline-assembly, reason-string, max-line-length\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2603e02c3be8e366637ac7b8e1d84b8b896b191ce5e25cc0fa6e6d395e832ff1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806377b8189511610145578063cea55f57116100bd578063d7ccfb0b1161008c578063e392a26211610071578063e392a262146105ee578063f5c2ab5b146105f6578063fc7b9c18146105ff57600080fd5b8063d7ccfb0b146105de578063e0176de8146105e657600080fd5b8063cea55f5714610551578063d4d863ce14610559578063d50256251461056c578063d7969060146105b757600080fd5b8063904b3ece11610114578063b4abccba116100f9578063b4abccba146104c2578063c5332b7c146104d5578063cd1234b3146104fc57600080fd5b8063904b3ece1461049357806398fabd3a1461049b57600080fd5b806377b81895146104525780637927ebf814610465578063844b5c7c146104785780638dbdbe6d1461048057600080fd5b8063338e4d65116101d8578063507930ec116101a757806361d027b31161018c57806361d027b3146104105780637153500814610437578063759076e51461044a57600080fd5b8063507930ec146103f55780635a96ac0a1461040857600080fd5b8063338e4d6514610365578063451ee4a11461038857806346f68ee9146103cf5780634cf088d9146103e257600080fd5b8063089208d81161022f5780631e321a0f116102145780631e321a0f1461031b5780631feed31f1461032e5780632f3f470a1461034157600080fd5b8063089208d8146102fe5780631a3d00681461030857600080fd5b8063016a42841461026157806301b88ee8146102a557806302bb41e5146102c65780630505c8c9146102ed575b600080fd5b6102887f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102b86102b33660046128b0565b610608565b60405190815260200161029c565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610288565b610306610662565b005b6103066103163660046128d9565b610718565b610306610329366004612914565b610828565b6102b861033c366004612944565b610a21565b60035461035590600160a01b900460ff1681565b604051901515815260200161029c565b61036d610c06565b6040805193845260208401929092529082015260600161029c565b600a54600b54600c54600d54600e546103a59460ff169392919085565b6040805195151586526020860194909452928401919091526060830152608082015260a00161029c565b6103066103dd3660046128b0565b610ded565b600254610288906001600160a01b031681565b6102b86104033660046128b0565b610f2b565b610306610fb7565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61030661044536600461297b565b6110a5565b6102b86111a1565b600354610288906001600160a01b031681565b6102b86104733660046129c7565b6111bd565b6102b86111ea565b6102b861048e3660046129e0565b61136f565b6102b8611a41565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b6103556104d03660046128b0565b611bbb565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61053161050a3660046128b0565b600f6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161029c565b6102b8611cfb565b610306610567366004612944565b611e51565b60045460055460065460075460085460095461058a95949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161029c565b6103557f000000000000000000000000000000000000000000000000000000000000000081565b6102b8611f59565b6102b8611fa0565b6102b861202e565b6102b860115481565b6102b860105481565b60008061061483610f2b565b6001600160a01b0384166000908152600f602052604090205490915061271082106106415780925061065b565b61271061064e8383612a2b565b6106589190612a4a565b92505b5050919050565b6000546001600160a01b031633146106c15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031633146107725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b6004546103e890610784906019612a2b565b61078e9190612a4a565b8311156107dd5760405162461bcd60e51b815260206004820152601360248201527f496e6372656d656e7420746f6f206c617267650000000000000000000000000060448201526064016106b8565b6040805160a0810182529415158086526020860185905290850183905260608501829052436080909501859052600a805460ff19169091179055600b92909255600c55600d55600e55565b6000546001600160a01b031633146108825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b600082600381111561089657610896612a6c565b1415610919576127108110156109135760405162461bcd60e51b8152602060048201526024808201527f56657374696e67206d757374206265206c6f6e676572207468616e203336206860448201527f6f7572730000000000000000000000000000000000000000000000000000000060648201526084016106b8565b60055550565b600182600381111561092d5761092d612a6c565b141561098b576103e88111156109855760405162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e7460448201526064016106b8565b60075550565b600282600381111561099f5761099f612a6c565b14156109fd576127108111156109f75760405162461bcd60e51b815260206004820152601c60248201527f44414f206665652063616e6e6f7420657863656564207061796f75740000000060448201526064016106b8565b60085550565b6003826003811115610a1157610a11612a6c565b1415610a1d5760098190555b5050565b6001600160a01b0382166000908152600f6020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015281610a7385610f2b565b90506127108110610b05576001600160a01b0385166000818152600f60205260408082208281556001810183905560028101839055600301829055845190517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192610ae5928252602082015260400190565b60405180910390a2610afc85858460000151612075565b92505050610c00565b6000612710828460000151610b1a9190612a2b565b610b249190612a4a565b90506040518060800160405280828560000151610b419190612a82565b8152602001846040015143610b569190612a82565b8560200151610b659190612a82565b8152436020808301919091526060868101516040938401526001600160a01b038a166000818152600f8452849020855180825586850151600183015586860151600283015595909201516003909201919091558251858152918201939093527f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1910160405180910390a2610bfa868683612075565b93505050505b92915050565b6000806000610c1361202e565b601054610c209190612a82565b905062989680610c2e611cfb565b600454610c3b9190612a2b565b610c4990633b9aca00612a99565b610c539190612a4a565b600654909350831015610c665760065492505b7f000000000000000000000000000000000000000000000000000000000000000015610d5e576040516332da80a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526064917f0000000000000000000000000000000000000000000000000000000000000000909116906332da80a390602401602060405180830381865afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190612ab1565b610d43611f59565b610d4d9190612a2b565b610d579190612a4a565b9150909192565b60647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612aca565b610d3b90600a612bd1565b6000546001600160a01b03163314610e475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b6001600160a01b038116610ec35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106b8565b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f6020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460608301528290610f7e9043612a82565b60208301519091508015610faa5780610f9983612710612a2b565b610fa39190612a4a565b9350610faf565b600093505b505050919050565b6001546001600160a01b031633146110375760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206d757374206265206e6577206f776e657220746f20707560448201527f6c6c00000000000000000000000000000000000000000000000000000000000060648201526084016106b8565b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a36001546000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b6000546001600160a01b031633146110ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b6004541561114f5760405162461bcd60e51b815260206004820181905260248201527f426f6e6473206d75737420626520696e697469616c697a65642066726f6d203060448201526064016106b8565b6040805160c08101825288815260208101889052908101869052606081018590526080810184905260a00182905260049690965560059490945560069290925560075560085560095560105543601155565b60006111ab61202e565b6010546111b89190612a82565b905090565b6000662386f26fc100006111e06111db846111d6611f59565b612344565b6124a1565b610c009190612a4a565b60007f0000000000000000000000000000000000000000000000000000000000000000156112dd576040516332da80a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526064917f0000000000000000000000000000000000000000000000000000000000000000909116906332da80a390602401602060405180830381865afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612ab1565b6112c9611f59565b6112d39190612a2b565b6111b89190612a4a565b60647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113619190612aca565b6112c190600a612bd1565b90565b60006001600160a01b0382166113c75760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064016106b8565b6113cf6124c1565b60095460105411156114235760405162461bcd60e51b815260206004820152601460248201527f4d6178206361706163697479207265616368656400000000000000000000000060448201526064016106b8565b600061142d6111ea565b905060006114396124e5565b9050808510156114b15760405162461bcd60e51b815260206004820152602360248201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260448201527f696365000000000000000000000000000000000000000000000000000000000060648201526084016106b8565b6040517f1eec5a9a0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890526000917f000000000000000000000000000000000000000000000000000000000000000090911690631eec5a9a90604401602060405180830381865afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190612ab1565b9050600061158d826111bd565b9050629896808110156115e25760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c00000000000000000000000000000000000060448201526064016106b8565b6115ea611fa0565b8111156116395760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c6172676500000000000000000000000000000000000060448201526064016106b8565b6008546000906127109061164d9084612a2b565b6116579190612a4a565b90506116638183612a99565b83116116d75760405162461bcd60e51b815260206004820152602260248201527f56414c5545206973206c657373207468616e207061796f757420706c7573206660448201527f656500000000000000000000000000000000000000000000000000000000000060648201526084016106b8565b6000816116e48486612a82565b6116ee9190612a82565b90506117256001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308d61253c565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018c90527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d89190612be0565b506040517fbc157ac1000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063bc157ac1906064016020604051808303816000875af1158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190612ab1565b508115611907576119076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846125de565b836010546119159190612a99565b601055604080516080810182526001600160a01b038a166000908152600f60205291909120548190611948908690612a99565b81526005805460208084019190915243604080850182905260609485018c90526001600160a01b038e166000908152600f845281902086518155928601516001840155850151600283015593909201516003909201919091555487916119ae9190612a99565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58d6040516119e091815260200190565b60405180910390a46119f0611cfb565b6119f86124e5565b611a006111ea565b6040517f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a90600090a4611a31612613565b50909450505050505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000015611bb3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb9190612aca565b611af6906012612bfd565b611b0190600a612bd1565b6040516332da80a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000016906332da80a390602401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190612ab1565b6112c9611cfb565b6111b8611cfb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415611bfc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415611c3b57600080fd5b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611cf3907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190612ab1565b6001600160a01b03851691906125de565b506001919050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d809190612ab1565b9050670de0b6b3a7640000611e416111db7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e139190612aca565b611e1e906012612bfd565b611e2990600a612bd1565b611e316111a1565b611e3b9190612a2b565b84612344565b611e4b9190612a4a565b91505090565b6000546001600160a01b03163314611eab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b6001600160a01b038216611ebe57600080fd5b8015611f0357600380546001600160a01b0384167fffffffffffffffffffffff00000000000000000000000000000000000000000090911617600160a01b1790555050565b600380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600280546001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff199091161790555050565b600062989680611f67611cfb565b600454611f749190612a2b565b611f8290633b9aca00612a99565b611f8c9190612a4a565b60065490915081101561136c575060065490565b6000620186a06004600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561200a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c99190612ab1565b6000806011544361203f9190612a82565b9050600460010154816010546120559190612a2b565b61205f9190612a4a565b91506010548211156120715760105491505b5090565b6000826121155760405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190612be0565b5061233d565b600354600160a01b900460ff161561222b5760035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561219b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bf9190612be0565b50600354604051637acb775760e01b8152600481018490526001600160a01b03868116602483015290911690637acb775790604401600060405180830381600087803b15801561220e57600080fd5b505af1158015612222573d6000803e3d6000fd5b5050505061233d565b60025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c39190612be0565b50600254604051637acb775760e01b8152600481018490526001600160a01b03868116602483015290911690637acb7757906044016020604051808303816000875af1158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b9190612be0565b505b5092915050565b604080516020810190915260008152600082116123c95760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084016106b8565b826123e35750604080516020810190915260008152610c00565b71ffffffffffffffffffffffffffffffffffff831161248557600061240c83607086901b612a4a565b90506001600160e01b038111156124655760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000060448201526064016106b8565b6040518060200160405280826001600160e01b0316815250915050610c00565b600061240c846e010000000000000000000000000000856126f5565b8051600090610c00906612725dd1d243ab906001600160e01b0316612a4a565b6124c961202e565b601060008282546124da9190612a82565b909155505043601155565b6000629896806124f3611cfb565b6004546125009190612a2b565b61250e90633b9aca00612a99565b6125189190612a4a565b60065490915081101561252c575060065490565b6006541561136c57600060065590565b6040516001600160a01b03808516602483015283166044820152606481018290526125d89085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526127a4565b50505050565b6040516001600160a01b03831660248201526044810182905261260e90849063a9059cbb60e01b90606401612589565b505050565b600d54600e5460009161262591612a99565b600b54909150158015906126395750804310155b156126f257600454600a5460ff161561267457600b5460045461265c9190612a99565b6004819055600c541161266f576000600b555b612697565b600b546004546126849190612a82565b6004819055600c5410612697576000600b555b43600e55600454600b54600a5460408051858152602081019490945283019190915260ff16151560608201527fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9060800160405180910390a1505b50565b60008080600019858709858702925082811083820303915050806000141561272f576000841161272457600080fd5b508290049050611a3a565b80841161273b57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080836001600160a01b0316836040516127bf9190612c20565b6000604051808303816000865af19150503d80600081146127fc576040519150601f19603f3d011682016040523d82523d6000602084013e612801565b606091505b50915091506000821415612819573d6000803e3d6000fd5b6125d881516000148061283b57508180602001905181019061283b9190612be0565b6101a281610a1d5762461bcd60e51b600090815260206004526007602452600a808304818104828106603090810160101b848706949093060160081b929092010166524551230000300160c81b604452610a1d91606490fd5b80356001600160a01b03811681146128ab57600080fd5b919050565b6000602082840312156128c257600080fd5b611a3a82612894565b80151581146126f257600080fd5b600080600080608085870312156128ef57600080fd5b84356128fa816128cb565b966020860135965060408601359560600135945092505050565b6000806040838503121561292757600080fd5b82356004811061293657600080fd5b946020939093013593505050565b6000806040838503121561295757600080fd5b61296083612894565b91506020830135612970816128cb565b809150509250929050565b600080600080600080600060e0888a03121561299657600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b6000602082840312156129d957600080fd5b5035919050565b6000806000606084860312156129f557600080fd5b8335925060208401359150612a0c60408501612894565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612a4557612a45612a15565b500290565b600082612a6757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600082821015612a9457612a94612a15565b500390565b60008219821115612aac57612aac612a15565b500190565b600060208284031215612ac357600080fd5b5051919050565b600060208284031215612adc57600080fd5b815160ff81168114611a3a57600080fd5b600181815b80851115612b28578160001904821115612b0e57612b0e612a15565b80851615612b1b57918102915b93841c9390800290612af2565b509250929050565b600082612b3f57506001610c00565b81612b4c57506000610c00565b8160018114612b625760028114612b6c57612b88565b6001915050610c00565b60ff841115612b7d57612b7d612a15565b50506001821b610c00565b5060208310610133831016604e8410600b8410161715612bab575081810a610c00565b612bb58383612aed565b8060001904821115612bc957612bc9612a15565b029392505050565b6000611a3a60ff841683612b30565b600060208284031215612bf257600080fd5b8151611a3a816128cb565b600060ff821660ff841680821015612c1757612c17612a15565b90039392505050565b6000825160005b81811015612c415760208186018101518583015201612c27565b81811115612c50576000828501525b50919091019291505056fea264697066735822122073c358e53de8a9fe0887fc914e470650b68956bf196d507400a218ce7f0a3d9364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice()": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD()": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt()": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay()": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio()": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_controlVariable": "uint",
          "_fee": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint"
        }
      },
      "maxPayout()": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "recoverLostToken(address)": {
        "returns": {
          "_0": "bool"
        }
      },
      "redeem(address,bool)": {
        "params": {
          "_recipient": "address",
          "_stake": "bool"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "params": {
          "_addition": "bool",
          "_buffer": "uint",
          "_increment": "uint",
          "_target": "uint"
        }
      },
      "setBondTerms(uint8,uint256)": {
        "params": {
          "_input": "uint",
          "_parameter": "PARAMETER"
        }
      },
      "setStaking(address,bool)": {
        "params": {
          "_helper": "bool",
          "_staking": "address"
        }
      },
      "standardizedDebtRatio()": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice()": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD()": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt()": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay()": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio()": {
        "notice": "calculate current ratio of debt to REQT supply"
      },
      "deposit(uint256,uint256,address)": {
        "notice": "deposit bond"
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "initializes bond parameters"
      },
      "maxPayout()": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address)": {
        "notice": "calculate amount of REQT available for claim by depositor"
      },
      "percentVestedFor(address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "recoverLostToken(address)": {
        "notice": "allow anyone to send lost tokens (excluding principle or REQT) to the DAO"
      },
      "redeem(address,bool)": {
        "notice": "redeem bond for user"
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "notice": "set control variable adjustment"
      },
      "setBondTerms(uint8,uint256)": {
        "notice": "set parameters for new bonds"
      },
      "setStaking(address,bool)": {
        "notice": "set contract for auto stake"
      },
      "standardizedDebtRatio()": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11721,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11723,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4900,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4902,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "stakingHelper",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4904,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "useHelper",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4907,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Terms)4932_storage"
      },
      {
        "astId": 4910,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "adjustment",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Adjust)4952_storage"
      },
      {
        "astId": 4915,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "bondInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Bond)4941_storage)"
      },
      {
        "astId": 4917,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "totalDebt",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4919,
        "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
        "label": "lastDecay",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bond)4941_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RequiemQBondDepository.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)4941_storage"
      },
      "t_struct(Adjust)4952_storage": {
        "encoding": "inplace",
        "label": "struct RequiemQBondDepository.Adjust",
        "members": [
          {
            "astId": 4943,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4945,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4947,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4949,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "buffer",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4951,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "lastBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Bond)4941_storage": {
        "encoding": "inplace",
        "label": "struct RequiemQBondDepository.Bond",
        "members": [
          {
            "astId": 4934,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4936,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4938,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "lastBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4940,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "pricePaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Terms)4932_storage": {
        "encoding": "inplace",
        "label": "struct RequiemQBondDepository.Terms",
        "members": [
          {
            "astId": 4921,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4923,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4925,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4927,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4929,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4931,
            "contract": "contracts/RequiemQBondDepository.sol:RequiemQBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_lockedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minLockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "name": "EarlyWithdrawPenaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinLockedAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "PenaltyCollectorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXDAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_PENALTY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINDAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REF_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "create_lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawPenaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "get_amount_minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "get_locks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGovernanceLock.LockedBalance[]",
          "name": "_balances",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "get_minted_for_lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "get_minted_for_locks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_minted",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "get_share",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "get_voting_power",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "increase_position",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newEnd",
          "type": "uint256"
        }
      ],
      "name": "increase_time_to_maturity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "locked_of",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintedForLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "multipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_earlyWithdrawPenaltyRate",
          "type": "uint256"
        }
      ],
      "name": "setEarlyWithdrawPenaltyRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPenaltyCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferFullLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferLockShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "voting_power_locked_days",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "voting_power_unlock_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87b6d8ca420919a8cd88cb1b00666ebd3108ab07f9f903eb1384b9a6b9b07a65",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "3325112",
    "logsBloom": "0x
    "blockHash": "0x6ab1b3a0cf0e0748b887d9533054c356e987042709af48268cf947faf8339a7a",
    "transactionHash": "0x87b6d8ca420919a8cd88cb1b00666ebd3108ab07f9f903eb1384b9a6b9b07a65",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0x87b6d8ca420919a8cd88cb1b00666ebd3108ab07f9f903eb1384b9a6b9b07a65",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6ab1b3a0cf0e0748b887d9533054c356e987042709af48268cf947faf8339a7a"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "3325112",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Red Requiem",
    "RREQ",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "1000000000000000000"
  ],
  "solcInputHash": "04ea363325cbdccea85d7b077668d80b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lockedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"EarlyWithdrawPenaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinLockedAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PenaltyCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXDAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINDAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"get_amount_minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get_locks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IGovernanceLock.LockedBalance[]\",\"name\":\"_balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"get_minted_for_lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get_minted_for_locks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_minted\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"get_voting_power\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"increase_position\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEnd\",\"type\":\"uint256\"}],\"name\":\"increase_time_to_maturity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"locked_of\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedForLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawPenaltyRate\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawPenaltyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPenaltyCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFullLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferLockShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"voting_power_locked_days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"voting_power_unlock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"create_lock(uint256,uint256)\":{\"params\":{\"_end\":\"expiry timestamp\",\"_value\":\"amount to lock\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"get_locks(address)\":{\"params\":{\"_addr\":\"user to get data of\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"increase_position(uint256,uint256)\":{\"params\":{\"_end\":\"maturity of the position to increase\",\"_value\":\"increase position for position in _end by value\"}},\"increase_time_to_maturity(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"amount to change the maturity for\",\"_end\":\"maturity\",\"_newEnd\":\"new maturity\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create_lock(uint256,uint256)\":{\"notice\":\"Create new lock with defined maturity time - That shall help standardizing these positions\"},\"get_locks(address)\":{\"notice\":\"Gets lock data for user\"},\"increase_position(uint256,uint256)\":{\"notice\":\"Function to increase position for given _end\"},\"increase_time_to_maturity(uint256,uint256,uint256)\":{\"notice\":\"Increases the maturity of _amount from _end to _newEnd\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BloodRedRequiem.sol\":\"BloodRedRequiem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/BloodRedRequiem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./libraries/ERC20Burnable.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IGovernanceLock.sol\\\";\\n\\nusing SafeERC20 for IERC20 global;\\nusing EnumerableSet for EnumerableSet.UintSet global;\\n\\ncontract BloodRedRequiem is ERC20Burnable, IGovernanceLock, Ownable {\\n  // flags\\n  uint256 private _unlocked;\\n\\n  // constants\\n  uint256 public constant REF_DATE = 1640991600; // 20220101 00:00\\n  uint256 public constant MINDAYS = 1;\\n  uint256 public constant MAXDAYS = 3 * 365;\\n\\n  uint256 public constant MAXTIME = MAXDAYS * 1 days; // 3 years\\n  uint256 public constant MINTIME = 60 * 60; // 1 hour\\n  uint256 public constant MAX_WITHDRAWAL_PENALTY = 50000; // 50%\\n  uint256 public constant PRECISION = 100000; // 5 decimals\\n\\n  address public lockedToken;\\n  address public penaltyCollector;\\n  uint256 public minLockedAmount;\\n  uint256 public earlyWithdrawPenaltyRate;\\n\\n  mapping(address => mapping(uint256 => uint256)) public mintedForLock;\\n\\n  // the dictionary that contains the locked positions for each endtime\\n  mapping(address => mapping(uint256 => uint256)) public lockedPosition;\\n\\n  // 18-decimal multiplier mapped from user to lockEnd\\n  mapping(address => mapping(uint256 => uint256)) public multipliers;\\n\\n  // tracks the maturities for locks per user\\n  mapping(address => EnumerableSet.UintSet) private lockEnds;\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier lock() {\\n    require(_unlocked == 1, \\\"LOCKED\\\");\\n    _unlocked = 0;\\n    _;\\n    _unlocked = 1;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _lockedToken,\\n    uint256 _minLockedAmount\\n  ) ERC20(_name, _symbol, 18) {\\n    lockedToken = _lockedToken;\\n    minLockedAmount = _minLockedAmount;\\n    earlyWithdrawPenaltyRate = 30000; // 30%\\n    _unlocked = 1;\\n  }\\n\\n  /* ========== PUBLIC FUNCTIONS ========== */\\n\\n  function locked_of(address _addr, uint256 _end)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return lockedPosition[_addr][_end];\\n  }\\n\\n  /**\\n   * Gets lock data for user\\n   * @param _addr user to get data of\\n   */\\n  function get_locks(address _addr)\\n    external\\n    view\\n    override\\n    returns (LockedBalance[] memory _balances)\\n  {\\n    uint256 length = lockEnds[_addr].length();\\n    _balances = new LockedBalance[](length);\\n    for (uint256 i = 0; i < length; i++) {\\n      uint256 _end = lockEnds[_addr].at(i);\\n      _balances[i] = LockedBalance(\\n        lockedPosition[_addr][_end],\\n        _end,\\n        mintedForLock[_addr][_end],\\n        (lockedPosition[_addr][_end] * multipliers[_addr][_end]) / 1e18\\n      );\\n    }\\n  }\\n\\n  // returns minted voting power for lock\\n  function get_minted_for_locks(address _addr)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory _minted)\\n  {\\n    uint256 length = lockEnds[_addr].length();\\n    _minted = new uint256[](length);\\n    for (uint256 i = 0; i < length; i++) {\\n      uint256 _end = lockEnds[_addr].at(i);\\n      _minted[i] = mintedForLock[_addr][_end];\\n    }\\n  }\\n\\n  // returns minted voting power for lock\\n  function get_minted_for_lock(address _addr, uint256 _end)\\n    external\\n    view\\n    override\\n    returns (uint256 _minted)\\n  {\\n    _minted = mintedForLock[_addr][_end];\\n  }\\n\\n  function voting_power_unlock_time(uint256 _value, uint256 _unlock_time)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 _now = block.timestamp;\\n    if (_unlock_time <= _now) return 0;\\n    uint256 _lockedSeconds = _unlock_time - _now;\\n    if (_lockedSeconds >= MAXTIME) {\\n      return _value;\\n    }\\n    return (_value * _lockedSeconds) / MAXTIME;\\n  }\\n\\n  function get_share(address _addr) public view returns (uint256 _vote) {\\n    uint256 _length = lockEnds[_addr].length();\\n    _vote = 0;\\n    for (uint256 i = 0; i < _length; i++) {\\n      uint256 _end = lockEnds[_addr].at(i);\\n      _vote += lockedPosition[_addr][_end] * multipliers[_addr][_end];\\n    }\\n\\n    _vote /= 1e18;\\n  }\\n\\n  function get_voting_power(address _addr, uint256 _amount)\\n    public\\n    view\\n    returns (uint256 _votingPower)\\n  {\\n    uint256 _length = lockEnds[_addr].length();\\n    uint256 _locked = 0;\\n    _votingPower = 0;\\n    for (uint256 i = 0; i < _length; i++) {\\n      uint256 _end = lockEnds[_addr].at(i);\\n      _votingPower += lockedPosition[_addr][_end] * multipliers[_addr][_end];\\n      _locked += lockedPosition[_addr][_end];\\n    }\\n\\n    // we pick the minimum of amount and locked, otherwise\\n    _votingPower =\\n      (_votingPower * _amount > _locked ? _locked : _amount) /\\n      _locked /\\n      1e18;\\n  }\\n\\n  function get_amount_minted(uint256 _value, uint256 _unlock_time)\\n    public\\n    pure\\n    returns (uint256)\\n  {\\n    return (_value * (_unlock_time - REF_DATE)) / MAXTIME;\\n  }\\n\\n  function voting_power_locked_days(uint256 _value, uint256 _days)\\n    public\\n    pure\\n    override\\n    returns (uint256)\\n  {\\n    if (_days >= MAXDAYS) {\\n      return _value;\\n    }\\n    return (_value * _days) / MAXDAYS;\\n  }\\n\\n  /**\\n   * Create new lock with defined maturity time\\n   * - That shall help standardizing these positions\\n   * @param _value amount to lock\\n   * @param _end expiry timestamp\\n   */\\n  function create_lock(uint256 _value, uint256 _end) external {\\n    uint256 _now = block.timestamp;\\n    uint256 _duration = _end - _now;\\n    require(_value >= minLockedAmount, \\\"less than min amount\\\");\\n    require(_duration >= MINTIME, \\\"Shorter than MINTIME\\\");\\n    require(_duration <= MAXTIME, \\\"Longer than MAXTIME\\\");\\n    _create_lock(_msgSender(), _value, _end);\\n  }\\n\\n  /**\\n   * Increases the maturity of _amount from _end to _newEnd\\n   * @param _amount amount to change the maturity for\\n   * @param _end maturity\\n   * @param _newEnd new maturity\\n   */\\n  function increase_time_to_maturity(\\n    uint256 _amount,\\n    uint256 _end,\\n    uint256 _newEnd\\n  ) external {\\n    uint256 _now = block.timestamp;\\n    uint256 _duration = _newEnd - _now;\\n    require(_duration >= MINTIME, \\\"Voting lock can MINTIME min\\\");\\n    require(_duration <= MAXTIME, \\\"Voting lock can MAXTIME max\\\");\\n    _extend_maturity(_msgSender(), _amount, _end, _newEnd);\\n  }\\n\\n  /**\\n   * Function to increase position for given _end\\n   * @param _value increase position for position in _end by value\\n   * @param _end maturity of the position to increase\\n   */\\n  function increase_position(uint256 _value, uint256 _end) external {\\n    require(_value >= minLockedAmount, \\\"less than min amount\\\");\\n    _increase_position(_msgSender(), _value, _end);\\n  }\\n\\n  // withdraws from all locks whenever possible\\n  function withdrawAll() external override lock {\\n    uint256 _endsLength = lockEnds[_msgSender()].length();\\n    for (uint256 i = 0; i < _endsLength; i++) {\\n      uint256 _end = lockEnds[_msgSender()].at(i);\\n      uint256 _locked = lockedPosition[_msgSender()][_end];\\n      uint256 _now = block.timestamp;\\n      if (_locked > 0 && _now >= _end) {\\n        // delete position and multiplier\\n        delete lockedPosition[_msgSender()][_end];\\n        delete multipliers[_msgSender()][_end];\\n\\n        // burn minted amount\\n        _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\\n\\n        // delete minted entry\\n        delete mintedForLock[_msgSender()][_end];\\n        IERC20(lockedToken).safeTransfer(_msgSender(), _locked);\\n\\n        emit Withdraw(_msgSender(), _locked, _now);\\n      }\\n    }\\n  }\\n\\n  function withdraw(uint256 _end, uint256 _amount) external override lock {\\n    uint256 _locked = lockedPosition[_msgSender()][_end];\\n    uint256 _now = block.timestamp;\\n    require(_locked > 0, \\\"Nothing to withdraw\\\");\\n    require(_now >= _end, \\\"The lock didn't expire\\\");\\n    require(_locked >= _amount, \\\"Insufficient locked\\\");\\n    if (_amount >= _locked) {\\n      delete lockedPosition[_msgSender()][_end];\\n      delete multipliers[_msgSender()][_end];\\n      _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\\n      delete mintedForLock[_msgSender()][_end];\\n      lockEnds[_msgSender()].remove(_end);\\n    } else {\\n      lockedPosition[_msgSender()][_end] -= _amount;\\n      _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\\n      mintedForLock[_msgSender()][_end] -= get_amount_minted(_amount, _end);\\n    }\\n\\n    IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\\n\\n    emit Withdraw(_msgSender(), _amount, _now);\\n  }\\n\\n  // This will charge PENALTY if lock is not expired yet\\n  function emergencyWithdraw(uint256 _end) external lock {\\n    uint256 _amount = lockedPosition[_msgSender()][_end];\\n    uint256 _now = block.timestamp;\\n    require(_amount > 0, \\\"Nothing to withdraw\\\");\\n    if (_now < _end) {\\n      uint256 _fee = (_amount * earlyWithdrawPenaltyRate) / PRECISION;\\n      _penalize(_fee);\\n      _amount = _amount - _fee;\\n    }\\n    delete lockedPosition[_msgSender()][_end];\\n    delete multipliers[_msgSender()][_end];\\n    _burn(_msgSender(), mintedForLock[_msgSender()][_end]);\\n    delete mintedForLock[_msgSender()][_end];\\n    lockEnds[_msgSender()].remove(_end);\\n\\n    IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\\n\\n    emit Withdraw(_msgSender(), _amount, _now);\\n  }\\n\\n  // This will charge PENALTY if lock is not expired yet\\n  function emergencyWithdrawAll() external lock {\\n    uint256 _endsLength = lockEnds[_msgSender()].length();\\n    for (uint256 i = 0; i < _endsLength; i++) {\\n      uint256 _end = lockEnds[_msgSender()].at(i);\\n      uint256 _locked = lockedPosition[_msgSender()][_end];\\n      uint256 _now = block.timestamp;\\n      if (_locked > 0) {\\n        if (_now < _end) {\\n          uint256 _fee = (_locked * earlyWithdrawPenaltyRate) / PRECISION;\\n          _penalize(_fee);\\n          lockedPosition[_msgSender()][_end] = _locked - _fee;\\n        }\\n        delete lockedPosition[_msgSender()][_end];\\n        delete multipliers[_msgSender()][_end];\\n        _burn(_msgSender(), mintedForLock[_msgSender()][i]);\\n        delete mintedForLock[_msgSender()][_end];\\n\\n        IERC20(lockedToken).safeTransfer(_msgSender(), _locked);\\n\\n        emit Withdraw(_msgSender(), _locked, _now);\\n      }\\n    }\\n  }\\n\\n  function transferLockShare(\\n    uint256 _amount,\\n    uint256 _end,\\n    address _to\\n  ) public {\\n    uint256 _share = (_amount * 1e18) / lockedPosition[_msgSender()][_end];\\n\\n    uint256 _toSend = (_share * mintedForLock[_msgSender()][_end]) / 1e18;\\n\\n    // send the respective amount of this token\\n    IERC20(address(this)).safeTransferFrom(\\n      _msgSender(),\\n      address(this),\\n      _toSend\\n    );\\n\\n    // adjust locked balances\\n    _transferLockShare(_msgSender(), _amount, _toSend, _end, _to);\\n  }\\n\\n  function transferFullLock(uint256 _end, address _to) public {\\n    // for a full transfer, the full minted amount has to be paid\\n    uint256 _minted = mintedForLock[_msgSender()][_end];\\n\\n    // send the underying amount of this token\\n    IERC20(address(this)).safeTransferFrom(_msgSender(), _to, _minted);\\n\\n    _transferFullLock(_msgSender(), _to, _end);\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  /**\\n  creates lock\\n   */\\n  function _create_lock(\\n    address _addr,\\n    uint256 _value,\\n    uint256 _end\\n  ) internal lock {\\n    require(!lockEnds[_addr].contains(_end), \\\"position exists\\\");\\n    uint256 _vp = get_amount_minted(_value, _end);\\n    require(_vp > 0, \\\"No benefit to lock\\\");\\n    lockedPosition[_addr][_end] = _value;\\n\\n    IERC20(lockedToken).safeTransferFrom(_addr, address(this), _value);\\n    _mint(_addr, _vp);\\n    mintedForLock[_addr][_end] = _vp;\\n    lockEnds[_addr].add(_end);\\n    multipliers[_addr][_end] = _calculate_multiplier(block.timestamp, _end);\\n  }\\n\\n  /**\\n   * Extends the maturity\\n   * Moves also the minted amounts\\n   * @param _addr user\\n   * @param _amount Amount to move from old end to end\\n   * @param _end end of locked amount to move\\n   * @param _newEnd target end\\n   */\\n  function _extend_maturity(\\n    address _addr,\\n    uint256 _amount,\\n    uint256 _end,\\n    uint256 _newEnd\\n  ) internal lock {\\n    uint256 _vp = get_amount_minted(_amount, _end);\\n    uint256 _vpNew = get_amount_minted(_amount, _newEnd);\\n    uint256 _oldLocked = lockedPosition[_addr][_end];\\n    uint256 _now = block.timestamp;\\n    // adjust multipliers\\n    if (lockEnds[_addr].contains(_newEnd)) {\\n      // position exists\\n      multipliers[_addr][_newEnd] = _calculate_adjusted_multiplier_position(\\n        _amount,\\n        _now,\\n        _newEnd,\\n        lockedPosition[_addr][_newEnd],\\n        multipliers[_addr][_newEnd]\\n      );\\n      // increase on new\\n      lockedPosition[_addr][_newEnd] += _amount;\\n      mintedForLock[_addr][_newEnd] += _vpNew;\\n    } else {\\n      // position does not exist\\n      multipliers[_addr][_newEnd] = _calculate_adjusted_multiplier_maturity(\\n        _now,\\n        _end,\\n        _newEnd,\\n        multipliers[_addr][_end]\\n      );\\n      // create on new\\n      lockedPosition[_addr][_newEnd] = _amount;\\n      mintedForLock[_addr][_newEnd] = _vpNew;\\n      lockEnds[_addr].add(_newEnd);\\n    }\\n\\n    if (_amount == _oldLocked) {\\n      // delete from old\\n      delete lockedPosition[_addr][_end];\\n      delete mintedForLock[_addr][_end];\\n      delete multipliers[_addr][_end];\\n      lockEnds[_addr].remove(_end);\\n    } else {\\n      // decrease from old\\n      lockedPosition[_addr][_end] -= _amount;\\n      mintedForLock[_addr][_end] -= _vp;\\n    }\\n\\n    uint256 _vpDiff = _vpNew - _vp;\\n    require(_vpDiff > 0, \\\"No benefit to lock\\\");\\n    _mint(_addr, _vpDiff);\\n\\n    emit Deposit(_addr, _amount, _newEnd, _now);\\n  }\\n\\n  /**\\n   * Function to increase position for given _end\\n   * @param _addr user\\n   * @param _value increase position for position in _end by value\\n   * @param _end maturity of the position to increase\\n   */\\n  function _increase_position(\\n    address _addr,\\n    uint256 _value,\\n    uint256 _end\\n  ) internal lock {\\n    // calculate amount to mint\\n    uint256 _vp = get_amount_minted(_value, _end); // voting_power_unlock_time(_value, _end);\\n\\n    // adjust multiplier\\n    uint256 _now = block.timestamp;\\n    multipliers[_addr][_end] = _calculate_adjusted_multiplier_position(\\n      _value,\\n      _now,\\n      _end,\\n      _value,\\n      multipliers[_addr][_end]\\n    );\\n\\n    // increase locked amount\\n    lockedPosition[_addr][_end] += _value;\\n\\n    require(_vp > 0, \\\"No benefit to lock\\\");\\n\\n    IERC20(lockedToken).safeTransferFrom(_msgSender(), address(this), _value);\\n\\n    _mint(_addr, _vp);\\n    mintedForLock[_addr][_end] += _vp;\\n\\n    emit Deposit(_addr, _value, _end, _now);\\n  }\\n\\n  function _penalize(uint256 _amount) internal {\\n    if (penaltyCollector != address(0)) {\\n      // send to collector if `penaltyCollector` set\\n      IERC20(lockedToken).safeTransfer(penaltyCollector, _amount);\\n    } else {\\n      ERC20Burnable(lockedToken).burn(_amount);\\n    }\\n  }\\n\\n  // /**\\n  //  * @dev Before transfer function that moves the respective locks to the recipient\\n  //  * Standard ERC20 function adjusted for ERC20 lock which does NOT execute these lines\\n  //  * for minting and burning as it would interfere with the lock logic.\\n  //  * @param from sender\\n  //  * @param to recipient\\n  //  * @param amount amount of this token to be sent\\n  //  */\\n  // function _beforeTokenTransfer(\\n  //   address from,\\n  //   address to,\\n  //   uint256 amount\\n  // ) internal override {\\n  //   uint256 _ids = lockIds[from];\\n  //   uint256 _amountLeft = amount;\\n  //   for (uint256 i = 0; i < _ids; i++) {\\n  //     uint256 minted = mintedForLock[from][i];\\n  //     if (_amountLeft >= minted) {\\n  //       _transferFullLock(from, to, i);\\n  //       _amountLeft -= minted;\\n  //     } else if (_amountLeft > 0) {\\n  //       // here we just transfer the last bit left\\n  //       _transferLock(_amountLeft, i, to);\\n  //       break;\\n  //     } else break;\\n  //   }\\n  // }\\n\\n  /**\\n  * @dev Function that transfers the share of the underlying lock amount to the recipient.\\n  @param _amount amount of locked token to transfer\\n  @param _end id of lock to transfer\\n  @param _to recipient address\\n  */\\n  function _transferLockShare(\\n    address _from,\\n    uint256 _amount,\\n    uint256 _vp,\\n    uint256 _end,\\n    address _to\\n  ) internal {\\n    uint256 _locked = lockedPosition[_from][_end];\\n    require(_amount <= _locked, \\\"Insufficient funds in Lock\\\");\\n\\n    // log the amount for the recipient\\n    _receiveLock(_amount, _vp, _end, _to);\\n\\n    // reduce this users lock amount\\n    lockedPosition[_from][_end] -= _amount;\\n\\n    // reduce related voting power\\n    mintedForLock[_from][_end] -= _vp;\\n  }\\n\\n  /**\\n  * @dev Function that transfers the full lock of the user to the recipient.\\n  @param _end id of lock to transfer\\n  @param _to recipient address\\n  */\\n  function _transferFullLock(\\n    address _from,\\n    address _to,\\n    uint256 _end\\n  ) internal {\\n    // log the amount for the recipient\\n    _receiveLock(\\n      lockedPosition[_from][_end],\\n      mintedForLock[_from][_end],\\n      _end,\\n      _to\\n    );\\n\\n    // reduce this users lock amount\\n    delete lockedPosition[_from][_end];\\n    delete mintedForLock[_from][_end];\\n\\n    delete multipliers[_from][_end];\\n    // delete index\\n    lockEnds[_from].remove(_end);\\n  }\\n\\n  /**\\n  Function that logs the recipients lock\\n  All locks will searched and once a match is found the lock amount is added\\n  @param _lockAmount locked amount that is received\\n  @param _lockEnd lock end time\\n  @param _recipient recipient address\\n  - does NOT reduce the senders lock, that has to be done before\\n   */\\n  function _receiveLock(\\n    uint256 _lockAmount,\\n    uint256 _vp,\\n    uint256 _lockEnd,\\n    address _recipient\\n  ) internal {\\n    bool _lockExists = lockEnds[_recipient].contains(_lockEnd);\\n    uint256 _now = block.timestamp;\\n    if (_lockExists) {\\n      mintedForLock[_recipient][_lockEnd] += _vp;\\n      multipliers[_recipient][\\n        _lockEnd\\n      ] = _calculate_adjusted_multiplier_position(\\n        _lockAmount,\\n        _now,\\n        _lockEnd,\\n        lockedPosition[_recipient][_lockEnd],\\n        multipliers[_recipient][_lockEnd]\\n      );\\n      lockedPosition[_recipient][_lockEnd] += _lockAmount;\\n    } else {\\n      multipliers[_recipient][_lockEnd] = _calculate_multiplier(_now, _lockEnd);\\n      lockedPosition[_recipient][_lockEnd] = _lockAmount;\\n      mintedForLock[_recipient][_lockEnd] = _vp;\\n      lockEnds[_recipient].add(_lockEnd);\\n    }\\n  }\\n\\n  function _getEarliestEnd(address _addr) internal view returns (uint256 _min) {\\n    uint256 _count = lockEnds[_addr].length();\\n    if (_count == 0) return 0;\\n    _min = lockEnds[_addr].at(0);\\n    for (uint256 i = 1; i < lockEnds[_addr].length(); i++) {\\n      uint256 _current = lockEnds[_addr].at(i);\\n      if (_current < _min) {\\n        _min = _current;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  function _getLatestEnd(address _addr) internal view returns (uint256 _max) {\\n    uint256 _count = lockEnds[_addr].length();\\n    if (_count == 0) return 0;\\n    _max = lockEnds[_addr].at(0);\\n    for (uint256 i = 1; i < lockEnds[_addr].length(); i++) {\\n      uint256 _current = lockEnds[_addr].at(i);\\n      if (_current > _max) {\\n        _max = _current;\\n      }\\n    }\\n    return _max;\\n  }\\n\\n  function _calculate_multiplier(uint256 _ref, uint256 _end)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return ((_end - _ref) * 1e18) / (_end - REF_DATE);\\n  }\\n\\n  function _calculate_adjusted_multiplier_position(\\n    uint256 _amount,\\n    uint256 _ref,\\n    uint256 _end,\\n    uint256 _position,\\n    uint256 _oldMultiplier\\n  ) internal pure returns (uint256) {\\n    return\\n      (_position *\\n        _oldMultiplier +\\n        _amount *\\n        _calculate_multiplier(_ref, _end)) /\\n      (_amount + _position) /\\n      1e18;\\n  }\\n\\n  function _calculate_adjusted_multiplier_maturity(\\n    uint256 _ref,\\n    uint256 _endOld,\\n    uint256 _end,\\n    uint256 _oldMultiplier\\n  ) internal pure returns (uint256) {\\n    return\\n      (_endOld *\\n        _oldMultiplier +\\n        (_end - _endOld) *\\n        _calculate_multiplier(_ref, _end)) /\\n      _end /\\n      1e18;\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function setMinLockedAmount(uint256 _minLockedAmount) external onlyOwner {\\n    minLockedAmount = _minLockedAmount;\\n    emit MinLockedAmountSet(_minLockedAmount);\\n  }\\n\\n  function setEarlyWithdrawPenaltyRate(uint256 _earlyWithdrawPenaltyRate)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _earlyWithdrawPenaltyRate <= MAX_WITHDRAWAL_PENALTY,\\n      \\\"withdrawal penalty is too high\\\"\\n    ); // <= 50%\\n    earlyWithdrawPenaltyRate = _earlyWithdrawPenaltyRate;\\n    emit EarlyWithdrawPenaltySet(_earlyWithdrawPenaltyRate);\\n  }\\n\\n  function setPenaltyCollector(address _addr) external onlyOwner {\\n    penaltyCollector = _addr;\\n    emit PenaltyCollectorSet(_addr);\\n  }\\n\\n  /* =============== EVENTS ==================== */\\n  event Deposit(\\n    address indexed provider,\\n    uint256 value,\\n    uint256 locktime,\\n    uint256 timestamp\\n  );\\n  event Withdraw(address indexed provider, uint256 value, uint256 timestamp);\\n  event PenaltyCollectorSet(address indexed addr);\\n  event EarlyWithdrawPenaltySet(uint256 indexed penalty);\\n  event MinLockedAmountSet(uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x89b7d8ddb6298cb583fb8bcab716f40452380364acd9cf0fdb71b019d577e6f4\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xcf9183e328685c9d4eb47d374877363f8d84e5b8be528b0b6299eb8b54178d17\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xec988a6ff5da4cdef6378a3f8320e39027f557912ba73c92004a467d8a6cd5fe\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceLock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IGovernanceLock {\\n  struct LockedBalance {\\n    uint256 amount;\\n    uint256 end;\\n    uint256 minted;\\n    uint256 votingPower;\\n  }\\n\\n  function get_locks(address _addr)\\n    external\\n    view\\n    returns (LockedBalance[] memory _balances);\\n\\n  function get_minted_for_locks(address _addr)\\n    external\\n    view\\n    returns (uint256[] memory _minted);\\n\\n  function get_minted_for_lock(address _addr, uint256 _end)\\n    external\\n    view\\n    returns (uint256 _minted);\\n\\n  function locked_of(address _addr, uint256 _end)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function voting_power_unlock_time(uint256 _value, uint256 _unlock_time)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function voting_power_locked_days(uint256 _value, uint256 _days)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function create_lock(uint256 _value, uint256 _days) external;\\n\\n  function increase_position(uint256 _value, uint256 _end) external;\\n\\n  function increase_time_to_maturity(\\n    uint256 _amount,\\n    uint256 _end,\\n    uint256 _newEnd\\n  ) external;\\n\\n  function withdraw(uint256 _end, uint256 _amount) external;\\n\\n  function withdrawAll() external;\\n}\\n\",\"keccak256\":\"0x2535f997d0fd93afe698e95630364b4ba5c11e3fa74c5dfb9ade08c2e2cc2bf6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IOwnable {\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n  \\n  function transferOwnership( address newOwner_ ) external;\\n}\",\"keccak256\":\"0x6d4e91f3fe992f5b310bc33f92c98ba6a8d92097842bd62728e76b4a1e89e78c\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override(IERC20, IERC20Metadata) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1880fc250803fee7b6a890e4c3d649f0285717511596148e6c8ce9d15ed505b8\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n  /**\\n   * @dev Destroys `amount` tokens from the caller.\\n   *\\n   * See {ERC20-_burn}.\\n   */\\n  function burn(uint256 amount) public virtual {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n   * allowance.\\n   *\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\n   * `amount`.\\n   */\\n  function burnFrom(address account, uint256 amount) public virtual {\\n    uint256 currentAllowance = allowance(account, _msgSender());\\n    require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n    unchecked {\\n      _approve(account, _msgSender(), currentAllowance - amount);\\n    }\\n    _burn(account, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xff5ce9e7687cb07138714de7a0746701328fc91cf1146680a92e842b3b4d3c31\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x670a67e92ea895bd14d2cbbdf5468caa62966f7bbb9660082e87af0b771b9233\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\ncontract Ownable is IOwnable {\\n    \\n  address internal _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor () {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred( address(0), _owner );\\n  }\\n\\n  function owner() public view override returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n    _;\\n  }\\n\\n  function renounceOwnership() public virtual override onlyOwner() {\\n    emit OwnershipTransferred( _owner, address(0) );\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\\n    require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred( _owner, newOwner_ );\\n    _owner = newOwner_;\\n  }\\n}\",\"keccak256\":\"0xad79fc4e20aab14d92bf1de5da1f8c4122832a11b72b9dbb4027b81b1623ba80\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      \\\"SAFE_ERC20_CALL_FAILED\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x34e0bbbab0278f4a431bb41107ea4ca8cadc0601da8f58e18b217fbbc3769a73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003b7d38038062003b7d833981016040819052620000349162000270565b83836012826003908051906020019062000050929190620000fd565b50815162000066906004906020850190620000fd565b5060058054336101009081026001600160a81b031990921660ff9094169390931717908190556040519190046001600160a01b03169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600780546001600160a01b0319166001600160a01b0393909316929092179091556009555050617530600a5560016006556200033f565b8280546200010b9062000303565b90600052602060002090601f0160209004810192826200012f57600085556200017a565b82601f106200014a57805160ff19168380011785556200017a565b828001600101855582156200017a579182015b828111156200017a5782518255916020019190600101906200015d565b50620001889291506200018c565b5090565b5b808211156200018857600081556001016200018d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cb57600080fd5b81516001600160401b0380821115620001e857620001e8620001a3565b604051601f8301601f19908116603f01168101908282118183101715620002135762000213620001a3565b816040528381526020925086838588010111156200023057600080fd5b600091505b8382101562000254578582018301518183018401529082019062000235565b83821115620002665760008385830101525b9695505050505050565b600080600080608085870312156200028757600080fd5b84516001600160401b03808211156200029f57600080fd5b620002ad88838901620001b9565b95506020870151915080821115620002c457600080fd5b50620002d387828801620001b9565b604087015190945090506001600160a01b0381168114620002f357600080fd5b6060959095015193969295505050565b600181811c908216806200031857607f821691505b6020821081036200033957634e487b7160e01b600052602260045260246000fd5b50919050565b61382e806200034f6000396000f3fe608060405234801561001057600080fd5b50600436106103415760003560e01c806376b15a57116101bd578063af62fe0e116100f9578063d982523f116100a2578063ed8732711161007c578063ed87327114610751578063ee00ef3a14610764578063f2fde38b1461076c578063f4da99c71461077f57600080fd5b8063d982523f146106fd578063dd19171914610710578063dd62ed3e1461071857600080fd5b8063c84de300116100d3578063c84de300146106c4578063d08a12ff146106d7578063d2713324146106ea57600080fd5b8063af62fe0e14610644578063bf201c7f1461066f578063c1917a5a146106a457600080fd5b8063a25b39b711610166578063a8a4a37611610140578063a8a4a3761461060b578063a9059cbb1461061e578063aaf5eb6814610631578063ae6ef65f1461063b57600080fd5b8063a25b39b7146105b9578063a457c2d7146105c2578063a650adbd146105d557600080fd5b8063853828b611610197578063853828b6146105935780638da5cb5b1461059b57806395d89b41146105b157600080fd5b806376b15a571461054d57806379c1d6641461056d57806379cc67901461058057600080fd5b806338b4321b1161028c5780635b51c3081161023557806369edaf341161020f57806369edaf34146104de57806370a0823114610509578063715018a61461053257806373426cff1461053a57600080fd5b80635b51c308146104af5780635b7d8f05146104b857806365fc3873146104cb57600080fd5b8063441a3e7011610266578063441a3e701461047e578063478dc5ca146104915780635312ea8e1461049c57600080fd5b806338b4321b14610445578063395093511461045857806342966c681461046b57600080fd5b80631767c433116102ee57806323b872dd116102c857806323b872dd1461040a578063308097b21461041d578063313ce5671461043057600080fd5b80631767c433146103f057806318160ddd146103f95780632060176b1461040157600080fd5b80630e44e39e1161031f5780630e44e39e1461039c5780630f45cc81146103bd5780630f51c09c146103e857600080fd5b8063063da9df1461034657806306fdde031461035b578063095ea7b314610379575b600080fd5b610359610354366004613425565b6107aa565b005b6103636107e3565b604051610370919061347d565b60405180910390f35b61038c6103873660046134b0565b610875565b6040519015158152602001610370565b6103af6103aa3660046134b0565b61088c565b604051908152602001610370565b6007546103d0906001600160a01b031681565b6040516001600160a01b039091168152602001610370565b6103af600181565b6103af61044781565b6002546103af565b6103af61c35081565b61038c6104183660046134da565b6109b7565b6008546103d0906001600160a01b031681565b60055460405160ff9091168152602001610370565b6103af610453366004613516565b610a7b565b61038c6104663660046134b0565b610ad5565b610359610479366004613538565b610b11565b61035961048c366004613516565b610b1e565b6103af6361cf8b7081565b6103596104aa366004613538565b610dde565b6103af610e1081565b6103596104c6366004613551565b610fa3565b6103596104d9366004613516565b611064565b6103af6104ec3660046134b0565b600c60209081526000928352604080842090915290825290205481565b6103af610517366004613551565b6001600160a01b031660009081526020819052604090205490565b610359611186565b6103af610548366004613516565b611242565b61056061055b366004613551565b611272565b604051610370919061356c565b6103af61057b366004613551565b61136c565b61035961058e3660046134b0565b611438565b6103596114d2565b60055461010090046001600160a01b03166103d0565b610363611663565b6103af60095481565b61038c6105d03660046134b0565b611672565b6103af6105e33660046134b0565b6001600160a01b03919091166000908152600c60209081526040808320938352929052205490565b610359610619366004613538565b611723565b61038c61062c3660046134b0565b611807565b6103af620186a081565b6103af600a5481565b6103af6106523660046134b0565b600d60209081526000928352604080842090915290825290205481565b6103af61067d3660046134b0565b6001600160a01b039091166000908152600b60209081526040808320938352929052205490565b6106b76106b2366004613551565b611814565b60405161037091906135b0565b6103596106d2366004613516565b61199f565b6103596106e5366004613538565b611a00565b6103af6106f8366004613516565b611a92565b61035961070b366004613614565b611abb565b610359611b8d565b6103af610726366004613640565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61035961075f36600461366a565b611d23565b6103af611db2565b61035961077a366004613551565b611dc4565b6103af61078d3660046134b0565b600b60209081526000928352604080842090915290825290205481565b336000818152600b60209081526040808320868452909152902054906107d39030908484611f13565b6107de338385611fc4565b505050565b6060600380546107f29061369f565b80601f016020809104026020016040519081016040528092919081815260200182805461081e9061369f565b801561086b5780601f106108405761010080835404028352916020019161086b565b820191906000526020600020905b81548152906001019060200180831161084e57829003601f168201915b5050505050905090565b6000610882338484612069565b5060015b92915050565b6001600160a01b0382166000908152600e6020526040812081906108af906121c1565b9050600080925060005b82811015610977576001600160a01b0386166000908152600e602052604081206108e390836121cb565b6001600160a01b0388166000818152600d60209081526040808320858452825280832054938352600c8252808320858452909152902054919250610926916136ef565b610930908661370e565b6001600160a01b0388166000908152600c60209081526040808320858452909152902054909550610961908461370e565b925050808061096f90613726565b9150506108b9565b50670de0b6b3a7640000818061098d87876136ef565b11610998578561099a565b825b6109a4919061373f565b6109ae919061373f565b95945050505050565b60006109c48484846121d7565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610a635760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a708533858403612069565b506001949350505050565b600042808311610a8f576000915050610886565b6000610a9b8285613761565b9050610aac610447620151806136ef565b8110610abc578492505050610886565b610acb610447620151806136ef565b6109a482876136ef565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610882918590610b0c90869061370e565b612069565b610b1b33826123ee565b50565b600654600114610b595760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055338152600c602090815260408083208584529091529020544281610bc65760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610a5a565b83811015610c165760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e277420657870697265000000000000000000006044820152606401610a5a565b82821015610c665760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e74206c6f636b6564000000000000000000000000006044820152606401610a5a565b818310610d0e57336000818152600c602090815260408083208884528252808320839055838352600d8252808320888452909152812055610cc2905b336000908152600b602090815260408083208984529091529020546123ee565b336000818152600b602090815260408083208884529091528120819055610d08918691600e915b6001600160a01b03168152602081019190915260400160002090612573565b50610d81565b336000908152600c6020908152604080832087845290915281208054859290610d38908490613761565b90915550610d47905033610ca2565b610d518385611a92565b336000908152600b6020908152604080832088845290915281208054909190610d7b908490613761565b90915550505b610d98336007546001600160a01b0316908561257f565b604080518481526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505060016006555050565b600654600114610e195760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055338152600c602090815260408083208484529091529020544281610e865760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610a5a565b82811015610ec5576000620186a0600a5484610ea291906136ef565b610eac919061373f565b9050610eb7816125c8565b610ec18184613761565b9250505b336000818152600c602090815260408083208784528252808320839055838352600d8252808320878452909152812055610f1a905b336000908152600b602090815260408083208884529091529020546123ee565b336000818152600b602090815260408083208784529091528120819055610f45918591600e91610ce9565b50610f5e335b6007546001600160a01b0316908461257f565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25050600160065550565b60055461010090046001600160a01b031633146110025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2541601c97bce42b47813f2be715ba4eb0a571f2aafaf35cda2054137d9a79af90600090a250565b4260006110718284613761565b90506009548410156110c55760405162461bcd60e51b815260206004820152601460248201527f6c657373207468616e206d696e20616d6f756e740000000000000000000000006044820152606401610a5a565b610e108110156111175760405162461bcd60e51b815260206004820152601460248201527f53686f72746572207468616e204d494e54494d450000000000000000000000006044820152606401610a5a565b611126610447620151806136ef565b8111156111755760405162461bcd60e51b815260206004820152601360248201527f4c6f6e676572207468616e204d415854494d45000000000000000000000000006044820152606401610a5a565b611180338585612669565b50505050565b60055461010090046001600160a01b031633146111e55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b60006104478210611254575081610886565b61044761126183856136ef565b61126b919061373f565b9392505050565b6001600160a01b0381166000908152600e6020526040812060609190611297906121c1565b90508067ffffffffffffffff8111156112b2576112b2613778565b6040519080825280602002602001820160405280156112db578160200160208202803683370190505b50915060005b81811015611365576001600160a01b0384166000908152600e6020526040812061130b90836121cb565b6001600160a01b0386166000908152600b602090815260408083208484529091529020548551919250908590849081106113475761134761378e565b6020908102919091010152508061135d81613726565b9150506112e1565b5050919050565b6001600160a01b0381166000908152600e60205260408120819061138f906121c1565b90506000915060005b81811015611425576001600160a01b0384166000908152600e602052604081206113c290836121cb565b6001600160a01b0386166000818152600d60209081526040808320858452825280832054938352600c8252808320858452909152902054919250611405916136ef565b61140f908561370e565b935050808061141d90613726565b915050611398565b5061126b670de0b6b3a76400008361373f565b60006114448333610726565b9050818110156114bb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6114c88333848403612069565b6107de83836123ee565b60065460011461150d5760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055611541600e82335b6001600160a01b03166001600160a01b031681526020019081526020016000206121c1565b905060005b8181101561165a57600061157882600e83335b6001600160a01b031681526020810191909152604001600020906121cb565b336000908152600c602090815260408083208484529091529020549091504281158015906115a65750828110155b1561164457336000818152600c602090815260408083208784528252808320839055838352600d82528083208784529091528120556115e490610efa565b336000818152600b6020908152604080832087845290915281205561160890610f4b565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25b505050808061165290613726565b915050611546565b50506001600655565b6060600480546107f29061369f565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561170c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6117193385858403612069565b5060019392505050565b60055461010090046001600160a01b031633146117825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b61c3508111156117d45760405162461bcd60e51b815260206004820152601e60248201527f7769746864726177616c2070656e616c747920697320746f6f206869676800006044820152606401610a5a565b600a81905560405181907fa7d10353d34f5fe96bad91fa358f55fbea8ad6ee0d30924022d2b58e77f476e390600090a250565b60006108823384846121d7565b6001600160a01b0381166000908152600e6020526040812060609190611839906121c1565b90508067ffffffffffffffff81111561185457611854613778565b6040519080825280602002602001820160405280156118b057816020015b61189d6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118725790505b50915060005b81811015611365576001600160a01b0384166000908152600e602052604081206118e090836121cb565b604080516080810182526001600160a01b0388166000818152600c602090815284822086835280825285832054808652828601889052848452600b835286842088855283528684205486880152938352600d825285832087845282529490912054939052929350916060830191670de0b6b3a76400009161196191906136ef565b61196b919061373f565b8152508483815181106119805761198061378e565b602002602001018190525050808061199790613726565b9150506118b6565b6009548210156119f15760405162461bcd60e51b815260206004820152601460248201527f6c657373207468616e206d696e20616d6f756e740000000000000000000000006044820152606401610a5a565b6119fc338383612821565b5050565b60055461010090046001600160a01b03163314611a5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b600981905560405181907f9a8dc7fb9d13b0f5acaf673226d570d31ec15d8a813fceced1eb36ad11afebc590600090a250565b6000611aa3610447620151806136ef565b611ab16361cf8b7084613761565b61126190856136ef565b426000611ac88284613761565b9050610e10811015611b1c5760405162461bcd60e51b815260206004820152601b60248201527f566f74696e67206c6f636b2063616e204d494e54494d45206d696e00000000006044820152606401610a5a565b611b2b610447620151806136ef565b811115611b7a5760405162461bcd60e51b815260206004820152601b60248201527f566f74696e67206c6f636b2063616e204d415854494d45206d617800000000006044820152606401610a5a565b611b86338686866129ea565b5050505050565b600654600114611bc85760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055611bdb600e823361151c565b905060005b8181101561165a576000611bf782600e8333611559565b336000908152600c60209081526040808320848452909152902054909150428115611d0d5782811015611c74576000620186a0600a5484611c3891906136ef565b611c42919061373f565b9050611c4d816125c8565b611c578184613761565b336000908152600c60209081526040808320888452909152902055505b336000818152600c602090815260408083208784528252808320839055838352600d8252808320878452909152812055611cad90610ca2565b336000818152600b60209081526040808320878452909152812055611cd190610f4b565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25b5050508080611d1b90613726565b915050611be0565b336000908152600c60209081526040808320858452909152812054611d5085670de0b6b3a76400006136ef565b611d5a919061373f565b336000908152600b6020908152604080832087845290915281205491925090670de0b6b3a764000090611d8d90846136ef565b611d97919061373f565b9050611da530338184611f13565b611b863386838787612d8c565b611dc1610447620151806136ef565b81565b60055461010090046001600160a01b03163314611e235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b6001600160a01b038116611e9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a5a565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526111809085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e84565b6001600160a01b0383166000818152600c60209081526040808320858452825280832054938352600b825280832085845290915290205461200791908385612f5f565b6001600160a01b0383166000818152600c602090815260408083208584528252808320839055838352600b82528083208584528252808320839055838352600d82528083208584528252808320839055928252600e9052206111809082612573565b6001600160a01b0383166120e45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0382166121605760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610886825490565b600061126b83836130d5565b6001600160a01b0383166122535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0382166122cf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383166000908152602081905260409020548181101561235e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061239590849061370e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123e191815260200190565b60405180910390a3611180565b6001600160a01b03821661246a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b038216600090815260208190526040902054818110156124f95760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612528908490613761565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600061126b83836130ff565b6040516001600160a01b0383166024820152604481018290526107de9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611f60565b6008546001600160a01b0316156125f657600854600754610b1b916001600160a01b0391821691168361257f565b6007546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561265557600080fd5b505af1158015611b86573d6000803e3d6000fd5b6006546001146126a45760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b600060068190556001600160a01b0384168152600e602052604090206126ca90826131f2565b156127175760405162461bcd60e51b815260206004820152600f60248201527f706f736974696f6e2065786973747300000000000000000000000000000000006044820152606401610a5a565b60006127238383611a92565b90506000811161276a5760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b6001600160a01b038085166000908152600c6020908152604080832086845290915290208490556007546127a19116853086611f13565b6127ab848261320a565b6001600160a01b0384166000818152600b602090815260408083208684528252808320859055928252600e9052206127e390836132e9565b506127ee42836132f5565b6001600160a01b039094166000908152600d60209081526040808320948352939052919091209290925550506001600655565b60065460011461285c5760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b6000600681905561286d8383611a92565b6001600160a01b0385166000908152600d6020908152604080832086845290915290205490915042906128a7908590839086908390613321565b6001600160a01b0386166000818152600d60209081526040808320888452825280832094909455918152600c825282812086825290915290812080548692906128f190849061370e565b9091555050816129385760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b612950336007546001600160a01b0316903087611f13565b61295a858361320a565b6001600160a01b0385166000908152600b602090815260408083208684529091528120805484929061298d90849061370e565b909155505060408051858152602081018590529081018290526001600160a01b038616907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a250506001600655505050565b600654600114612a255760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055612a368484611a92565b90506000612a448584611a92565b6001600160a01b0387166000818152600c60209081526040808320898452825280832054938352600e9091529020919250904290612a8290866131f2565b15612b5a576001600160a01b0388166000818152600c60209081526040808320898452825280832054938352600d8252808320898452909152902054612acd91899184918991613321565b6001600160a01b0389166000818152600d602090815260408083208a8452825280832094909455918152600c82528281208882529091529081208054899290612b1790849061370e565b90915550506001600160a01b0388166000908152600b6020908152604080832088845290915281208054859290612b4f90849061370e565b90915550612bf39050565b6001600160a01b0388166000908152600d60209081526040808320898452909152902054612b8d9082908890889061337c565b6001600160a01b0389166000818152600d602090815260408083208a8452825280832094909455828252600c815283822089835281528382208b9055828252600b81528382208983528152838220879055918152600e90915220612bf190866132e9565b505b818703612c62576001600160a01b0388166000818152600c602090815260408083208a84528252808320839055838352600b82528083208a84528252808320839055838352600d82528083208a84528252808320839055928252600e905220612c5c9087612573565b50612cd3565b6001600160a01b0388166000908152600c6020908152604080832089845290915281208054899290612c95908490613761565b90915550506001600160a01b0388166000908152600b6020908152604080832089845290915281208054869290612ccd908490613761565b90915550505b6000612cdf8585613761565b905060008111612d265760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b612d30898261320a565b60408051898152602081018890529081018390526001600160a01b038a16907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a25050600160065550505050505050565b6001600160a01b0385166000908152600c6020908152604080832085845290915290205480851115612e005760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742066756e647320696e204c6f636b0000000000006044820152606401610a5a565b612e0c85858585612f5f565b6001600160a01b0386166000908152600c6020908152604080832086845290915281208054879290612e3f908490613761565b90915550506001600160a01b0386166000908152600b6020908152604080832086845290915281208054869290612e77908490613761565b9091555050505050505050565b600080836001600160a01b031683604051612e9f91906137a4565b6000604051808303816000865af19150503d8060008114612edc576040519150601f19603f3d011682016040523d82523d6000602084013e612ee1565b606091505b50909250905081612ef6573d6000803e3d6000fd5b80511580612f13575080806020019051810190612f1391906137c0565b6111805760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c4544000000000000000000006044820152606401610a5a565b6001600160a01b0381166000908152600e60205260408120612f8190846131f2565b905042811561305d576001600160a01b0383166000908152600b6020908152604080832087845290915281208054879290612fbd90849061370e565b90915550506001600160a01b0383166000818152600c60209081526040808320888452825280832054938352600d825280832088845290915290205461300891889184918891613321565b6001600160a01b0384166000818152600d60209081526040808320898452825280832094909455918152600c8252828120878252909152908120805488929061305290849061370e565b909155506130cd9050565b61306781856132f5565b6001600160a01b0384166000818152600d60209081526040808320898452825280832094909455828252600c815283822088835281528382208a9055828252600b81528382208883528152838220899055918152600e909152206130cb90856132e9565b505b505050505050565b60008260000182815481106130ec576130ec61378e565b9060005260206000200154905092915050565b600081815260018301602052604081205480156131e8576000613123600183613761565b855490915060009061313790600190613761565b905081811461319c5760008660000182815481106131575761315761378e565b906000526020600020015490508087600001848154811061317a5761317a61378e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806131ad576131ad6137e2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610886565b6000915050610886565b6000818152600183016020526040812054151561126b565b6001600160a01b0382166132605760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a5a565b8060026000828254613272919061370e565b90915550506001600160a01b0382166000908152602081905260408120805483929061329f90849061370e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061126b83836133ba565b60006133056361cf8b7083613761565b61330f8484613761565b61126190670de0b6b3a76400006136ef565b6000670de0b6b3a7640000613336848861370e565b61334087876132f5565b61334a90896136ef565b61335485876136ef565b61335e919061370e565b613368919061373f565b613372919061373f565b9695505050505050565b6000670de0b6b3a76400008361339287866132f5565b61339c8787613761565b6133a691906136ef565b6133b085886136ef565b61099a919061370e565b600081815260018301602052604081205461340157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610886565b506000610886565b80356001600160a01b038116811461342057600080fd5b919050565b6000806040838503121561343857600080fd5b8235915061344860208401613409565b90509250929050565b60005b8381101561346c578181015183820152602001613454565b838111156111805750506000910152565b602081526000825180602084015261349c816040850160208701613451565b601f01601f19169190910160400192915050565b600080604083850312156134c357600080fd5b6134cc83613409565b946020939093013593505050565b6000806000606084860312156134ef57600080fd5b6134f884613409565b925061350660208501613409565b9150604084013590509250925092565b6000806040838503121561352957600080fd5b50508035926020909101359150565b60006020828403121561354a57600080fd5b5035919050565b60006020828403121561356357600080fd5b61126b82613409565b6020808252825182820181905260009190848201906040850190845b818110156135a457835183529284019291840191600101613588565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613607578151805185528681015187860152858101518686015260609081015190850152608090930192908501906001016135cd565b5091979650505050505050565b60008060006060848603121561362957600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561365357600080fd5b61365c83613409565b915061344860208401613409565b60008060006060848603121561367f57600080fd5b833592506020840135915061369660408501613409565b90509250925092565b600181811c908216806136b357607f821691505b6020821081036136d357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613709576137096136d9565b500290565b60008219821115613721576137216136d9565b500190565b600060018201613738576137386136d9565b5060010190565b60008261375c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613773576137736136d9565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082516137b6818460208701613451565b9190910192915050565b6000602082840312156137d257600080fd5b8151801515811461126b57600080fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122031e3e73b749bd66645071d531d4b18764a2691d42692770d5c8baed6350cca2d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103415760003560e01c806376b15a57116101bd578063af62fe0e116100f9578063d982523f116100a2578063ed8732711161007c578063ed87327114610751578063ee00ef3a14610764578063f2fde38b1461076c578063f4da99c71461077f57600080fd5b8063d982523f146106fd578063dd19171914610710578063dd62ed3e1461071857600080fd5b8063c84de300116100d3578063c84de300146106c4578063d08a12ff146106d7578063d2713324146106ea57600080fd5b8063af62fe0e14610644578063bf201c7f1461066f578063c1917a5a146106a457600080fd5b8063a25b39b711610166578063a8a4a37611610140578063a8a4a3761461060b578063a9059cbb1461061e578063aaf5eb6814610631578063ae6ef65f1461063b57600080fd5b8063a25b39b7146105b9578063a457c2d7146105c2578063a650adbd146105d557600080fd5b8063853828b611610197578063853828b6146105935780638da5cb5b1461059b57806395d89b41146105b157600080fd5b806376b15a571461054d57806379c1d6641461056d57806379cc67901461058057600080fd5b806338b4321b1161028c5780635b51c3081161023557806369edaf341161020f57806369edaf34146104de57806370a0823114610509578063715018a61461053257806373426cff1461053a57600080fd5b80635b51c308146104af5780635b7d8f05146104b857806365fc3873146104cb57600080fd5b8063441a3e7011610266578063441a3e701461047e578063478dc5ca146104915780635312ea8e1461049c57600080fd5b806338b4321b14610445578063395093511461045857806342966c681461046b57600080fd5b80631767c433116102ee57806323b872dd116102c857806323b872dd1461040a578063308097b21461041d578063313ce5671461043057600080fd5b80631767c433146103f057806318160ddd146103f95780632060176b1461040157600080fd5b80630e44e39e1161031f5780630e44e39e1461039c5780630f45cc81146103bd5780630f51c09c146103e857600080fd5b8063063da9df1461034657806306fdde031461035b578063095ea7b314610379575b600080fd5b610359610354366004613425565b6107aa565b005b6103636107e3565b604051610370919061347d565b60405180910390f35b61038c6103873660046134b0565b610875565b6040519015158152602001610370565b6103af6103aa3660046134b0565b61088c565b604051908152602001610370565b6007546103d0906001600160a01b031681565b6040516001600160a01b039091168152602001610370565b6103af600181565b6103af61044781565b6002546103af565b6103af61c35081565b61038c6104183660046134da565b6109b7565b6008546103d0906001600160a01b031681565b60055460405160ff9091168152602001610370565b6103af610453366004613516565b610a7b565b61038c6104663660046134b0565b610ad5565b610359610479366004613538565b610b11565b61035961048c366004613516565b610b1e565b6103af6361cf8b7081565b6103596104aa366004613538565b610dde565b6103af610e1081565b6103596104c6366004613551565b610fa3565b6103596104d9366004613516565b611064565b6103af6104ec3660046134b0565b600c60209081526000928352604080842090915290825290205481565b6103af610517366004613551565b6001600160a01b031660009081526020819052604090205490565b610359611186565b6103af610548366004613516565b611242565b61056061055b366004613551565b611272565b604051610370919061356c565b6103af61057b366004613551565b61136c565b61035961058e3660046134b0565b611438565b6103596114d2565b60055461010090046001600160a01b03166103d0565b610363611663565b6103af60095481565b61038c6105d03660046134b0565b611672565b6103af6105e33660046134b0565b6001600160a01b03919091166000908152600c60209081526040808320938352929052205490565b610359610619366004613538565b611723565b61038c61062c3660046134b0565b611807565b6103af620186a081565b6103af600a5481565b6103af6106523660046134b0565b600d60209081526000928352604080842090915290825290205481565b6103af61067d3660046134b0565b6001600160a01b039091166000908152600b60209081526040808320938352929052205490565b6106b76106b2366004613551565b611814565b60405161037091906135b0565b6103596106d2366004613516565b61199f565b6103596106e5366004613538565b611a00565b6103af6106f8366004613516565b611a92565b61035961070b366004613614565b611abb565b610359611b8d565b6103af610726366004613640565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61035961075f36600461366a565b611d23565b6103af611db2565b61035961077a366004613551565b611dc4565b6103af61078d3660046134b0565b600b60209081526000928352604080842090915290825290205481565b336000818152600b60209081526040808320868452909152902054906107d39030908484611f13565b6107de338385611fc4565b505050565b6060600380546107f29061369f565b80601f016020809104026020016040519081016040528092919081815260200182805461081e9061369f565b801561086b5780601f106108405761010080835404028352916020019161086b565b820191906000526020600020905b81548152906001019060200180831161084e57829003601f168201915b5050505050905090565b6000610882338484612069565b5060015b92915050565b6001600160a01b0382166000908152600e6020526040812081906108af906121c1565b9050600080925060005b82811015610977576001600160a01b0386166000908152600e602052604081206108e390836121cb565b6001600160a01b0388166000818152600d60209081526040808320858452825280832054938352600c8252808320858452909152902054919250610926916136ef565b610930908661370e565b6001600160a01b0388166000908152600c60209081526040808320858452909152902054909550610961908461370e565b925050808061096f90613726565b9150506108b9565b50670de0b6b3a7640000818061098d87876136ef565b11610998578561099a565b825b6109a4919061373f565b6109ae919061373f565b95945050505050565b60006109c48484846121d7565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610a635760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a708533858403612069565b506001949350505050565b600042808311610a8f576000915050610886565b6000610a9b8285613761565b9050610aac610447620151806136ef565b8110610abc578492505050610886565b610acb610447620151806136ef565b6109a482876136ef565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610882918590610b0c90869061370e565b612069565b610b1b33826123ee565b50565b600654600114610b595760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055338152600c602090815260408083208584529091529020544281610bc65760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610a5a565b83811015610c165760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e277420657870697265000000000000000000006044820152606401610a5a565b82821015610c665760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e74206c6f636b6564000000000000000000000000006044820152606401610a5a565b818310610d0e57336000818152600c602090815260408083208884528252808320839055838352600d8252808320888452909152812055610cc2905b336000908152600b602090815260408083208984529091529020546123ee565b336000818152600b602090815260408083208884529091528120819055610d08918691600e915b6001600160a01b03168152602081019190915260400160002090612573565b50610d81565b336000908152600c6020908152604080832087845290915281208054859290610d38908490613761565b90915550610d47905033610ca2565b610d518385611a92565b336000908152600b6020908152604080832088845290915281208054909190610d7b908490613761565b90915550505b610d98336007546001600160a01b0316908561257f565b604080518481526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505060016006555050565b600654600114610e195760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055338152600c602090815260408083208484529091529020544281610e865760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610a5a565b82811015610ec5576000620186a0600a5484610ea291906136ef565b610eac919061373f565b9050610eb7816125c8565b610ec18184613761565b9250505b336000818152600c602090815260408083208784528252808320839055838352600d8252808320878452909152812055610f1a905b336000908152600b602090815260408083208884529091529020546123ee565b336000818152600b602090815260408083208784529091528120819055610f45918591600e91610ce9565b50610f5e335b6007546001600160a01b0316908461257f565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25050600160065550565b60055461010090046001600160a01b031633146110025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2541601c97bce42b47813f2be715ba4eb0a571f2aafaf35cda2054137d9a79af90600090a250565b4260006110718284613761565b90506009548410156110c55760405162461bcd60e51b815260206004820152601460248201527f6c657373207468616e206d696e20616d6f756e740000000000000000000000006044820152606401610a5a565b610e108110156111175760405162461bcd60e51b815260206004820152601460248201527f53686f72746572207468616e204d494e54494d450000000000000000000000006044820152606401610a5a565b611126610447620151806136ef565b8111156111755760405162461bcd60e51b815260206004820152601360248201527f4c6f6e676572207468616e204d415854494d45000000000000000000000000006044820152606401610a5a565b611180338585612669565b50505050565b60055461010090046001600160a01b031633146111e55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b60006104478210611254575081610886565b61044761126183856136ef565b61126b919061373f565b9392505050565b6001600160a01b0381166000908152600e6020526040812060609190611297906121c1565b90508067ffffffffffffffff8111156112b2576112b2613778565b6040519080825280602002602001820160405280156112db578160200160208202803683370190505b50915060005b81811015611365576001600160a01b0384166000908152600e6020526040812061130b90836121cb565b6001600160a01b0386166000908152600b602090815260408083208484529091529020548551919250908590849081106113475761134761378e565b6020908102919091010152508061135d81613726565b9150506112e1565b5050919050565b6001600160a01b0381166000908152600e60205260408120819061138f906121c1565b90506000915060005b81811015611425576001600160a01b0384166000908152600e602052604081206113c290836121cb565b6001600160a01b0386166000818152600d60209081526040808320858452825280832054938352600c8252808320858452909152902054919250611405916136ef565b61140f908561370e565b935050808061141d90613726565b915050611398565b5061126b670de0b6b3a76400008361373f565b60006114448333610726565b9050818110156114bb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6114c88333848403612069565b6107de83836123ee565b60065460011461150d5760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055611541600e82335b6001600160a01b03166001600160a01b031681526020019081526020016000206121c1565b905060005b8181101561165a57600061157882600e83335b6001600160a01b031681526020810191909152604001600020906121cb565b336000908152600c602090815260408083208484529091529020549091504281158015906115a65750828110155b1561164457336000818152600c602090815260408083208784528252808320839055838352600d82528083208784529091528120556115e490610efa565b336000818152600b6020908152604080832087845290915281205561160890610f4b565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25b505050808061165290613726565b915050611546565b50506001600655565b6060600480546107f29061369f565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561170c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6117193385858403612069565b5060019392505050565b60055461010090046001600160a01b031633146117825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b61c3508111156117d45760405162461bcd60e51b815260206004820152601e60248201527f7769746864726177616c2070656e616c747920697320746f6f206869676800006044820152606401610a5a565b600a81905560405181907fa7d10353d34f5fe96bad91fa358f55fbea8ad6ee0d30924022d2b58e77f476e390600090a250565b60006108823384846121d7565b6001600160a01b0381166000908152600e6020526040812060609190611839906121c1565b90508067ffffffffffffffff81111561185457611854613778565b6040519080825280602002602001820160405280156118b057816020015b61189d6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816118725790505b50915060005b81811015611365576001600160a01b0384166000908152600e602052604081206118e090836121cb565b604080516080810182526001600160a01b0388166000818152600c602090815284822086835280825285832054808652828601889052848452600b835286842088855283528684205486880152938352600d825285832087845282529490912054939052929350916060830191670de0b6b3a76400009161196191906136ef565b61196b919061373f565b8152508483815181106119805761198061378e565b602002602001018190525050808061199790613726565b9150506118b6565b6009548210156119f15760405162461bcd60e51b815260206004820152601460248201527f6c657373207468616e206d696e20616d6f756e740000000000000000000000006044820152606401610a5a565b6119fc338383612821565b5050565b60055461010090046001600160a01b03163314611a5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b600981905560405181907f9a8dc7fb9d13b0f5acaf673226d570d31ec15d8a813fceced1eb36ad11afebc590600090a250565b6000611aa3610447620151806136ef565b611ab16361cf8b7084613761565b61126190856136ef565b426000611ac88284613761565b9050610e10811015611b1c5760405162461bcd60e51b815260206004820152601b60248201527f566f74696e67206c6f636b2063616e204d494e54494d45206d696e00000000006044820152606401610a5a565b611b2b610447620151806136ef565b811115611b7a5760405162461bcd60e51b815260206004820152601b60248201527f566f74696e67206c6f636b2063616e204d415854494d45206d617800000000006044820152606401610a5a565b611b86338686866129ea565b5050505050565b600654600114611bc85760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055611bdb600e823361151c565b905060005b8181101561165a576000611bf782600e8333611559565b336000908152600c60209081526040808320848452909152902054909150428115611d0d5782811015611c74576000620186a0600a5484611c3891906136ef565b611c42919061373f565b9050611c4d816125c8565b611c578184613761565b336000908152600c60209081526040808320888452909152902055505b336000818152600c602090815260408083208784528252808320839055838352600d8252808320878452909152812055611cad90610ca2565b336000818152600b60209081526040808320878452909152812055611cd190610f4b565b604080518381526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a25b5050508080611d1b90613726565b915050611be0565b336000908152600c60209081526040808320858452909152812054611d5085670de0b6b3a76400006136ef565b611d5a919061373f565b336000908152600b6020908152604080832087845290915281205491925090670de0b6b3a764000090611d8d90846136ef565b611d97919061373f565b9050611da530338184611f13565b611b863386838787612d8c565b611dc1610447620151806136ef565b81565b60055461010090046001600160a01b03163314611e235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a5a565b6001600160a01b038116611e9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a5a565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526111809085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e84565b6001600160a01b0383166000818152600c60209081526040808320858452825280832054938352600b825280832085845290915290205461200791908385612f5f565b6001600160a01b0383166000818152600c602090815260408083208584528252808320839055838352600b82528083208584528252808320839055838352600d82528083208584528252808320839055928252600e9052206111809082612573565b6001600160a01b0383166120e45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0382166121605760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610886825490565b600061126b83836130d5565b6001600160a01b0383166122535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0382166122cf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383166000908152602081905260409020548181101561235e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061239590849061370e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123e191815260200190565b60405180910390a3611180565b6001600160a01b03821661246a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b038216600090815260208190526040902054818110156124f95760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610a5a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612528908490613761565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600061126b83836130ff565b6040516001600160a01b0383166024820152604481018290526107de9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611f60565b6008546001600160a01b0316156125f657600854600754610b1b916001600160a01b0391821691168361257f565b6007546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561265557600080fd5b505af1158015611b86573d6000803e3d6000fd5b6006546001146126a45760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b600060068190556001600160a01b0384168152600e602052604090206126ca90826131f2565b156127175760405162461bcd60e51b815260206004820152600f60248201527f706f736974696f6e2065786973747300000000000000000000000000000000006044820152606401610a5a565b60006127238383611a92565b90506000811161276a5760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b6001600160a01b038085166000908152600c6020908152604080832086845290915290208490556007546127a19116853086611f13565b6127ab848261320a565b6001600160a01b0384166000818152600b602090815260408083208684528252808320859055928252600e9052206127e390836132e9565b506127ee42836132f5565b6001600160a01b039094166000908152600d60209081526040808320948352939052919091209290925550506001600655565b60065460011461285c5760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b6000600681905561286d8383611a92565b6001600160a01b0385166000908152600d6020908152604080832086845290915290205490915042906128a7908590839086908390613321565b6001600160a01b0386166000818152600d60209081526040808320888452825280832094909455918152600c825282812086825290915290812080548692906128f190849061370e565b9091555050816129385760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b612950336007546001600160a01b0316903087611f13565b61295a858361320a565b6001600160a01b0385166000908152600b602090815260408083208684529091528120805484929061298d90849061370e565b909155505060408051858152602081018590529081018290526001600160a01b038616907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a250506001600655505050565b600654600114612a255760405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606401610a5a565b60006006819055612a368484611a92565b90506000612a448584611a92565b6001600160a01b0387166000818152600c60209081526040808320898452825280832054938352600e9091529020919250904290612a8290866131f2565b15612b5a576001600160a01b0388166000818152600c60209081526040808320898452825280832054938352600d8252808320898452909152902054612acd91899184918991613321565b6001600160a01b0389166000818152600d602090815260408083208a8452825280832094909455918152600c82528281208882529091529081208054899290612b1790849061370e565b90915550506001600160a01b0388166000908152600b6020908152604080832088845290915281208054859290612b4f90849061370e565b90915550612bf39050565b6001600160a01b0388166000908152600d60209081526040808320898452909152902054612b8d9082908890889061337c565b6001600160a01b0389166000818152600d602090815260408083208a8452825280832094909455828252600c815283822089835281528382208b9055828252600b81528382208983528152838220879055918152600e90915220612bf190866132e9565b505b818703612c62576001600160a01b0388166000818152600c602090815260408083208a84528252808320839055838352600b82528083208a84528252808320839055838352600d82528083208a84528252808320839055928252600e905220612c5c9087612573565b50612cd3565b6001600160a01b0388166000908152600c6020908152604080832089845290915281208054899290612c95908490613761565b90915550506001600160a01b0388166000908152600b6020908152604080832089845290915281208054869290612ccd908490613761565b90915550505b6000612cdf8585613761565b905060008111612d265760405162461bcd60e51b81526020600482015260126024820152714e6f2062656e6566697420746f206c6f636b60701b6044820152606401610a5a565b612d30898261320a565b60408051898152602081018890529081018390526001600160a01b038a16907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a25050600160065550505050505050565b6001600160a01b0385166000908152600c6020908152604080832085845290915290205480851115612e005760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742066756e647320696e204c6f636b0000000000006044820152606401610a5a565b612e0c85858585612f5f565b6001600160a01b0386166000908152600c6020908152604080832086845290915281208054879290612e3f908490613761565b90915550506001600160a01b0386166000908152600b6020908152604080832086845290915281208054869290612e77908490613761565b9091555050505050505050565b600080836001600160a01b031683604051612e9f91906137a4565b6000604051808303816000865af19150503d8060008114612edc576040519150601f19603f3d011682016040523d82523d6000602084013e612ee1565b606091505b50909250905081612ef6573d6000803e3d6000fd5b80511580612f13575080806020019051810190612f1391906137c0565b6111805760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c4544000000000000000000006044820152606401610a5a565b6001600160a01b0381166000908152600e60205260408120612f8190846131f2565b905042811561305d576001600160a01b0383166000908152600b6020908152604080832087845290915281208054879290612fbd90849061370e565b90915550506001600160a01b0383166000818152600c60209081526040808320888452825280832054938352600d825280832088845290915290205461300891889184918891613321565b6001600160a01b0384166000818152600d60209081526040808320898452825280832094909455918152600c8252828120878252909152908120805488929061305290849061370e565b909155506130cd9050565b61306781856132f5565b6001600160a01b0384166000818152600d60209081526040808320898452825280832094909455828252600c815283822088835281528382208a9055828252600b81528382208883528152838220899055918152600e909152206130cb90856132e9565b505b505050505050565b60008260000182815481106130ec576130ec61378e565b9060005260206000200154905092915050565b600081815260018301602052604081205480156131e8576000613123600183613761565b855490915060009061313790600190613761565b905081811461319c5760008660000182815481106131575761315761378e565b906000526020600020015490508087600001848154811061317a5761317a61378e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806131ad576131ad6137e2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610886565b6000915050610886565b6000818152600183016020526040812054151561126b565b6001600160a01b0382166132605760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a5a565b8060026000828254613272919061370e565b90915550506001600160a01b0382166000908152602081905260408120805483929061329f90849061370e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061126b83836133ba565b60006133056361cf8b7083613761565b61330f8484613761565b61126190670de0b6b3a76400006136ef565b6000670de0b6b3a7640000613336848861370e565b61334087876132f5565b61334a90896136ef565b61335485876136ef565b61335e919061370e565b613368919061373f565b613372919061373f565b9695505050505050565b6000670de0b6b3a76400008361339287866132f5565b61339c8787613761565b6133a691906136ef565b6133b085886136ef565b61099a919061370e565b600081815260018301602052604081205461340157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610886565b506000610886565b80356001600160a01b038116811461342057600080fd5b919050565b6000806040838503121561343857600080fd5b8235915061344860208401613409565b90509250929050565b60005b8381101561346c578181015183820152602001613454565b838111156111805750506000910152565b602081526000825180602084015261349c816040850160208701613451565b601f01601f19169190910160400192915050565b600080604083850312156134c357600080fd5b6134cc83613409565b946020939093013593505050565b6000806000606084860312156134ef57600080fd5b6134f884613409565b925061350660208501613409565b9150604084013590509250925092565b6000806040838503121561352957600080fd5b50508035926020909101359150565b60006020828403121561354a57600080fd5b5035919050565b60006020828403121561356357600080fd5b61126b82613409565b6020808252825182820181905260009190848201906040850190845b818110156135a457835183529284019291840191600101613588565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613607578151805185528681015187860152858101518686015260609081015190850152608090930192908501906001016135cd565b5091979650505050505050565b60008060006060848603121561362957600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561365357600080fd5b61365c83613409565b915061344860208401613409565b60008060006060848603121561367f57600080fd5b833592506020840135915061369660408501613409565b90509250925092565b600181811c908216806136b357607f821691505b6020821081036136d357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613709576137096136d9565b500290565b60008219821115613721576137216136d9565b500190565b600060018201613738576137386136d9565b5060010190565b60008261375c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613773576137736136d9565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082516137b6818460208701613451565b9190910192915050565b6000602082840312156137d257600080fd5b8151801515811461126b57600080fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122031e3e73b749bd66645071d531d4b18764a2691d42692770d5c8baed6350cca2d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "create_lock(uint256,uint256)": {
        "params": {
          "_end": "expiry timestamp",
          "_value": "amount to lock"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "get_locks(address)": {
        "params": {
          "_addr": "user to get data of"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "increase_position(uint256,uint256)": {
        "params": {
          "_end": "maturity of the position to increase",
          "_value": "increase position for position in _end by value"
        }
      },
      "increase_time_to_maturity(uint256,uint256,uint256)": {
        "params": {
          "_amount": "amount to change the maturity for",
          "_end": "maturity",
          "_newEnd": "new maturity"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create_lock(uint256,uint256)": {
        "notice": "Create new lock with defined maturity time - That shall help standardizing these positions"
      },
      "get_locks(address)": {
        "notice": "Gets lock data for user"
      },
      "increase_position(uint256,uint256)": {
        "notice": "Function to increase position for given _end"
      },
      "increase_time_to_maturity(uint256,uint256,uint256)": {
        "notice": "Increases the maturity of _amount from _end to _newEnd"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8605,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8611,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8613,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8615,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8617,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 8619,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 10736,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 22,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "_unlocked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 51,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "lockedToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 53,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "penaltyCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 55,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "minLockedAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 57,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "earlyWithdrawPenaltyRate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 63,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "mintedForLock",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "lockedPosition",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 75,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "multipliers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 80,
        "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
        "label": "lockEnds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(UintSet)10409_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)10409_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)10409_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)9951_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9946,
            "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9950,
            "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)10409_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10408,
            "contract": "contracts/BloodRedRequiem.sol:BloodRedRequiem",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9951_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
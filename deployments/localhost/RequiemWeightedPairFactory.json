{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3c4b54e91758c2c54523f36636fa9fbae73b2f5d0b4f63f369d73c0260694d9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "3651007",
    "logsBloom": "0x
    "blockHash": "0xe342a365b9cf1aeec3956345e671c0450024b06cc221a77c5a219fee7fb9a705",
    "transactionHash": "0xa3c4b54e91758c2c54523f36636fa9fbae73b2f5d0b4f63f369d73c0260694d9",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "3651007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "solcInputHash": "8080409402e2dbf93c0674209476934c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/RequiemWeightedPairFactory_flat.sol\":\"RequiemWeightedPairFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/RequiemWeightedPairFactory_flat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: contracts/interfaces/IUniswapV2Callee.sol\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\\n// File: contracts/interfaces/ERC20/IERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n// File: contracts/libraries/UQ112x112.sol\\n\\npragma solidity >=0.8.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n  uint224 private constant Q112 = 2**112;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\\n// File: contracts/libraries/TransferHelper.sol\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x095ea7b3, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: APPROVE_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n  }\\n}\\n\\n// File: contracts/libraries/Math.sol\\n\\npragma solidity >=0.8.10;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x < y ? x : y;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\\n    if (y > 3) {\\n      z = y;\\n      uint256 x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\\n// File: contracts/interfaces/IRequiemFormula.sol\\n\\npragma solidity >=0.8.10;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n  function getReserveAndWeights(address pair, address tokenA)\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountIn);\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountIn);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view returns (bool);\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    returns (address tokenB);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view returns (uint256 amount);\\n}\\n\\n// File: contracts/interfaces/IRequiemSwap.sol\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n  // this funtion requires the correctly calculated amounts as input\\n  // the others are supposed to implement that calculation\\n  // no return value required since the amounts are already known\\n  function onSwap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut,\\n    address to\\n  ) external;\\n\\n  //\\n  function onSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address to\\n  ) external returns (uint256);\\n\\n  function onSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address to\\n  ) external returns (uint256);\\n\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n}\\n\\n// File: contracts/interfaces/IRequiemPairERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\n// File: contracts/RequiemPairERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable not-rely-on-time, no-inline-assembly, var-name-mixedcase, max-line-length\\n\\ncontract RequiemPairERC20 is IRequiemPairERC20 {\\n  string public constant name = \\\"Requiem Pair Liquidity Provider\\\";\\n  string public constant symbol = \\\"RPLP\\\";\\n  uint8 public constant decimals = 18;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) public balanceOf;\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  bytes32 public override DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant override PERMIT_TYPEHASH =\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint256) public nonces;\\n\\n  constructor() {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\n          \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        ),\\n        keccak256(bytes(name)),\\n        keccak256(bytes(\\\"1\\\")),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _mint(address to, uint256 value) internal {\\n    totalSupply += value;\\n    balanceOf[to] += value;\\n    emit Transfer(address(0), to, value);\\n  }\\n\\n  function _burn(address from, uint256 value) internal {\\n    balanceOf[from] -= value;\\n    totalSupply -= value;\\n    emit Transfer(from, address(0), value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  ) private {\\n    allowance[owner][spender] = value;\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) private {\\n    balanceOf[from] -= value;\\n    balanceOf[to] += value;\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function approve(address spender, uint256 value) external returns (bool) {\\n    _approve(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transfer(address to, uint256 value) external returns (bool) {\\n    _transfer(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool) {\\n    if (allowance[from][msg.sender] != type(uint256).max) {\\n      allowance[from][msg.sender] -= value;\\n    }\\n    _transfer(from, to, value);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        \\\"\\\\x19\\\\x01\\\",\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(\\n            PERMIT_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            nonces[owner]++,\\n            deadline\\n          )\\n        )\\n      )\\n    );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(\\n      recoveredAddress != address(0) && recoveredAddress == owner,\\n      \\\"RLP: IS\\\"\\n    );\\n    _approve(owner, spender, value);\\n  }\\n}\\n\\n// File: contracts/interfaces/IRequiemWeightedPair.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\\n// File: contracts/libraries/helpers/RequiemErrors.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n  /**\\n   * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n   * supported.\\n   */\\n  function _require(bool condition, uint256 errorCode) internal pure {\\n    if (!condition) RequiemErrors._revert(errorCode);\\n  }\\n\\n  /**\\n   * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n   */\\n  function _revert(uint256 errorCode) internal pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'REQ#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n      // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n      // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n      // the '0' character.\\n\\n      let units := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let tenths := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n      // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n      // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n      // characters to it, each shifted by a multiple of 8.\\n      // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n      // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n      // array).\\n\\n      let revertReason := shl(\\n        200,\\n        add(\\n          0x52455123000000,\\n          add(add(units, shl(8, tenths)), shl(16, hundreds))\\n        )\\n      )\\n\\n      // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n      // message will have the following layout:\\n      // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n      // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n      // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n      mstore(\\n        0x0,\\n        0x08c379a000000000000000000000000000000000000000000000000000000000\\n      )\\n      // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n      mstore(\\n        0x04,\\n        0x0000000000000000000000000000000000000000000000000000000000000020\\n      )\\n      // The string length is fixed: 7 characters.\\n      mstore(0x24, 7)\\n      // Finally, the string itself is stored.\\n      mstore(0x44, revertReason)\\n\\n      // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n      // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n      revert(0, 100)\\n    }\\n  }\\n}\\n\\nlibrary Errors {\\n  // Math\\n  uint256 internal constant ADD_OVERFLOW = 0;\\n  uint256 internal constant SUB_OVERFLOW = 1;\\n  uint256 internal constant SUB_UNDERFLOW = 2;\\n  uint256 internal constant MUL_OVERFLOW = 3;\\n  uint256 internal constant ZERO_DIVISION = 4;\\n  uint256 internal constant DIV_INTERNAL = 5;\\n  uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n  uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n  uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n  uint256 internal constant INVALID_EXPONENT = 9;\\n\\n  // Input\\n  uint256 internal constant OUT_OF_BOUNDS = 100;\\n  uint256 internal constant UNSORTED_ARRAY = 101;\\n  uint256 internal constant UNSORTED_TOKENS = 102;\\n  uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n  uint256 internal constant ZERO_TOKEN = 104;\\n\\n  // Shared pools\\n  uint256 internal constant MIN_TOKENS = 200;\\n  uint256 internal constant MAX_TOKENS = 201;\\n  uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n  uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n  uint256 internal constant MINIMUM_BPT = 204;\\n  uint256 internal constant CALLER_NOT_VAULT = 205;\\n  uint256 internal constant UNINITIALIZED = 206;\\n  uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n  uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n  uint256 internal constant EXPIRED_PERMIT = 209;\\n  uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n  // Pools\\n  uint256 internal constant MIN_AMP = 300;\\n  uint256 internal constant MAX_AMP = 301;\\n  uint256 internal constant MIN_WEIGHT = 302;\\n  uint256 internal constant MAX_STABLE_TOKENS = 303;\\n  uint256 internal constant MAX_IN_RATIO = 304;\\n  uint256 internal constant MAX_OUT_RATIO = 305;\\n  uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n  uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n  uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n  uint256 internal constant INVALID_TOKEN = 309;\\n  uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n  uint256 internal constant ZERO_INVARIANT = 311;\\n  uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n  uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n  uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n  uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n  uint256 internal constant ORACLE_BAD_SECS = 316;\\n  uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n  uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n  uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n  uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n  uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n  uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n  uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n  uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n  uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n  uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n  uint256 internal constant SWAPS_DISABLED = 327;\\n  uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n  uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n  uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n  uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n  uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n  uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n  uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n  uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n  uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n  uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n  uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n  uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n  uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n  uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n  uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n  // Lib\\n  uint256 internal constant REENTRANCY = 400;\\n  uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n  uint256 internal constant PAUSED = 402;\\n  uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n  uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n  uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n  uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n  uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n  uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n  uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n  uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n  uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n  uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n  uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n  uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n  uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n  uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n  uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n  uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n  uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n  uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n  uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n  uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n  uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n  uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n  uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n  uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n  uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n  uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n  uint256 internal constant NOT_PAUSED = 431;\\n\\n  // Vault\\n  uint256 internal constant INVALID_POOL_ID = 500;\\n  uint256 internal constant CALLER_NOT_POOL = 501;\\n  uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n  uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n  uint256 internal constant INVALID_SIGNATURE = 504;\\n  uint256 internal constant EXIT_BELOW_MIN = 505;\\n  uint256 internal constant JOIN_ABOVE_MAX = 506;\\n  uint256 internal constant SWAP_LIMIT = 507;\\n  uint256 internal constant SWAP_DEADLINE = 508;\\n  uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n  uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n  uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n  uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n  uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n  uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n  uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n  uint256 internal constant INSUFFICIENT_ETH = 516;\\n  uint256 internal constant UNALLOCATED_ETH = 517;\\n  uint256 internal constant ETH_TRANSFER = 518;\\n  uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n  uint256 internal constant TOKENS_MISMATCH = 520;\\n  uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n  uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n  uint256 internal constant TOKENS_ALREADY_SET = 523;\\n  uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n  uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n  uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n  uint256 internal constant POOL_NO_TOKENS = 527;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n  // Fees\\n  uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n  uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\\n// File: contracts/libraries/EnumerableSet.sol\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode\\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n  // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n  struct AddressSet {\\n    // Storage of set values\\n    address[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(address => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    if (!contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // The swap is only necessary if we're not removing the last element\\n      if (toDeleteIndex != lastIndex) {\\n        address lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n    return unchecked_at(set, index);\\n  }\\n\\n  /**\\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n   * than {length}). O(1).\\n   *\\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n   * within bounds.\\n   */\\n  function unchecked_at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return set._values[index];\\n  }\\n\\n  function rawIndexOf(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return set._indexes[value] - 1;\\n  }\\n\\n  struct Bytes32Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    if (!contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // The swap is only necessary if we're not removing the last element\\n      if (toDeleteIndex != lastIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n    return unchecked_at(set, index);\\n  }\\n\\n  /**\\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n   * than {length}). O(1).\\n   *\\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n   * within bounds.\\n   */\\n  function unchecked_at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return set._values[index];\\n  }\\n\\n  function rawIndexOf(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return set._indexes[value] - 1;\\n  }\\n}\\n\\n// File: contracts/interfaces/IRequiemWeightedPairFactory.sol\\n\\npragma solidity >=0.8.10;\\n\\ninterface IRequiemWeightedPairFactory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint32 tokenWeight0,\\n    uint32 swapFee,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function formula() external view returns (address);\\n\\n  function protocolFee() external view returns (uint256);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function isPair(address) external view returns (bool);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair);\\n\\n  function getWeightsAndSwapFee(address pair)\\n    external\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    );\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n\\n  function setProtocolFee(uint256) external;\\n}\\n\\n// File: contracts/RequiemWeightedPair.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls\\n\\ncontract RequiemWeightedPair is\\n  IRequiemSwap,\\n  IRequiemWeightedPair,\\n  RequiemPairERC20\\n{\\n  using UQ112x112 for uint224;\\n\\n  uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n  bytes4 private constant SELECTOR =\\n    bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n  address public factory;\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n  uint256 public price0CumulativeLast;\\n  uint256 public price1CumulativeLast;\\n  uint256 private unlocked = 1;\\n  address public formula;\\n\\n  uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n  uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n  uint32 private tokenWeight0;\\n  uint32 private tokenWeight1;\\n  uint32 private swapFee;\\n\\n  modifier lock() {\\n    require(unlocked == 1, \\\"REQLP: L\\\");\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves()\\n    public\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    )\\n  {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function getCollectedFees()\\n    public\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1)\\n  {\\n    _collectedFee0 = collectedFee0;\\n    _collectedFee1 = collectedFee1;\\n  }\\n\\n  function getTokenWeights()\\n    public\\n    view\\n    returns (uint32 _tokenWeight0, uint32 _tokenWeight1)\\n  {\\n    _tokenWeight0 = tokenWeight0;\\n    _tokenWeight1 = tokenWeight1;\\n  }\\n\\n  function getSwapFee() public view returns (uint32 _swapFee) {\\n    _swapFee = swapFee;\\n  }\\n\\n  function _safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) private {\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(SELECTOR, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"REQLP: TF\\\"\\n    );\\n  }\\n\\n  constructor() {\\n    factory = msg.sender;\\n  }\\n\\n  // called once by the factory at time of deployment\\n  function initialize(\\n    address _token0,\\n    address _token1,\\n    uint32 _tokenWeight0,\\n    uint32 _swapFee\\n  ) external {\\n    require(msg.sender == factory, \\\"REQLP: F\\\");\\n    // sufficient check\\n    token0 = _token0;\\n    token1 = _token1;\\n    tokenWeight0 = _tokenWeight0;\\n    tokenWeight1 = 100 - tokenWeight0;\\n    swapFee = _swapFee;\\n    formula = IRequiemWeightedPairFactory(factory).formula();\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(\\n    uint256 balance0,\\n    uint256 balance1,\\n    uint112 _reserve0,\\n    uint112 _reserve1\\n  ) private {\\n    uint32 _tokenWeight0 = tokenWeight0;\\n    require(\\n      balance0 * (100 - _tokenWeight0) <= type(uint112).max &&\\n        balance1 * _tokenWeight0 <= type(uint112).max,\\n      \\\"REQLP: O\\\"\\n    );\\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n    // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n      uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n      price0CumulativeLast +=\\n        uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) *\\n        timeElapsed;\\n      price1CumulativeLast +=\\n        uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) *\\n        timeElapsed;\\n    }\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n    private\\n    returns (bool feeOn)\\n  {\\n    address feeTo = IRequiemWeightedPairFactory(factory).feeTo();\\n    uint112 protocolFee = uint112(\\n      IRequiemWeightedPairFactory(factory).protocolFee()\\n    );\\n    feeOn = feeTo != address(0);\\n    (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n    if (\\n      protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)\\n    ) {\\n      uint32 _tokenWeight0 = tokenWeight0;\\n      uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n        totalSupply,\\n        _reserve0,\\n        _reserve1,\\n        _tokenWeight0,\\n        100 - _tokenWeight0,\\n        _collectedFee0 / protocolFee,\\n        _collectedFee1 / protocolFee\\n      );\\n      if (liquidity > 0) _mint(feeTo, liquidity);\\n    }\\n    if (_collectedFee0 > 0) collectedFee0 = 0;\\n    if (_collectedFee1 > 0) collectedFee1 = 0;\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint256 liquidity) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n    uint256 amount0 = balance0 - _reserve0;\\n    uint256 amount1 = balance1 - _reserve1;\\n    _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply;\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\n    if (_totalSupply == 0) {\\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n      _mint(address(0), MINIMUM_LIQUIDITY);\\n      // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = Math.min(\\n        (amount0 * _totalSupply) / _reserve0,\\n        (amount1 * _totalSupply) / _reserve1\\n      );\\n    }\\n    require(liquidity > 0, \\\"REQLP: ILM\\\");\\n    _mint(to, liquidity);\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function burn(address to)\\n    external\\n    lock\\n    returns (uint256 amount0, uint256 amount1)\\n  {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n    uint256 liquidity = balanceOf[address(this)];\\n    _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n    amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n    require(amount0 > 0 && amount1 > 0, \\\"REQLP: ILB\\\");\\n    _burn(address(this), liquidity);\\n    _safeTransfer(_token0, to, amount0);\\n    _safeTransfer(_token1, to, amount1);\\n    balance0 = IERC20(_token0).balanceOf(address(this));\\n    balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata\\n  ) external lock {\\n    _swap(amount0Out, amount1Out, to);\\n  }\\n\\n  //\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address,\\n    uint256 amountIn\\n  ) external view returns (uint256) {\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    return\\n      IRequiemFormula(formula).getAmountOut(\\n        amountIn,\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n  }\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address,\\n    uint256 amountOut\\n  ) external view returns (uint256) {\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    return\\n      IRequiemFormula(formula).getAmountIn(\\n        amountOut,\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(\\n      _token0,\\n      to,\\n      IERC20(_token0).balanceOf(address(this)) - reserve0\\n    );\\n    _safeTransfer(\\n      _token1,\\n      to,\\n      IERC20(_token1).balanceOf(address(this)) - reserve1\\n    );\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(\\n      IERC20(token0).balanceOf(address(this)),\\n      IERC20(token1).balanceOf(address(this)),\\n      reserve0,\\n      reserve1\\n    );\\n  }\\n\\n  // calculates output amount for given input and executes the respective trade\\n  // viable for use in multi swaps as it returns the output value\\n  // requires the amount in to be sent to this address beforehand\\n  function onSwapGivenIn(\\n    address tokenIn,\\n    address,\\n    uint256 amountIn,\\n    uint256,\\n    address to\\n  ) external override lock returns (uint256) {\\n    bool inToken0 = tokenIn == token0;\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = inToken0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    uint256 amountOut = IRequiemFormula(formula).getAmountOut(\\n      amountIn,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n    (uint256 amount0Out, uint256 amount1Out) = inToken0\\n      ? (uint256(0), amountOut)\\n      : (amountOut, uint256(0));\\n    return _swap(amount0Out, amount1Out, to);\\n  }\\n\\n  // calculates input amount for given output and executes the respective trade\\n  // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n  // requires the amount in to be sent to this address beforehand\\n  function onSwapGivenOut(\\n    address tokenIn,\\n    address,\\n    uint256 amountOut,\\n    uint256,\\n    address to\\n  ) external override lock returns (uint256) {\\n    bool inToken0 = tokenIn == token0;\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    uint256 amountIn = IRequiemFormula(formula).getAmountIn(\\n      amountOut,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n    (uint256 amount0Out, uint256 amount1Out) = inToken0\\n      ? (uint256(0), amountIn)\\n      : (amountIn, uint256(0));\\n    return _swap(amount0Out, amount1Out, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function _swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to\\n  ) internal returns (uint256) {\\n    require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n    uint112 _reserve0 = reserve0; // gas savings\\n    uint112 _reserve1 = reserve1; // gas savings\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\\n      ? balance0 - (_reserve0 - amount0Out)\\n      : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\\n      ? balance1 - (_reserve1 - amount1Out)\\n      : 0;\\n\\n    require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = balance0 * 10000;\\n      uint256 balance1Adjusted = balance1 * 10000;\\n      {\\n        // avoids stack too deep errors\\n        if (amount0In > 0) {\\n          uint256 amount0InFee = amount0In * swapFee;\\n          balance0Adjusted -= amount0InFee;\\n          collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n        }\\n        if (amount1In > 0) {\\n          uint256 amount1InFee = amount1In * swapFee;\\n          balance1Adjusted -= amount1InFee;\\n          collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n        }\\n        uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n        if (_tokenWeight0 == 50) {\\n          // gas savings for pair 50/50\\n          require(\\n            balance0Adjusted * balance1Adjusted >=\\n              uint256(_reserve0) * _reserve1 * (10000**2),\\n            \\\"REQLP: K\\\"\\n          );\\n        } else {\\n          require(\\n            IRequiemFormula(formula).ensureConstantValue(\\n              uint256(_reserve0) * 10000,\\n              uint256(_reserve1) * 10000,\\n              balance0Adjusted,\\n              balance1Adjusted,\\n              _tokenWeight0\\n            ),\\n            \\\"REQLP: K\\\"\\n          );\\n        }\\n      }\\n    }\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    return amount0Out > 0 ? amount0Out : amount1Out;\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function onSwap(\\n    address tokenIn,\\n    address,\\n    uint256,\\n    uint256 amountOut,\\n    address to\\n  ) external override lock {\\n    (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn\\n      ? (uint256(0), amountOut)\\n      : (amountOut, uint256(0));\\n    require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n    uint112 _reserve0 = reserve0; // gas savings\\n    uint112 _reserve1 = reserve1; // gas savings\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\\n      ? balance0 - (_reserve0 - amount0Out)\\n      : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\\n      ? balance1 - (_reserve1 - amount1Out)\\n      : 0;\\n\\n    require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = balance0 * 10000;\\n      uint256 balance1Adjusted = balance1 * 10000;\\n      {\\n        // avoids stack too deep errors\\n        if (amount0In > 0) {\\n          uint256 amount0InFee = amount0In * swapFee;\\n          balance0Adjusted -= amount0InFee;\\n          collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n        }\\n        if (amount1In > 0) {\\n          uint256 amount1InFee = amount1In * swapFee;\\n          balance1Adjusted -= amount1InFee;\\n          collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n        }\\n        uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n        if (_tokenWeight0 == 50) {\\n          // gas savings for pair 50/50\\n          require(\\n            balance0Adjusted * balance1Adjusted >=\\n              uint256(_reserve0) * _reserve1 * (10000**2),\\n            \\\"REQLP: K\\\"\\n          );\\n        } else {\\n          require(\\n            IRequiemFormula(formula).ensureConstantValue(\\n              uint256(_reserve0) * 10000,\\n              uint256(_reserve1) * 10000,\\n              balance0Adjusted,\\n              balance1Adjusted,\\n              _tokenWeight0\\n            ),\\n            \\\"REQLP: K\\\"\\n          );\\n        }\\n      }\\n    }\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n}\\n\\n// File: contracts/RequiemWeightedPairFactory.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemWeightedPairFactory is IRequiemWeightedPairFactory {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public feeTo;\\n  address public formula;\\n  uint256 public protocolFee;\\n  address public feeToSetter;\\n  bytes32 public constant INIT_CODE_HASH =\\n    keccak256(abi.encodePacked(type(RequiemWeightedPair).creationCode));\\n\\n  mapping(bytes32 => address) private _pairSalts;\\n  address[] public allPairs;\\n  mapping(address => uint64) private _pairs;\\n\\n  mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet))\\n    internal tokenPairs;\\n\\n  constructor(address _feeToSetter, address _formula) {\\n    feeToSetter = _feeToSetter;\\n    formula = _formula;\\n  }\\n\\n  function isPair(address b) external view returns (bool) {\\n    return _pairs[b] > 0;\\n  }\\n\\n  function allPairsLength() external view returns (uint256) {\\n    return allPairs.length;\\n  }\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair) {\\n    (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB\\n      ? (tokenA, tokenB, tokenWeightA)\\n      : (tokenB, tokenA, 100 - tokenWeightA);\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(token0, token1, tokenWeight0, swapFee)\\n    );\\n    pair = _pairSalts[salt];\\n  }\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair) {\\n    require(tokenA != tokenB, \\\"RLP: IA\\\");\\n    require(\\n      tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0,\\n      \\\"RLP: IW\\\"\\n    );\\n    // swap fee from [0.01% - 20%]\\n    require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: ISF\\\");\\n    (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB\\n      ? (tokenA, tokenB, tokenWeightA)\\n      : (tokenB, tokenA, 100 - tokenWeightA);\\n    require(token0 != address(0), \\\"RLP: ZA\\\");\\n    // single check is sufficient\\n    bytes memory bytecode = type(RequiemWeightedPair).creationCode;\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(token0, token1, tokenWeight0, swapFee)\\n    );\\n    require(_pairSalts[salt] == address(0), \\\"RLP: PE\\\");\\n    assembly {\\n      pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n    }\\n    IRequiemWeightedPair(pair).initialize(\\n      token0,\\n      token1,\\n      tokenWeight0,\\n      swapFee\\n    );\\n\\n    tokenPairs[IERC20(token0)][IERC20(token1)].add(pair);\\n    tokenPairs[IERC20(token1)][IERC20(token0)].add(pair);\\n\\n    _pairSalts[salt] = address(pair);\\n    allPairs.push(pair);\\n    uint64 weightAndFee = uint64(swapFee);\\n    weightAndFee |= uint64(tokenWeight0) << 32;\\n    _pairs[address(pair)] = weightAndFee;\\n    emit PairCreated(\\n      token0,\\n      token1,\\n      pair,\\n      tokenWeight0,\\n      swapFee,\\n      allPairs.length\\n    );\\n  }\\n\\n  function setFeeTo(address _feeTo) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n    feeTo = _feeTo;\\n  }\\n\\n  function setFeeToSetter(address _feeToSetter) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n    feeToSetter = _feeToSetter;\\n  }\\n\\n  function setProtocolFee(uint256 _protocolFee) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n    require(\\n      _protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000),\\n      \\\"RLP: IPF\\\"\\n    );\\n    protocolFee = _protocolFee;\\n  }\\n\\n  function getWeightsAndSwapFee(address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    uint64 weightAndFee = _pairs[pair];\\n    if (weightAndFee > 0) {\\n      swapFee = uint32(weightAndFee);\\n      tokenWeight0 = uint32(weightAndFee >> 32);\\n      tokenWeight1 = 100 - tokenWeight0;\\n    } else {\\n      // Default is 0.3%\\n      return (50, 50, 30);\\n    }\\n  }\\n\\n  function getPairs(IERC20 token0, IERC20 token1)\\n    external\\n    view\\n    returns (address[] memory _tokenPairs)\\n  {\\n    uint256 length = tokenPairs[token0][token1].length();\\n    _tokenPairs = new address[](length);\\n    for (uint256 i = 0; i < length; i++) {\\n      _tokenPairs[i] = tokenPairs[token0][token1].at(i);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfb072fb8e7b692191820c907c15b01e74f6e5f5cede503c9787a650e87ed09c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063574f2ba311610097578063bfd63f4d11610066578063bfd63f4d146101e5578063ca222979146101f8578063e5e31b1314610232578063f46901ed1461027757600080fd5b8063574f2ba3146101ac578063787dce3d146101b4578063a2e74af6146101c9578063b0e21e8a146101dc57600080fd5b806316093fad116100d357806316093fad146101505780631e3dd18b14610170578063257671f5146101835780634b75f54f1461019957600080fd5b8063017e7e58146100fa578063094b74151461012a57806314572adb1461013d575b600080fd5b60005461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60035461010d906001600160a01b031681565b61010d61014b366004610b84565b61028a565b61016361015e366004610bdc565b6106a4565b6040516101219190610c15565b61010d61017e366004610c62565b610790565b61018b6107ba565b604051908152602001610121565b60015461010d906001600160a01b031681565b60055461018b565b6101c76101c2366004610c62565b610804565b005b6101c76101d7366004610c7b565b610887565b61018b60025481565b61010d6101f3366004610b84565b6108d3565b61020b610206366004610c7b565b610962565b6040805163ffffffff94851681529284166020840152921691810191909152606001610121565b610267610240366004610c7b565b6001600160a01b031660009081526006602052604090205467ffffffffffffffff16151590565b6040519015158152602001610121565b6101c7610285366004610c7b565b6109cb565b6000836001600160a01b0316856001600160a01b031614156102dd5760405162461bcd60e51b8152602060048201526007602482015266524c503a20494160c81b60448201526064015b60405180910390fd5b60028363ffffffff16101580156102fb575060628363ffffffff1611155b8015610315575061030d600284610c98565b63ffffffff16155b61034b5760405162461bcd60e51b8152602060048201526007602482015266524c503a20495760c81b60448201526064016102d4565b60018263ffffffff161015801561036a57506107d08263ffffffff1611155b6103a15760405162461bcd60e51b81526020600482015260086024820152672926281d1024a9a360c11b60448201526064016102d4565b6000806000866001600160a01b0316886001600160a01b0316106103d15786886103cc886064610cdf565b6103d5565b8787875b919450925090506001600160a01b03831661041c5760405162461bcd60e51b8152602060048201526007602482015266524c503a205a4160c81b60448201526064016102d4565b60006040518060200161042e90610b46565b6020820181038252601f19601f82011660405250905060008484848960405160200161045d9493929190610d04565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104c55760405162461bcd60e51b8152602060048201526007602482015266524c503a20504560c81b60448201526064016102d4565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b5050506001600160a01b038087166000908152600760209081526040808320938916835292905220610579915087610a17565b506001600160a01b0380851660009081526007602090815260408083209389168352929052206105a99087610a17565b50600081815260046020908152604080832080546001600160a01b03199081166001600160a01b038c8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8e81168b881b67ffffffff0000000016811767ffffffffffffffff19909316831790935592548551978852928a16958701959095528584015260608501529051919287821692918916917f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289181900360800190a3505050505050949350505050565b6001600160a01b038281166000908152600760209081526040808320938516835292905220546060908067ffffffffffffffff8111156106e6576106e6610d4b565b60405190808252806020026020018201604052801561070f578160200160208202803683370190505b50915060005b81811015610788576001600160a01b03808616600090815260076020908152604080832093881683529290522061074c9082610a8b565b83828151811061075e5761075e610d61565b6001600160a01b03909216602092830291909101909101528061078081610d77565b915050610715565b505092915050565b600581815481106107a057600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516107c960208201610b46565b601f1982820381018352601f9091011660408190526107eb9190602001610d92565b6040516020818303038152906040528051906020012081565b6003546001600160a01b0316331461082e5760405162461bcd60e51b81526004016102d490610dcd565b80158061084b5750612710811015801561084b5750620186a08111155b6108825760405162461bcd60e51b81526020600482015260086024820152672926281d1024a82360c11b60448201526064016102d4565b600255565b6003546001600160a01b031633146108b15760405162461bcd60e51b81526004016102d490610dcd565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b0316106109045786886108ff886064610cdf565b610908565b8787875b9250925092506000838383886040516020016109279493929190610d04565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b0381166000908152600660205260408120548190819067ffffffffffffffff1680156109b15763ffffffff602082901c1693509050806109aa846064610cdf565b92506109c2565b603280601e935093509350506109c4565b505b9193909250565b6003546001600160a01b031633146109f55760405162461bcd60e51b81526004016102d490610dcd565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600183016020526040812054610a8157508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03861690811790915585549082528286019093526040902091909155610a85565b5060005b92915050565b8154600090610a9d9083106064610aae565b610aa78383610ac0565b9392505050565b81610abc57610abc81610af3565b5050565b6000826000018281548110610ad757610ad7610d61565b6000918252602090912001546001600160a01b03169392505050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b61321180610dee83390190565b6001600160a01b0381168114610b6857600080fd5b50565b803563ffffffff81168114610b7f57600080fd5b919050565b60008060008060808587031215610b9a57600080fd5b8435610ba581610b53565b93506020850135610bb581610b53565b9250610bc360408601610b6b565b9150610bd160608601610b6b565b905092959194509250565b60008060408385031215610bef57600080fd5b8235610bfa81610b53565b91506020830135610c0a81610b53565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610c565783516001600160a01b031683529284019291840191600101610c31565b50909695505050505050565b600060208284031215610c7457600080fd5b5035919050565b600060208284031215610c8d57600080fd5b8135610aa781610b53565b600063ffffffff80841680610cbd57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015610cfc57610cfc610cc9565b039392505050565b6bffffffffffffffffffffffff19606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d8b57610d8b610cc9565b5060010190565b6000825160005b81811015610db35760208186018101518583015201610d99565b81811115610dc2576000828501525b509190910192915050565b6020808252600690820152652926281d102360d11b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601f81527f5265717569656d2050616972204c69717569646974792050726f7669646572006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4d949f5c4c4f80d7bdbde28a36135fecf440532cf0f2bb46c4801ec3299b1062818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556130f68061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636a62784211610125578063cc56fd43116100ad578063d505accf1161007c578063d505accf14610539578063d54a8d181461054c578063dd62ed3e14610576578063e9255bae146105a1578063fff6cae9146105b457600080fd5b8063cc56fd43146104db578063d0f69579146104ee578063d21220a714610501578063d4cadf681461051457600080fd5b806395d89b41116100f457806395d89b4114610476578063a9059cbb14610499578063ba9a7a56146104ac578063bc25cf77146104b5578063c45a0155146104c857600080fd5b80636a627842146103fb57806370a082311461040e5780637ecebe001461042e57806389afcb441461044e57600080fd5b806330adf81f116101a85780633644e515116101775780633644e515146103ba5780634ac00e03146103c35780634b75f54f146103d65780635909c0d5146103e95780635a3d5493146103f257600080fd5b806330adf81f1461033c578063313ce5671461036357806332bfe4691461037d57806332fd5493146103a757600080fd5b80630dfe1681116101e45780630dfe1681146102d45780630e6d8bce146102ff57806318160ddd1461032057806323b872dd1461032957600080fd5b8063022c0d9f1461021657806306fdde031461022b5780630902f1ac1461027d578063095ea7b3146102b1575b600080fd5b610229610224366004612b5f565b6105bc565b005b6102676040518060400160405280601f81526020017f5265717569656d2050616972204c69717569646974792050726f76696465720081525081565b6040516102749190612c25565b60405180910390f35b610285610604565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610274565b6102c46102bf366004612c58565b61062e565b6040519015158152602001610274565b6006546102e7906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b61031261030d366004612c84565b610644565b604051908152602001610274565b61031260005481565b6102c4610337366004612ce3565b6107cd565b6103127f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61036b601281565b60405160ff9091168152602001610274565b600d54600e5460408051600160e01b90930463ffffffff9081168452909116602083015201610274565b6102296103b5366004612c84565b610847565b61031260035481565b6103126103d1366004612c84565b610e3b565b600c546102e7906001600160a01b031681565b61031260095481565b610312600a5481565b610312610409366004612d24565b610f47565b61031261041c366004612d24565b60016020526000908152604090205481565b61031261043c366004612d24565b60046020526000908152604090205481565b61046161045c366004612d24565b6111c0565b60408051928352602083019190915201610274565b61026760405180604001604052806004815260200163052504c560e41b81525081565b6102c46104a7366004612c58565b6114d5565b6103126103e881565b6102296104c3366004612d24565b6114e2565b6005546102e7906001600160a01b031681565b6103126104e9366004612ce3565b6115f5565b6102296104fc366004612d55565b611725565b6007546102e7906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff9091168152602001610274565b610229610547366004612dad565b61188c565b600d54604080516001600160701b038084168252600160701b909304909216602083015201610274565b610312610584366004612e24565b600260209081526000928352604080842090915290825290205481565b6103126105af366004612ce3565b611a84565b610229611b67565b600b546001146105e75760405162461bcd60e51b81526004016105de90612e5d565b60405180910390fd5b6000600b556105f7858585611c8b565b50506001600b5550505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061063b33848461223a565b50600192915050565b6000600b546001146106685760405162461bcd60e51b81526004016105de90612e5d565b6000600b8190556006546001600160a01b0388811691161490808080846106bc57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b9004166106ec565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163b19210b091610750918e918a918a918a918a91600160201b900463ffffffff1690600401612e7f565b602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190612eb3565b9050600080876107a3578260006107a7565b6000835b915091506107b682828c611c8b565b6001600b559e9d5050505050505050505050505050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610832576001600160a01b03841660009081526002602090815260408083203384529091528120805484929061082c908490612ee2565b90915550505b61083d84848461229c565b5060019392505050565b600b546001146108695760405162461bcd60e51b81526004016105de90612e5d565b6000600b81905560065481906001600160a01b0388811691161461088f57836000610893565b6000845b9150915060008211806108a65750600081115b6108df5760405162461bcd60e51b815260206004820152600a6024820152695245514c503a20494f4160b01b60448201526064016105de565b6008546001600160701b0380821691600160701b900416818410801561090d5750806001600160701b031683105b6109455760405162461bcd60e51b815260206004820152600960248201526814915453140e88125360ba1b60448201526064016105de565b60065460075460009182916001600160a01b039182169190811690891682148015906109835750806001600160a01b0316896001600160a01b031614155b6109bb5760405162461bcd60e51b815260206004820152600960248201526814915453140e88125560ba1b60448201526064016105de565b87156109cc576109cc828a8a61233d565b86156109dd576109dd818a8961233d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612eb3565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab09190612eb3565b92505050600086856001600160701b0316610acb9190612ee2565b8311610ad8576000610af5565b610aeb876001600160701b038716612ee2565b610af59084612ee2565b90506000610b0c876001600160701b038716612ee2565b8311610b19576000610b36565b610b2c876001600160701b038716612ee2565b610b369084612ee2565b90506000821180610b475750600081115b610b805760405162461bcd60e51b815260206004820152600a6024820152695245514c503a2049494160b01b60448201526064016105de565b6000610b8e85612710612ef9565b90506000610b9e85612710612ef9565b90508315610c0b57600e54600090610bc390600160201b900463ffffffff1686612ef9565b9050610bcf8184612ee2565b600d54909350610be99082906001600160701b0316612f18565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215610c8357600e54600090610c2e90600160201b900463ffffffff1685612ef9565b9050610c3a8183612ee2565b600d54909250610c5b908290600160701b90046001600160701b0316612f18565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610ced57610cb26001600160701b03808a16908b16612ef9565b610cc0906305f5e100612ef9565b610cca8385612ef9565b1015610ce85760405162461bcd60e51b81526004016105de90612f30565b610dc3565b600c546001600160a01b03166379c91b37610d136001600160701b038c16612710612ef9565b610d286001600160701b038c16612710612ef9565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da79190612f52565b610dc35760405162461bcd60e51b81526004016105de90612f30565b505050610dd284848888612474565b6040805183815260208101839052908101899052606081018890526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b54600114610e5f5760405162461bcd60e51b81526004016105de90612e5d565b6000600b8190556006546001600160a01b038881169116149080808084610eb357600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416610ee3565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163671a11b591610750918e918a918a918a918a91600160201b900463ffffffff1690600401612e7f565b6000600b54600114610f6b5760405162461bcd60e51b81526004016105de90612e5d565b6000600b81905580610f7b610604565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612eb3565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561103f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110639190612eb3565b9050600061107a6001600160701b03861684612ee2565b905060006110916001600160701b03861684612ee2565b905061109d86866126c3565b50600054806110d9576103e86110bb6110b68486612ef9565b61297f565b6110c59190612ee2565b97506110d460006103e86129ef565b611120565b61111d6001600160701b0388166110f08386612ef9565b6110fa9190612f8a565b6001600160701b03881661110e8486612ef9565b6111189190612f8a565b612a78565b97505b6000881161115d5760405162461bcd60e51b815260206004820152600a6024820152695245514c503a20494c4d60b01b60448201526064016105de565b61116789896129ef565b61117385858989612474565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146111e55760405162461bcd60e51b81526004016105de90612e5d565b6000600b819055806111f5610604565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190612eb3565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e19190612eb3565b306000908152600160205260409020549091506112fe87876126c3565b506000548061130d8584612ef9565b6113179190612f8a565b9950806113248484612ef9565b61132e9190612f8a565b985060008a1180156113405750600089115b6113795760405162461bcd60e51b815260206004820152600a6024820152692922a8a6281d1024a62160b11b60448201526064016105de565b6113833083612a90565b61138e868c8c61233d565b611399858c8b61233d565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190612eb3565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c9190612eb3565b925061147a84848a8a612474565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b600061063b33848461229c565b600b546001146115045760405162461bcd60e51b81526004016105de90612e5d565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916115a391849186916001600160701b03169083906370a08231906024015b602060405180830381865afa158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190612eb3565b61159e9190612ee2565b61233d565b6008546040516370a0823160e01b81523060048201526115eb9183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401611553565b50506001600b5550565b60065460009081908190819081906001600160a01b0389811691161461164857600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611678565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b0916116d8918a918991899189918991600160201b90910463ffffffff1690600401612e7f565b602060405180830381865afa1580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117199190612eb3565b98975050505050505050565b6005546001600160a01b0316331461176a5760405162461bcd60e51b81526020600482015260086024820152672922a8a6281d102360c11b60448201526064016105de565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff858116820292909217928390556117cd9204166064612f9e565b600e805463ffffffff848116600160201b0267ffffffffffffffff1990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118669190612fc3565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156118cb5760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b60448201526064016105de565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761191e83612fe0565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161199792919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611a02573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611a385750886001600160a01b0316816001600160a01b0316145b611a6e5760405162461bcd60e51b8152602060048201526007602482015266524c503a20495360c81b60448201526064016105de565b611a7989898961223a565b505050505050505050565b60065460009081908190819081906001600160a01b03898116911614611ad757600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611b07565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b5916116d8918a918991899189918991600160201b90910463ffffffff1690600401612e7f565b600b54600114611b895760405162461bcd60e51b81526004016105de90612e5d565b6000600b556006546040516370a0823160e01b8152306004820152611c84916001600160a01b0316906370a0823190602401602060405180830381865afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190612eb3565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c689190612eb3565b6008546001600160701b0380821691600160701b900416612474565b6001600b55565b600080841180611c9b5750600083115b611cd45760405162461bcd60e51b815260206004820152600a6024820152695245514c503a20494f4160b01b60448201526064016105de565b6008546001600160701b0380821691600160701b9004168186108015611d025750806001600160701b031685105b611d3a5760405162461bcd60e51b815260206004820152600960248201526814915453140e88125360ba1b60448201526064016105de565b60065460075460009182916001600160a01b03918216919081169088168214801590611d785750806001600160a01b0316886001600160a01b031614155b611db05760405162461bcd60e51b815260206004820152600960248201526814915453140e88125560ba1b60448201526064016105de565b8915611dc157611dc182898c61233d565b8815611dd257611dd281898b61233d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3a9190612eb3565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190612eb3565b92505050600088856001600160701b0316611ec09190612ee2565b8311611ecd576000611eea565b611ee0896001600160701b038716612ee2565b611eea9084612ee2565b90506000611f01896001600160701b038716612ee2565b8311611f0e576000611f2b565b611f21896001600160701b038716612ee2565b611f2b9084612ee2565b90506000821180611f3c5750600081115b611f755760405162461bcd60e51b815260206004820152600a6024820152695245514c503a2049494160b01b60448201526064016105de565b6000611f8385612710612ef9565b90506000611f9385612710612ef9565b9050831561200057600e54600090611fb890600160201b900463ffffffff1686612ef9565b9050611fc48184612ee2565b600d54909350611fde9082906001600160701b0316612f18565b600d80546001600160701b0319166001600160701b0392909216919091179055505b821561207857600e5460009061202390600160201b900463ffffffff1685612ef9565b905061202f8183612ee2565b600d54909250612050908290600160701b90046001600160701b0316612f18565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff1660328114156120e2576120a76001600160701b03808a16908b16612ef9565b6120b5906305f5e100612ef9565b6120bf8385612ef9565b10156120dd5760405162461bcd60e51b81526004016105de90612f30565b6121b8565b600c546001600160a01b03166379c91b376121086001600160701b038c16612710612ef9565b61211d6001600160701b038c16612710612ef9565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c9190612f52565b6121b85760405162461bcd60e51b81526004016105de90612f30565b5050506121c784848888612474565b60408051838152602081018390529081018b9052606081018a90526001600160a01b0389169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a1161222a578861222c565b895b9a9950505050505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040812080548392906122c4908490612ee2565b90915550506001600160a01b038216600090815260016020526040812080548392906122f1908490612f18565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161228f91815260200190565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916123c99190612ffb565b6000604051808303816000865af19150503d8060008114612406576040519150601f19603f3d011682016040523d82523d6000602084013e61240b565b606091505b50915091508180156124355750805115806124355750808060200190518101906124359190612f52565b61246d5760405162461bcd60e51b81526020600482015260096024820152682922a8a6281d102a2360b91b60448201526064016105de565b5050505050565b600d54600160e01b900463ffffffff166001600160701b03612497826064612f9e565b6124a79063ffffffff1687612ef9565b111580156124cb57506001600160701b036124c863ffffffff831686612ef9565b11155b6125025760405162461bcd60e51b81526020600482015260086024820152675245514c503a204f60c01b60448201526064016105de565b6000612512600160201b42613017565b60085490915060009061253290600160e01b900463ffffffff1683612f9e565b905060008163ffffffff1611801561255257506001600160701b03851615155b801561256657506001600160701b03841615155b1561262a576000612578846064612f9e565b6125889063ffffffff168761302b565b9050600061259c63ffffffff86168761302b565b90508263ffffffff166125c1836125b284612b13565b6001600160e01b031690612b32565b6001600160e01b03166125d49190612ef9565b600960008282546125e59190612f18565b909155505063ffffffff83166125fe826125b285612b13565b6001600160e01b03166126119190612ef9565b600a60008282546126229190612f18565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b03199095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273d9190612fc3565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b89190612eb3565b6001600160a01b0383161515935090506000806127e9600d546001600160701b0380821692600160701b9092041690565b915091506000836001600160701b03161180156128035750845b801561282b57506000826001600160701b0316118061282b57506000816001600160701b0316115b1561292b57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b86612869816064612f9e565b6128738c8c61305a565b61287d8d8c61305a565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa1580156128f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129169190612eb3565b905080156129285761292886826129ef565b50505b6001600160701b0382161561294b57600d80546001600160701b03191690555b6001600160701b0381161561297557600d80546dffffffffffffffffffffffffffff60701b191690555b5050505092915050565b600060038211156129e05750806000612999600283612f8a565b6129a4906001612f18565b90505b818110156129da579050806002816129bf8186612f8a565b6129c99190612f18565b6129d39190612f8a565b90506129a7565b50919050565b81156129ea575060015b919050565b80600080828254612a009190612f18565b90915550506001600160a01b03821660009081526001602052604081208054839290612a2d908490612f18565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310612a875781612a89565b825b9392505050565b6001600160a01b03821660009081526001602052604081208054839290612ab8908490612ee2565b9250508190555080600080828254612ad09190612ee2565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612a6c565b6000612b2c600160701b6001600160701b038416613080565b92915050565b6000612a896001600160701b038316846130a6565b6001600160a01b0381168114612b5c57600080fd5b50565b600080600080600060808688031215612b7757600080fd5b85359450602086013593506040860135612b9081612b47565b9250606086013567ffffffffffffffff80821115612bad57600080fd5b818801915088601f830112612bc157600080fd5b813581811115612bd057600080fd5b896020828501011115612be257600080fd5b9699959850939650602001949392505050565b60005b83811015612c10578181015183820152602001612bf8565b83811115612c1f576000848401525b50505050565b6020815260008251806020840152612c44816040850160208701612bf5565b601f01601f19169190910160400192915050565b60008060408385031215612c6b57600080fd5b8235612c7681612b47565b946020939093013593505050565b600080600080600060a08688031215612c9c57600080fd5b8535612ca781612b47565b94506020860135612cb781612b47565b935060408601359250606086013591506080860135612cd581612b47565b809150509295509295909350565b600080600060608486031215612cf857600080fd5b8335612d0381612b47565b92506020840135612d1381612b47565b929592945050506040919091013590565b600060208284031215612d3657600080fd5b8135612a8981612b47565b803563ffffffff811681146129ea57600080fd5b60008060008060808587031215612d6b57600080fd5b8435612d7681612b47565b93506020850135612d8681612b47565b9250612d9460408601612d41565b9150612da260608601612d41565b905092959194509250565b600080600080600080600060e0888a031215612dc857600080fd5b8735612dd381612b47565b96506020880135612de381612b47565b95506040880135945060608801359350608088013560ff81168114612e0757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612e3757600080fd5b8235612e4281612b47565b91506020830135612e5281612b47565b809150509250929050565b60208082526008908201526714915453140e881360c21b604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b600060208284031215612ec557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612ef457612ef4612ecc565b500390565b6000816000190483118215151615612f1357612f13612ecc565b500290565b60008219821115612f2b57612f2b612ecc565b500190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b600060208284031215612f6457600080fd5b81518015158114612a8957600080fd5b634e487b7160e01b600052601260045260246000fd5b600082612f9957612f99612f74565b500490565b600063ffffffff83811690831681811015612fbb57612fbb612ecc565b039392505050565b600060208284031215612fd557600080fd5b8151612a8981612b47565b6000600019821415612ff457612ff4612ecc565b5060010190565b6000825161300d818460208701612bf5565b9190910192915050565b60008261302657613026612f74565b500690565b60006001600160701b038083168185168183048111821515161561305157613051612ecc565b02949350505050565b60006001600160701b038084168061307457613074612f74565b92169190910492915050565b60006001600160e01b038281168482168115158284048211161561305157613051612ecc565b60006001600160e01b038381168061307457613074612f7456fea26469706673582212203a99cbcf827c98494095be1777728975380a354c47c73c62dc4bbd76426d33a464736f6c634300080a0033a2646970667358221220cc6fa6830c4b9598ce5bd481e5dfa34e5750198d01144de348bdd10cee8bfbe064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4059,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4061,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4063,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4065,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4080,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4083,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4087,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 4096,
        "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)90,t_mapping(t_contract(IERC20)90,t_struct(AddressSet)1719_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)90": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)90,t_mapping(t_contract(IERC20)90,t_struct(AddressSet)1719_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)90",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)90,t_struct(AddressSet)1719_storage)"
      },
      "t_mapping(t_contract(IERC20)90,t_struct(AddressSet)1719_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)90",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1719_storage"
      },
      "t_struct(AddressSet)1719_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1714,
            "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1718,
            "contract": "contracts/test/RequiemWeightedPairFactory_flat.sol:RequiemWeightedPairFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
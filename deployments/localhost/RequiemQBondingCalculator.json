{
  "address": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_REQT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "REQT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "markdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ac3194cf0a439b47b314e4a378a9a3a36fa8a76e7d5d0edf1fd0f478a42122d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
    "transactionIndex": 0,
    "gasUsed": "833560",
    "logsBloom": "0x
    "blockHash": "0x607b93913d5ee35d2457f717e84abed8dca1e18c41260f54f9c8245a65006a61",
    "transactionHash": "0x6ac3194cf0a439b47b314e4a378a9a3a36fa8a76e7d5d0edf1fd0f478a42122d",
    "logs": [],
    "blockNumber": 58,
    "cumulativeGasUsed": "833560",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00"
  ],
  "solcInputHash": "8e8c51f4a39062dc152d08c29090b263",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REQT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"REQT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"markdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Bonding calculator for weighted pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemQBondingCalculator.sol\":\"RequiemQBondingCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999999},\"remappings\":[]},\"sources\":{\"contracts/RequiemQBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\n\\n/**\\n * Bonding calculator for weighted pairs\\n */\\ncontract RequiemQBondingCalculator is IBondingCalculator {\\n  using FixedPoint for *;\\n\\n  address public immutable REQT;\\n\\n  constructor(address _REQT) {\\n    require(_REQT != address(0));\\n    REQT = _REQT;\\n  }\\n\\n  // calculates the liquidity value denominated in the provided token\\n  // uses the 0.1% inputAmount for that calculation\\n  function getTotalValue(address _pair) public view returns (uint256 _value) {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(_pair).getReserves();\\n\\n    _value = address(IRequiemPair(_pair).token0()) != REQT\\n      ? reserve0 +\\n        IRequiemSwap(_pair).calculateSwapGivenIn(\\n          REQT,\\n          IRequiemPair(_pair).token0(),\\n          reserve1 / 1000\\n        ) *\\n        reserve1\\n      : reserve1 +\\n        IRequiemSwap(_pair).calculateSwapGivenIn(\\n          REQT,\\n          IRequiemPair(_pair).token1(),\\n          reserve0 / 1000\\n        ) *\\n        reserve0;\\n  }\\n\\n  function valuation(address _pair, uint256 amount_)\\n    external\\n    view\\n    override\\n    returns (uint256 _value)\\n  {\\n    uint256 totalValue = getTotalValue(_pair);\\n    uint256 totalSupply = IRequiemPair(_pair).totalSupply();\\n\\n    _value =\\n      (totalValue *\\n        FixedPoint.fraction(amount_, totalSupply).decode112with18()) /\\n      1e18;\\n  }\\n\\n  function markdown(address _pair) external view returns (uint256) {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(_pair).getReserves();\\n\\n    uint256 reserve;\\n    if (IRequiemPair(_pair).token0() == REQT) {\\n      reserve = reserve1;\\n    } else {\\n      reserve = reserve0;\\n    }\\n    return\\n      (reserve * (2 * (10**IERC20(REQT).decimals()))) / (getTotalValue(_pair));\\n  }\\n}\\n\",\"keccak256\":\"0x03bb36a095bab277d705e7762ebe55c33ed0a972d5919f23dfa3a7738d93e654\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xf94b0c09044cca6e13c138fde5fb5234363dd1d533e217d66290ddfe8a7d6db2\",\"license\":\"MIT\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IBondingCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\",\"keccak256\":\"0x47e3060b5e76523d67b56a68192adeb6eaebb15bf678d71644c2281972acd5ba\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x4c6cbede01f2adab66096cbfa9f82596da0b22f70a745e95a0af2cd9f87d1714\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n  \\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4dff5daeaec9162e0d6b19125a902319decf650bedfb263439fd0a3435d21c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd8b750d1210acd08f60cd86d1260a77b9a427f0f347408f4cb487a7e76870044\",\"license\":\"MIT\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= type(uint144).max) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x05ec78f8e28d989f6257c20587a2dfce724091a26f26a9221e40564ed1d42300\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable no-inline-assembly, reason-string, max-line-length\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0xd5bc753893924032eb9430caa0ee49f71d98593dbfc61a10697b42fa02b7495b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ee5380380610ee583398101604081905261002f91610053565b6001600160a01b03811661004257600080fd5b6001600160a01b0316608052610083565b60006020828403121561006557600080fd5b81516001600160a01b038116811461007c57600080fd5b9392505050565b608051610e256100c0600039600081816056015281816101860152818161025b0152818161045c0152818161053b01526106a80152610e256000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302bb41e51461005157806332da80a3146100a25780634249719f146100c357806368637549146100d6575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100b56100b0366004610aec565b6100e9565b604051908152602001610099565b6100b56100d1366004610b09565b61031b565b6100b56100e4366004610aec565b6103c1565b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610b58565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610ba8565b73ffffffffffffffffffffffffffffffffffffffff16141561024d575080610250565b50815b610259856103c1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610bc5565b6102f390600a610d37565b6102fe906002610d46565b6103089083610d46565b6103129190610d83565b95945050505050565b600080610327846103c1565b905060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610dbe565b9050670de0b6b3a76400006103b76103b286846107f9565b6109bf565b6103089084610d46565b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610b58565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610ba8565b73ffffffffffffffffffffffffffffffffffffffff16141561068957818473ffffffffffffffffffffffffffffffffffffffff1663e9255bae7f00000000000000000000000000000000000000000000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610ba8565b6105d56103e888610d83565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190610dbe565b61067a9190610d46565b6106849082610dd7565b6107f1565b808473ffffffffffffffffffffffffffffffffffffffff1663e9255bae7f00000000000000000000000000000000000000000000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190610ba8565b6107426103e887610d83565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa1580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd9190610dbe565b6107e79190610d46565b6107f19083610dd7565b949350505050565b6040805160208101909152600081526000821161089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b826108b757506040805160208101909152600081526109b9565b71ffffffffffffffffffffffffffffffffffff831161099d5760006108e083607086901b610d83565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f7700006044820152606401610894565b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150506109b9565b60006108e0846e010000000000000000000000000000856109f4565b92915050565b80516000906109b9906612725dd1d243ab907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610d83565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610a4c5760008411610a4157600080fd5b508290049050610ac0565b808411610a5857600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ae957600080fd5b50565b600060208284031215610afe57600080fd5b8135610ac081610ac7565b60008060408385031215610b1c57600080fd5b8235610b2781610ac7565b946020939093013593505050565b80516dffffffffffffffffffffffffffff81168114610b5357600080fd5b919050565b600080600060608486031215610b6d57600080fd5b610b7684610b35565b9250610b8460208501610b35565b9150604084015163ffffffff81168114610b9d57600080fd5b809150509250925092565b600060208284031215610bba57600080fd5b8151610ac081610ac7565b600060208284031215610bd757600080fd5b815160ff81168114610ac057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610c7057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610c5657610c56610be8565b80851615610c6357918102915b93841c9390800290610c1c565b509250929050565b600082610c87575060016109b9565b81610c94575060006109b9565b8160018114610caa5760028114610cb457610cd0565b60019150506109b9565b60ff841115610cc557610cc5610be8565b50506001821b6109b9565b5060208310610133831016604e8410600b8410161715610cf3575081810a6109b9565b610cfd8383610c17565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d2f57610d2f610be8565b029392505050565b6000610ac060ff841683610c78565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7e57610d7e610be8565b500290565b600082610db9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610dd057600080fd5b5051919050565b60008219821115610dea57610dea610be8565b50019056fea2646970667358221220b9bb518c015d280d7d088fba85657bcf21621107558bb5c66140898358b16af764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806302bb41e51461005157806332da80a3146100a25780634249719f146100c357806368637549146100d6575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100b56100b0366004610aec565b6100e9565b604051908152602001610099565b6100b56100d1366004610b09565b61031b565b6100b56100e4366004610aec565b6103c1565b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610b58565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610ba8565b73ffffffffffffffffffffffffffffffffffffffff16141561024d575080610250565b50815b610259856103c1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610bc5565b6102f390600a610d37565b6102fe906002610d46565b6103089083610d46565b6103129190610d83565b95945050505050565b600080610327846103c1565b905060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610dbe565b9050670de0b6b3a76400006103b76103b286846107f9565b6109bf565b6103089084610d46565b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610b58565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610ba8565b73ffffffffffffffffffffffffffffffffffffffff16141561068957818473ffffffffffffffffffffffffffffffffffffffff1663e9255bae7f00000000000000000000000000000000000000000000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610ba8565b6105d56103e888610d83565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190610dbe565b61067a9190610d46565b6106849082610dd7565b6107f1565b808473ffffffffffffffffffffffffffffffffffffffff1663e9255bae7f00000000000000000000000000000000000000000000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190610ba8565b6107426103e887610d83565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa1580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd9190610dbe565b6107e79190610d46565b6107f19083610dd7565b949350505050565b6040805160208101909152600081526000821161089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b826108b757506040805160208101909152600081526109b9565b71ffffffffffffffffffffffffffffffffffff831161099d5760006108e083607086901b610d83565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f7700006044820152606401610894565b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150506109b9565b60006108e0846e010000000000000000000000000000856109f4565b92915050565b80516000906109b9906612725dd1d243ab907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610d83565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610a4c5760008411610a4157600080fd5b508290049050610ac0565b808411610a5857600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ae957600080fd5b50565b600060208284031215610afe57600080fd5b8135610ac081610ac7565b60008060408385031215610b1c57600080fd5b8235610b2781610ac7565b946020939093013593505050565b80516dffffffffffffffffffffffffffff81168114610b5357600080fd5b919050565b600080600060608486031215610b6d57600080fd5b610b7684610b35565b9250610b8460208501610b35565b9150604084015163ffffffff81168114610b9d57600080fd5b809150509250925092565b600060208284031215610bba57600080fd5b8151610ac081610ac7565b600060208284031215610bd757600080fd5b815160ff81168114610ac057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610c7057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610c5657610c56610be8565b80851615610c6357918102915b93841c9390800290610c1c565b509250929050565b600082610c87575060016109b9565b81610c94575060006109b9565b8160018114610caa5760028114610cb457610cd0565b60019150506109b9565b60ff841115610cc557610cc5610be8565b50506001821b6109b9565b5060208310610133831016604e8410600b8410161715610cf3575081810a6109b9565b610cfd8383610c17565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d2f57610d2f610be8565b029392505050565b6000610ac060ff841683610c78565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7e57610d7e610be8565b500290565b600082610db9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610dd057600080fd5b5051919050565b60008219821115610dea57610dea610be8565b50019056fea2646970667358221220b9bb518c015d280d7d088fba85657bcf21621107558bb5c66140898358b16af764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Bonding calculator for weighted pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cb63f3ef3571c8ddf771c104bb67ffc495f01af8ee8e9d5ef49bf00c650d25c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "3879417",
    "logsBloom": "0x
    "blockHash": "0x71128802a0aa618a8581a9eeb175ab7ab050e8e3a3d58dfd514d3dd8ba91967e",
    "transactionHash": "0x9cb63f3ef3571c8ddf771c104bb67ffc495f01af8ee8e9d5ef49bf00c650d25c",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "3879417",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "solcInputHash": "34d450937495f9b3b87a9e7fa96ab1c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/RequiemFactory_flat.sol\":\"RequiemFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/RequiemFactory_flat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: interfaces/IUniswapV2Callee.sol\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\\n// File: interfaces/ERC20/IERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n// File: libraries/UQ112x112.sol\\n\\npragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n  uint224 constant Q112 = 2**112;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\\n// File: libraries/TransferHelper.sol\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x095ea7b3, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: APPROVE_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n  }\\n}\\n\\n// File: libraries/Math.sol\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x < y ? x : y;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\\n    if (y > 3) {\\n      z = y;\\n      uint256 x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\\n// File: libraries/helpers/RequiemErrors.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n  /**\\n   * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n   * supported.\\n   */\\n  function _require(bool condition, uint256 errorCode) internal pure {\\n    if (!condition) RequiemErrors._revert(errorCode);\\n  }\\n\\n  /**\\n   * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n   */\\n  function _revert(uint256 errorCode) internal pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'REQ#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n      // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n      // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n      // the '0' character.\\n\\n      let units := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let tenths := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n      // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n      // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n      // characters to it, each shifted by a multiple of 8.\\n      // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n      // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n      // array).\\n\\n      let revertReason := shl(\\n        200,\\n        add(\\n          0x52455123000000,\\n          add(add(units, shl(8, tenths)), shl(16, hundreds))\\n        )\\n      )\\n\\n      // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n      // message will have the following layout:\\n      // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n      // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n      // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n      mstore(\\n        0x0,\\n        0x08c379a000000000000000000000000000000000000000000000000000000000\\n      )\\n      // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n      mstore(\\n        0x04,\\n        0x0000000000000000000000000000000000000000000000000000000000000020\\n      )\\n      // The string length is fixed: 7 characters.\\n      mstore(0x24, 7)\\n      // Finally, the string itself is stored.\\n      mstore(0x44, revertReason)\\n\\n      // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n      // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n      revert(0, 100)\\n    }\\n  }\\n}\\n\\nlibrary Errors {\\n  // Math\\n  uint256 internal constant ADD_OVERFLOW = 0;\\n  uint256 internal constant SUB_OVERFLOW = 1;\\n  uint256 internal constant SUB_UNDERFLOW = 2;\\n  uint256 internal constant MUL_OVERFLOW = 3;\\n  uint256 internal constant ZERO_DIVISION = 4;\\n  uint256 internal constant DIV_INTERNAL = 5;\\n  uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n  uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n  uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n  uint256 internal constant INVALID_EXPONENT = 9;\\n\\n  // Input\\n  uint256 internal constant OUT_OF_BOUNDS = 100;\\n  uint256 internal constant UNSORTED_ARRAY = 101;\\n  uint256 internal constant UNSORTED_TOKENS = 102;\\n  uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n  uint256 internal constant ZERO_TOKEN = 104;\\n\\n  // Shared pools\\n  uint256 internal constant MIN_TOKENS = 200;\\n  uint256 internal constant MAX_TOKENS = 201;\\n  uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n  uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n  uint256 internal constant MINIMUM_BPT = 204;\\n  uint256 internal constant CALLER_NOT_VAULT = 205;\\n  uint256 internal constant UNINITIALIZED = 206;\\n  uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n  uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n  uint256 internal constant EXPIRED_PERMIT = 209;\\n  uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n  // Pools\\n  uint256 internal constant MIN_AMP = 300;\\n  uint256 internal constant MAX_AMP = 301;\\n  uint256 internal constant MIN_WEIGHT = 302;\\n  uint256 internal constant MAX_STABLE_TOKENS = 303;\\n  uint256 internal constant MAX_IN_RATIO = 304;\\n  uint256 internal constant MAX_OUT_RATIO = 305;\\n  uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n  uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n  uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n  uint256 internal constant INVALID_TOKEN = 309;\\n  uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n  uint256 internal constant ZERO_INVARIANT = 311;\\n  uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n  uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n  uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n  uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n  uint256 internal constant ORACLE_BAD_SECS = 316;\\n  uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n  uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n  uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n  uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n  uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n  uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n  uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n  uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n  uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n  uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n  uint256 internal constant SWAPS_DISABLED = 327;\\n  uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n  uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n  uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n  uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n  uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n  uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n  uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n  uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n  uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n  uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n  uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n  uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n  uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n  uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n  uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n  // Lib\\n  uint256 internal constant REENTRANCY = 400;\\n  uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n  uint256 internal constant PAUSED = 402;\\n  uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n  uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n  uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n  uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n  uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n  uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n  uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n  uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n  uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n  uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n  uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n  uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n  uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n  uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n  uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n  uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n  uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n  uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n  uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n  uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n  uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n  uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n  uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n  uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n  uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n  uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n  uint256 internal constant NOT_PAUSED = 431;\\n\\n  // Vault\\n  uint256 internal constant INVALID_POOL_ID = 500;\\n  uint256 internal constant CALLER_NOT_POOL = 501;\\n  uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n  uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n  uint256 internal constant INVALID_SIGNATURE = 504;\\n  uint256 internal constant EXIT_BELOW_MIN = 505;\\n  uint256 internal constant JOIN_ABOVE_MAX = 506;\\n  uint256 internal constant SWAP_LIMIT = 507;\\n  uint256 internal constant SWAP_DEADLINE = 508;\\n  uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n  uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n  uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n  uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n  uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n  uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n  uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n  uint256 internal constant INSUFFICIENT_ETH = 516;\\n  uint256 internal constant UNALLOCATED_ETH = 517;\\n  uint256 internal constant ETH_TRANSFER = 518;\\n  uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n  uint256 internal constant TOKENS_MISMATCH = 520;\\n  uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n  uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n  uint256 internal constant TOKENS_ALREADY_SET = 523;\\n  uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n  uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n  uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n  uint256 internal constant POOL_NO_TOKENS = 527;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n  // Fees\\n  uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n  uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\\n// File: libraries/SafeMath.sol\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, Errors.SUB_OVERFLOW);\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    uint256 errorCode\\n  ) internal pure returns (uint256) {\\n    RequiemErrors._require(b <= a, errorCode);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a / b;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested.\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting with custom message when dividing by zero.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a % b;\\n    }\\n  }\\n}\\n\\n// File: interfaces/IRequiemFormula.sol\\n\\npragma solidity >=0.8.10;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n  function getReserveAndWeights(address pair, address tokenA)\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountIn);\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountIn);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view returns (bool);\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    returns (address tokenB);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view returns (uint256 amount);\\n}\\n\\n// File: interfaces/IRequiemSwap.sol\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n  // this funtion requires the correctly calculated amounts as input\\n  // the others are supposed to implement that calculation\\n  // no return value required since the amounts are already known\\n  function onSwap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut,\\n    address to\\n  ) external;\\n\\n  //\\n  function onSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address to\\n  ) external returns (uint256);\\n\\n  function onSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address to\\n  ) external returns (uint256);\\n\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n}\\n\\n// File: interfaces/IRequiemERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\n// File: RequiemERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\ncontract RequiemERC20 is IRequiemERC20 {\\n  using SafeMath for uint256;\\n\\n  string public constant name = \\\"Requiem Liquidity Provider\\\";\\n  string public constant symbol = \\\"RLP\\\";\\n  uint8 public constant decimals = 18;\\n  uint256 public totalSupply;\\n  mapping(address => uint256) public balanceOf;\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  bytes32 public override DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant override PERMIT_TYPEHASH =\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint256) public nonces;\\n\\n  constructor() {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\n          \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        ),\\n        keccak256(bytes(name)),\\n        keccak256(bytes(\\\"1\\\")),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _mint(address to, uint256 value) internal {\\n    totalSupply = totalSupply.add(value);\\n    balanceOf[to] = balanceOf[to].add(value);\\n    emit Transfer(address(0), to, value);\\n  }\\n\\n  function _burn(address from, uint256 value) internal {\\n    balanceOf[from] = balanceOf[from].sub(value);\\n    totalSupply = totalSupply.sub(value);\\n    emit Transfer(from, address(0), value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  ) private {\\n    allowance[owner][spender] = value;\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) private {\\n    balanceOf[from] = balanceOf[from].sub(value);\\n    balanceOf[to] = balanceOf[to].add(value);\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function approve(address spender, uint256 value) external returns (bool) {\\n    _approve(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transfer(address to, uint256 value) external returns (bool) {\\n    _transfer(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool) {\\n    if (allowance[from][msg.sender] != type(uint256).max) {\\n      allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n    }\\n    _transfer(from, to, value);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        \\\"\\\\x19\\\\x01\\\",\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(\\n            PERMIT_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            nonces[owner]++,\\n            deadline\\n          )\\n        )\\n      )\\n    );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(\\n      recoveredAddress != address(0) && recoveredAddress == owner,\\n      \\\"RLP: INVALID_SIGNATURE\\\"\\n    );\\n    _approve(owner, spender, value);\\n  }\\n}\\n\\n// File: interfaces/IRequiemPair.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\\n// File: interfaces/IRequiemFactory.sol\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint32 tokenWeight0,\\n    uint32 swapFee,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function formula() external view returns (address);\\n\\n  function protocolFee() external view returns (uint256);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function isPair(address) external view returns (bool);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair);\\n\\n  function getWeightsAndSwapFee(address pair)\\n    external\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    );\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n\\n  function setProtocolFee(uint256) external;\\n}\\n\\n// File: RequiemPair.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls\\n\\ncontract RequiemPair is IRequiemSwap, IRequiemPair, RequiemERC20 {\\n  using SafeMath for uint256;\\n  using UQ112x112 for uint224;\\n\\n  uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n  bytes4 private constant SELECTOR =\\n    bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n  address public factory;\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n  uint256 public price0CumulativeLast;\\n  uint256 public price1CumulativeLast;\\n  uint256 private unlocked = 1;\\n  address public formula;\\n\\n  uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n  uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n  uint32 private tokenWeight0;\\n  uint32 private tokenWeight1;\\n  uint32 private swapFee;\\n\\n  modifier lock() {\\n    require(unlocked == 1, \\\"REQLP: LOCKED\\\");\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves()\\n    public\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    )\\n  {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function getCollectedFees()\\n    public\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1)\\n  {\\n    _collectedFee0 = collectedFee0;\\n    _collectedFee1 = collectedFee1;\\n  }\\n\\n  function getTokenWeights()\\n    public\\n    view\\n    returns (uint32 _tokenWeight0, uint32 _tokenWeight1)\\n  {\\n    _tokenWeight0 = tokenWeight0;\\n    _tokenWeight1 = tokenWeight1;\\n  }\\n\\n  function getSwapFee() public view returns (uint32 _swapFee) {\\n    _swapFee = swapFee;\\n  }\\n\\n  function _safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) private {\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(SELECTOR, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"REQLP: TRANSFER_FAILED\\\"\\n    );\\n  }\\n\\n  constructor() {\\n    factory = msg.sender;\\n  }\\n\\n  // called once by the factory at time of deployment\\n  function initialize(\\n    address _token0,\\n    address _token1,\\n    uint32 _tokenWeight0,\\n    uint32 _swapFee\\n  ) external {\\n    require(msg.sender == factory, \\\"REQLP: FORBIDDEN\\\");\\n    // sufficient check\\n    token0 = _token0;\\n    token1 = _token1;\\n    tokenWeight0 = _tokenWeight0;\\n    tokenWeight1 = 100 - tokenWeight0;\\n    swapFee = _swapFee;\\n    formula = IRequiemFactory(factory).formula();\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(\\n    uint256 balance0,\\n    uint256 balance1,\\n    uint112 _reserve0,\\n    uint112 _reserve1\\n  ) private {\\n    uint32 _tokenWeight0 = tokenWeight0;\\n    require(\\n      balance0 * (100 - _tokenWeight0) <= type(uint112).max &&\\n        balance1 * _tokenWeight0 <= type(uint112).max,\\n      \\\"REQLP: OVERFLOW\\\"\\n    );\\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n    // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n      uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n      price0CumulativeLast +=\\n        uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) *\\n        timeElapsed;\\n      price1CumulativeLast +=\\n        uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) *\\n        timeElapsed;\\n    }\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n    private\\n    returns (bool feeOn)\\n  {\\n    address feeTo = IRequiemFactory(factory).feeTo();\\n    uint112 protocolFee = uint112(IRequiemFactory(factory).protocolFee());\\n    feeOn = feeTo != address(0);\\n    (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n    if (\\n      protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)\\n    ) {\\n      uint32 _tokenWeight0 = tokenWeight0;\\n      uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n        totalSupply,\\n        _reserve0,\\n        _reserve1,\\n        _tokenWeight0,\\n        100 - _tokenWeight0,\\n        _collectedFee0 / protocolFee,\\n        _collectedFee1 / protocolFee\\n      );\\n      if (liquidity > 0) _mint(feeTo, liquidity);\\n    }\\n    if (_collectedFee0 > 0) collectedFee0 = 0;\\n    if (_collectedFee1 > 0) collectedFee1 = 0;\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint256 liquidity) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n    uint256 amount0 = balance0.sub(_reserve0);\\n    uint256 amount1 = balance1.sub(_reserve1);\\n    _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply;\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\n    if (_totalSupply == 0) {\\n      liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n      _mint(address(0), MINIMUM_LIQUIDITY);\\n      // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = Math.min(\\n        amount0.mul(_totalSupply) / _reserve0,\\n        amount1.mul(_totalSupply) / _reserve1\\n      );\\n    }\\n    require(liquidity > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n    _mint(to, liquidity);\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function burn(address to)\\n    external\\n    lock\\n    returns (uint256 amount0, uint256 amount1)\\n  {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n    uint256 liquidity = balanceOf[address(this)];\\n    _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n    require(amount0 > 0 && amount1 > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n    _burn(address(this), liquidity);\\n    _safeTransfer(_token0, to, amount0);\\n    _safeTransfer(_token1, to, amount1);\\n    balance0 = IERC20(_token0).balanceOf(address(this));\\n    balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external lock {\\n    require(\\n      amount0Out > 0 || amount1Out > 0,\\n      \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n    );\\n    uint112 _reserve0 = reserve0; // gas savings\\n    uint112 _reserve1 = reserve1; // gas savings\\n    require(\\n      amount0Out < _reserve0 && amount1Out < _reserve1,\\n      \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      if (data.length > 0)\\n        IUniswapV2Callee(to).uniswapV2Call(\\n          msg.sender,\\n          amount0Out,\\n          amount1Out,\\n          data\\n        );\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\\n      ? balance0 - (_reserve0 - amount0Out)\\n      : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\\n      ? balance1 - (_reserve1 - amount1Out)\\n      : 0;\\n\\n    require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = balance0.mul(10000);\\n      uint256 balance1Adjusted = balance1.mul(10000);\\n      {\\n        // avoids stack too deep errors\\n        if (amount0In > 0) {\\n          uint256 amount0InFee = amount0In.mul(swapFee);\\n          balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n          collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n        }\\n        if (amount1In > 0) {\\n          uint256 amount1InFee = amount1In.mul(swapFee);\\n          balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n          collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n        }\\n        uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n        if (_tokenWeight0 == 50) {\\n          // gas savings for pair 50/50\\n          require(\\n            balance0Adjusted.mul(balance1Adjusted) >=\\n              uint256(_reserve0).mul(_reserve1).mul(10000**2),\\n            \\\"REQLP: K\\\"\\n          );\\n        } else {\\n          require(\\n            IRequiemFormula(formula).ensureConstantValue(\\n              uint256(_reserve0).mul(10000),\\n              uint256(_reserve1).mul(10000),\\n              balance0Adjusted,\\n              balance1Adjusted,\\n              _tokenWeight0\\n            ),\\n            \\\"REQLP: K\\\"\\n          );\\n        }\\n      }\\n    }\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n\\n  //\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address,\\n    uint256 amountIn\\n  ) external view returns (uint256) {\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    return\\n      IRequiemFormula(formula).getAmountOut(\\n        amountIn,\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n  }\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address,\\n    uint256 amountOut\\n  ) external view returns (uint256) {\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    return\\n      IRequiemFormula(formula).getAmountIn(\\n        amountOut,\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(\\n      _token0,\\n      to,\\n      IERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n    );\\n    _safeTransfer(\\n      _token1,\\n      to,\\n      IERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n    );\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(\\n      IERC20(token0).balanceOf(address(this)),\\n      IERC20(token1).balanceOf(address(this)),\\n      reserve0,\\n      reserve1\\n    );\\n  }\\n\\n  // calculates output amount for given input and executes the respective trade\\n  // viable for use in multi swaps as it returns the output value\\n  // requires the amount in to be sent to this address beforehand\\n  function onSwapGivenIn(\\n    address tokenIn,\\n    address,\\n    uint256 amountIn,\\n    uint256,\\n    address to\\n  ) external override lock returns (uint256) {\\n    bool inToken0 = tokenIn == token0;\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = inToken0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    uint256 amountOut = IRequiemFormula(formula).getAmountOut(\\n      amountIn,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n    (uint256 amount0Out, uint256 amount1Out) = inToken0\\n      ? (uint256(0), amountOut)\\n      : (amountOut, uint256(0));\\n    return _swap(amount0Out, amount1Out, to);\\n  }\\n\\n  // calculates input amount for given output and executes the respective trade\\n  // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n  // requires the amount in to be sent to this address beforehand\\n  function onSwapGivenOut(\\n    address tokenIn,\\n    address,\\n    uint256 amountOut,\\n    uint256,\\n    address to\\n  ) external override lock returns (uint256) {\\n    bool inToken0 = tokenIn == token0;\\n    (\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut\\n    ) = tokenIn == token0\\n        ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n        : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n    uint256 amountIn = IRequiemFormula(formula).getAmountIn(\\n      amountOut,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n    (uint256 amount0Out, uint256 amount1Out) = inToken0\\n      ? (uint256(0), amountIn)\\n      : (amountIn, uint256(0));\\n    return _swap(amount0Out, amount1Out, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function _swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to\\n  ) internal returns (uint256) {\\n    require(\\n      amount0Out > 0 || amount1Out > 0,\\n      \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n    );\\n    uint112 _reserve0 = reserve0; // gas savings\\n    uint112 _reserve1 = reserve1; // gas savings\\n    require(\\n      amount0Out < _reserve0 && amount1Out < _reserve1,\\n      \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\\n      ? balance0 - (_reserve0 - amount0Out)\\n      : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\\n      ? balance1 - (_reserve1 - amount1Out)\\n      : 0;\\n\\n    require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = balance0.mul(10000);\\n      uint256 balance1Adjusted = balance1.mul(10000);\\n      {\\n        // avoids stack too deep errors\\n        if (amount0In > 0) {\\n          uint256 amount0InFee = amount0In.mul(swapFee);\\n          balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n          collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n        }\\n        if (amount1In > 0) {\\n          uint256 amount1InFee = amount1In.mul(swapFee);\\n          balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n          collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n        }\\n        uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n        if (_tokenWeight0 == 50) {\\n          // gas savings for pair 50/50\\n          require(\\n            balance0Adjusted.mul(balance1Adjusted) >=\\n              uint256(_reserve0).mul(_reserve1).mul(10000**2),\\n            \\\"REQLP: K\\\"\\n          );\\n        } else {\\n          require(\\n            IRequiemFormula(formula).ensureConstantValue(\\n              uint256(_reserve0).mul(10000),\\n              uint256(_reserve1).mul(10000),\\n              balance0Adjusted,\\n              balance1Adjusted,\\n              _tokenWeight0\\n            ),\\n            \\\"REQLP: K\\\"\\n          );\\n        }\\n      }\\n    }\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    return amount0Out > 0 ? amount0Out : amount1Out;\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function onSwap(\\n    address tokenIn,\\n    address,\\n    uint256,\\n    uint256 amountOut,\\n    address to\\n  ) external override lock {\\n    (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn\\n      ? (uint256(0), amountOut)\\n      : (amountOut, uint256(0));\\n    require(\\n      amount0Out > 0 || amount1Out > 0,\\n      \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n    );\\n    uint112 _reserve0 = reserve0; // gas savings\\n    uint112 _reserve1 = reserve1; // gas savings\\n    require(\\n      amount0Out < _reserve0 && amount1Out < _reserve1,\\n      \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\\n      ? balance0 - (_reserve0 - amount0Out)\\n      : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\\n      ? balance1 - (_reserve1 - amount1Out)\\n      : 0;\\n\\n    require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = balance0.mul(10000);\\n      uint256 balance1Adjusted = balance1.mul(10000);\\n      {\\n        // avoids stack too deep errors\\n        if (amount0In > 0) {\\n          uint256 amount0InFee = amount0In.mul(swapFee);\\n          balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n          collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n        }\\n        if (amount1In > 0) {\\n          uint256 amount1InFee = amount1In.mul(swapFee);\\n          balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n          collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n        }\\n        uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n        if (_tokenWeight0 == 50) {\\n          // gas savings for pair 50/50\\n          require(\\n            balance0Adjusted.mul(balance1Adjusted) >=\\n              uint256(_reserve0).mul(_reserve1).mul(10000**2),\\n            \\\"REQLP: K\\\"\\n          );\\n        } else {\\n          require(\\n            IRequiemFormula(formula).ensureConstantValue(\\n              uint256(_reserve0).mul(10000),\\n              uint256(_reserve1).mul(10000),\\n              balance0Adjusted,\\n              balance1Adjusted,\\n              _tokenWeight0\\n            ),\\n            \\\"REQLP: K\\\"\\n          );\\n        }\\n      }\\n    }\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n}\\n\\n// File: RequiemFactory.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemFactory is IRequiemFactory {\\n  address public feeTo;\\n  address public formula;\\n  uint256 public protocolFee;\\n  address public feeToSetter;\\n  bytes32 public constant INIT_CODE_HASH =\\n    keccak256(abi.encodePacked(type(RequiemPair).creationCode));\\n\\n  mapping(bytes32 => address) private _pairSalts;\\n  address[] public allPairs;\\n  mapping(address => uint64) private _pairs;\\n\\n  constructor(address _feeToSetter, address _formula) {\\n    feeToSetter = _feeToSetter;\\n    formula = _formula;\\n  }\\n\\n  function isPair(address b) external view returns (bool) {\\n    return _pairs[b] > 0;\\n  }\\n\\n  function allPairsLength() external view returns (uint256) {\\n    return allPairs.length;\\n  }\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair) {\\n    (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB\\n      ? (tokenA, tokenB, tokenWeightA)\\n      : (tokenB, tokenA, 100 - tokenWeightA);\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(token0, token1, tokenWeight0, swapFee)\\n    );\\n    pair = _pairSalts[salt];\\n  }\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair) {\\n    require(tokenA != tokenB, \\\"RLP: IDENTICAL_ADDRESSES\\\");\\n    require(\\n      tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0,\\n      \\\"RLP: INVALID_TOKEN_WEIGHT\\\"\\n    );\\n    // swap fee from [0.01% - 20%]\\n    require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: INVALID_SWAP_FEE\\\");\\n    (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB\\n      ? (tokenA, tokenB, tokenWeightA)\\n      : (tokenB, tokenA, 100 - tokenWeightA);\\n    require(token0 != address(0), \\\"RLP: ZERO_ADDRESS\\\");\\n    // single check is sufficient\\n    bytes memory bytecode = type(RequiemPair).creationCode;\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(token0, token1, tokenWeight0, swapFee)\\n    );\\n    require(_pairSalts[salt] == address(0), \\\"RLP: PAIR_EXISTS\\\");\\n    assembly {\\n      pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n    }\\n    IRequiemPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n    _pairSalts[salt] = address(pair);\\n    allPairs.push(pair);\\n    uint64 weightAndFee = uint64(swapFee);\\n    weightAndFee |= uint64(tokenWeight0) << 32;\\n    _pairs[address(pair)] = weightAndFee;\\n    emit PairCreated(\\n      token0,\\n      token1,\\n      pair,\\n      tokenWeight0,\\n      swapFee,\\n      allPairs.length\\n    );\\n  }\\n\\n  function setFeeTo(address _feeTo) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n    feeTo = _feeTo;\\n  }\\n\\n  function setFeeToSetter(address _feeToSetter) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n    feeToSetter = _feeToSetter;\\n  }\\n\\n  function setProtocolFee(uint256 _protocolFee) external {\\n    require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n    require(\\n      _protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000),\\n      \\\"RLP: Invalid Protocol fee\\\"\\n    );\\n    protocolFee = _protocolFee;\\n  }\\n\\n  function getWeightsAndSwapFee(address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    uint64 weightAndFee = _pairs[pair];\\n    if (weightAndFee > 0) {\\n      swapFee = uint32(weightAndFee);\\n      tokenWeight0 = uint32(weightAndFee >> 32);\\n      tokenWeight1 = 100 - tokenWeight0;\\n    } else {\\n      // Default is 0.3%\\n      return (50, 50, 30);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2f2ba57d3f49681b668117b55052ab6cab099c74fbdf9a9be38ddd8cd094f448\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161451538038061451583398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b614457806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d146101ba578063ca222979146101cd578063e5e31b1314610207578063f46901ed1461024c57600080fd5b8063787dce3d14610189578063a2e74af61461019e578063b0e21e8a146101b157600080fd5b80631e3dd18b116100c85780631e3dd18b14610145578063257671f5146101585780634b75f54f1461016e578063574f2ba31461018157600080fd5b8063017e7e58146100ef578063094b74151461011f57806314572adb14610132575b600080fd5b600054610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600354610102906001600160a01b031681565b610102610140366004610945565b61025f565b610102610153366004610999565b61066c565b610160610696565b604051908152602001610116565b600154610102906001600160a01b031681565b600554610160565b61019c610197366004610999565b6106e0565b005b61019c6101ac3660046109b2565b610778565b61016060025481565b6101026101c8366004610945565b6107c4565b6101e06101db3660046109b2565b610853565b6040805163ffffffff94851681529284166020840152921691810191909152606001610116565b61023c6102153660046109b2565b6001600160a01b031660009081526006602052604090205467ffffffffffffffff16151590565b6040519015158152602001610116565b61019c61025a3660046109b2565b6108bc565b6000836001600160a01b0316856001600160a01b031614156102c85760405162461bcd60e51b815260206004820152601860248201527f524c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff16101580156102e6575060628363ffffffff1611155b801561030057506102f86002846109d4565b63ffffffff16155b61034c5760405162461bcd60e51b815260206004820152601960248201527f524c503a20494e56414c49445f544f4b454e5f5745494748540000000000000060448201526064016102bf565b60018263ffffffff161015801561036b57506107d08263ffffffff1611155b6103af5760405162461bcd60e51b8152602060048201526015602482015274524c503a20494e56414c49445f535741505f46454560581b60448201526064016102bf565b6000806000866001600160a01b0316886001600160a01b0316106103df5786886103da886064610a05565b6103e3565b8787875b919450925090506001600160a01b0383166104345760405162461bcd60e51b8152602060048201526011602482015270524c503a205a45524f5f4144445245535360781b60448201526064016102bf565b60006040518060200161044690610908565b6020820181038252601f19601f8201166040525090506000848484896040516020016104759493929190610a38565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104e65760405162461bcd60e51b815260206004820152601060248201526f524c503a20504149525f45584953545360801b60448201526064016102bf565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050600082815260046020908152604080832080546001600160a01b03199081166001600160a01b038d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff0000000016811767ffffffffffffffff19909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b6005818154811061067c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516106a560208201610908565b601f1982820381018352601f9091011660408190526106c79190602001610a7f565b6040516020818303038152906040528051906020012081565b6003546001600160a01b0316331461070a5760405162461bcd60e51b81526004016102bf90610aba565b801580610727575061271081101580156107275750620186a08111155b6107735760405162461bcd60e51b815260206004820152601960248201527f524c503a20496e76616c69642050726f746f636f6c206665650000000000000060448201526064016102bf565b600255565b6003546001600160a01b031633146107a25760405162461bcd60e51b81526004016102bf90610aba565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b0316106107f55786886107f0886064610a05565b6107f9565b8787875b9250925092506000838383886040516020016108189493929190610a38565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b0381166000908152600660205260408120548190819067ffffffffffffffff1680156108a25763ffffffff602082901c16935090508061089b846064610a05565b92506108b3565b603280601e935093509350506108b5565b505b9193909250565b6003546001600160a01b031633146108e65760405162461bcd60e51b81526004016102bf90610aba565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61393f80610ae383390190565b80356001600160a01b038116811461092c57600080fd5b919050565b803563ffffffff8116811461092c57600080fd5b6000806000806080858703121561095b57600080fd5b61096485610915565b935061097260208601610915565b925061098060408601610931565b915061098e60608601610931565b905092959194509250565b6000602082840312156109ab57600080fd5b5035919050565b6000602082840312156109c457600080fd5b6109cd82610915565b9392505050565b600063ffffffff808416806109f957634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b600063ffffffff83811690831681811015610a3057634e487b7160e01b600052601160045260246000fd5b039392505050565b6bffffffffffffffffffffffff19606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b6000825160005b81811015610aa05760208186018101518583015201610a86565b81811115610aaf576000828501525b509190910192915050565b6020808252600e908201526d2926281d102327a92124a22222a760911b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556138248061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636a62784211610125578063cc56fd43116100ad578063d505accf1161007c578063d505accf14610538578063d54a8d181461054b578063dd62ed3e14610575578063e9255bae146105a0578063fff6cae9146105b357600080fd5b8063cc56fd43146104da578063d0f69579146104ed578063d21220a714610500578063d4cadf681461051357600080fd5b806395d89b41116100f457806395d89b4114610476578063a9059cbb14610498578063ba9a7a56146104ab578063bc25cf77146104b4578063c45a0155146104c757600080fd5b80636a627842146103fb57806370a082311461040e5780637ecebe001461042e57806389afcb441461044e57600080fd5b806330adf81f116101a85780633644e515116101775780633644e515146103ba5780634ac00e03146103c35780634b75f54f146103d65780635909c0d5146103e95780635a3d5493146103f257600080fd5b806330adf81f1461033c578063313ce5671461036357806332bfe4691461037d57806332fd5493146103a757600080fd5b80630dfe1681116101e45780630dfe1681146102d45780630e6d8bce146102ff57806318160ddd1461032057806323b872dd1461032957600080fd5b8063022c0d9f1461021657806306fdde031461022b5780630902f1ac1461027d578063095ea7b3146102b1575b600080fd5b610229610224366004613164565b6105bb565b005b6102676040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b604051610274919061322a565b60405180910390f35b610285610b8f565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610274565b6102c46102bf36600461325d565b610bb9565b6040519015158152602001610274565b6006546102e7906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b61031261030d366004613289565b610bcf565b604051908152602001610274565b61031260005481565b6102c46103373660046132e8565b610d58565b6103127f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61036b601281565b60405160ff9091168152602001610274565b600d54600e5460408051600160e01b90930463ffffffff9081168452909116602083015201610274565b6102296103b5366004613289565b610dec565b61031260035481565b6103126103d1366004613289565b611370565b600c546102e7906001600160a01b031681565b61031260095481565b610312600a5481565b610312610409366004613329565b61147c565b61031261041c366004613329565b60016020526000908152604090205481565b61031261043c366004613329565b60046020526000908152604090205481565b61046161045c366004613329565b611713565b60408051928352602083019190915201610274565b610267604051806040016040528060038152602001620524c560ec1b81525081565b6102c46104a636600461325d565b611a47565b6103126103e881565b6102296104c2366004613329565b611a54565b6005546102e7906001600160a01b031681565b6103126104e83660046132e8565b611b68565b6102296104fb36600461335a565b611c98565b6007546102e7906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff9091168152602001610274565b6102296105463660046133b2565b611e07565b600d54604080516001600160701b038084168252600160701b909304909216602083015201610274565b610312610583366004613429565b600260209081526000928352604080842090915290825290205481565b6103126105ae3660046132e8565b61200e565b6102296120f1565b600b546001146105e65760405162461bcd60e51b81526004016105dd90613462565b60405180910390fd5b6000600b55841515806105f95750600084115b6106155760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b90041681871080156106435750806001600160701b031686105b61065f5760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b0391821691908116908916821480159061069d5750806001600160a01b0316896001600160a01b031614155b6106b95760405162461bcd60e51b81526004016105dd90613501565b8a156106ca576106ca828a8d612215565b89156106db576106db818a8c612215565b8615610748576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906107159033908f908f908e908e9060040161352c565b600060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190613578565b92505050600089856001600160701b031661083691906135a7565b8311610843576000610860565b6108568a6001600160701b0387166135a7565b61086090846135a7565b905060006108778a6001600160701b0387166135a7565b83116108845760006108a1565b6108978a6001600160701b0387166135a7565b6108a190846135a7565b905060008211806108b25750600081115b6108ce5760405162461bcd60e51b81526004016105dd906135be565b60006108dc85612710612359565b905060006108ec85612710612359565b9050831561095d57600e5460009061091690869063ffffffff600160201b90910481169061235916565b9050610922838261236c565b600d5490935061093b906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156109d957600e5460009061098590859063ffffffff600160201b90910481169061235916565b9050610991828261236c565b600d549092506109b190600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610a4357610a166305f5e100610a106001600160701b038c8116908c16612359565b90612359565b610a208484612359565b1015610a3e5760405162461bcd60e51b81526004016105dd906135f3565b610b19565b600c546001600160a01b03166379c91b37610a696001600160701b038c16612710612359565b610a7e6001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190613615565b610b195760405162461bcd60e51b81526004016105dd906135f3565b505050610b2884848888612397565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bc63384846125ed565b50600192915050565b6000600b54600114610bf35760405162461bcd60e51b81526004016105dd90613462565b6000600b8190556006546001600160a01b038881169116149080808084610c4757600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416610c77565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163b19210b091610cdb918e918a918a918a918a91600160201b900463ffffffff1690600401613637565b602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190613578565b905060008087610d2e57826000610d32565b6000835b91509150610d4182828c61264f565b6001600b559e9d5050505050505050505050505050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610dd7576001600160a01b0384166000908152600260209081526040808320338452909152902054610db2908361236c565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610de2848484612b8e565b5060019392505050565b600b54600114610e0e5760405162461bcd60e51b81526004016105dd90613462565b6000600b81905560065481906001600160a01b03888116911614610e3457836000610e38565b6000845b915091506000821180610e4b5750600081115b610e675760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b9004168184108015610e955750806001600160701b031683105b610eb15760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b03918216919081169089168214801590610eef5750806001600160a01b0316896001600160a01b031614155b610f0b5760405162461bcd60e51b81526004016105dd90613501565b8715610f1c57610f1c828a8a612215565b8615610f2d57610f2d818a89612215565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190613578565b92505050600086856001600160701b031661101b91906135a7565b8311611028576000611045565b61103b876001600160701b0387166135a7565b61104590846135a7565b9050600061105c876001600160701b0387166135a7565b8311611069576000611086565b61107c876001600160701b0387166135a7565b61108690846135a7565b905060008211806110975750600081115b6110b35760405162461bcd60e51b81526004016105dd906135be565b60006110c185612710612359565b905060006110d185612710612359565b9050831561114257600e546000906110fb90869063ffffffff600160201b90910481169061235916565b9050611107838261236c565b600d54909350611120906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156111be57600e5460009061116a90859063ffffffff600160201b90910481169061235916565b9050611176828261236c565b600d5490925061119690600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415611222576111f56305f5e100610a106001600160701b038c8116908c16612359565b6111ff8484612359565b101561121d5760405162461bcd60e51b81526004016105dd906135f3565b6112f8565b600c546001600160a01b03166379c91b376112486001600160701b038c16612710612359565b61125d6001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190613615565b6112f85760405162461bcd60e51b81526004016105dd906135f3565b50505061130784848888612397565b6040805183815260208101839052908101899052606081018890526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b546001146113945760405162461bcd60e51b81526004016105dd90613462565b6000600b8190556006546001600160a01b0388811691161490808080846113e857600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611418565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163671a11b591610cdb918e918a918a918a918a91600160201b900463ffffffff1690600401613637565b6000600b546001146114a05760405162461bcd60e51b81526004016105dd90613462565b6000600b819055806114b0610b8f565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613578565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190613578565b905060006115af836001600160701b03871661236c565b905060006115c6836001600160701b03871661236c565b90506115d28686612c34565b506000548061160d576115f96103e86115f36115ee8686612359565b612ef0565b9061236c565b975061160860006103e8612f60565b611654565b6116516001600160701b0388166116248584612359565b61162e9190613681565b6001600160701b0388166116428585612359565b61164c9190613681565b612fef565b97505b600088116116b05760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b60648201526084016105dd565b6116ba8989612f60565b6116c685858989612397565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146117385760405162461bcd60e51b81526004016105dd90613462565b6000600b81905580611748610b8f565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c69190613578565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190613578565b306000908152600160205260409020549091506118518787612c34565b50600054806118608386612359565b61186a9190613681565b9950806118778385612359565b6118819190613681565b985060008a1180156118935750600089115b6118eb5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b60648201526084016105dd565b6118f53083613005565b611900868c8c612215565b61190b858c8b612215565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561194f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119739190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de9190613578565b92506119ec84848a8a612397565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610bc6338484612b8e565b600b54600114611a765760405162461bcd60e51b81526004016105dd90613462565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611b119184918691611b0c916001600160701b039091169084906370a08231906024015b602060405180830381865afa158015611ae8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f39190613578565b612215565b6008546040516370a0823160e01b8152306004820152611b5e9183918691611b0c91600160701b9091046001600160701b0316906001600160a01b038516906370a0823190602401611acb565b50506001600b5550565b60065460009081908190819081906001600160a01b03898116911614611bbb57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611beb565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b091611c4b918a918991899189918991600160201b90910463ffffffff1690600401613637565b602060405180830381865afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190613578565b98975050505050505050565b6005546001600160a01b03163314611ce55760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b60448201526064016105dd565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff85811682029290921792839055611d489204166064613695565b600e805463ffffffff848116600160201b0267ffffffffffffffff1990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de191906136ba565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b42841015611e465760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b60448201526064016105dd565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611e99836136d7565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611f1292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611f7d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611fb35750886001600160a01b0316816001600160a01b0316145b611ff85760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b60448201526064016105dd565b6120038989896125ed565b505050505050505050565b60065460009081908190819081906001600160a01b0389811691161461206157600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416612091565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b591611c4b918a918991899189918991600160201b90910463ffffffff1690600401613637565b600b546001146121135760405162461bcd60e51b81526004016105dd90613462565b6000600b556006546040516370a0823160e01b815230600482015261220e916001600160a01b0316906370a0823190602401602060405180830381865afa158015612162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121869190613578565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f29190613578565b6008546001600160701b0380821691600160701b900416612397565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916122a191906136f2565b6000604051808303816000865af19150503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b509150915081801561230d57508051158061230d57508080602001905181019061230d9190613615565b6123525760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b60448201526064016105dd565b5050505050565b6000612365828461370e565b9392505050565b60006123658383600161308f565b600080612387838561372d565b90506123658482101560006130b3565b600d54600160e01b900463ffffffff166001600160701b036123ba826064613695565b6123ca9063ffffffff168761370e565b111580156123ee57506001600160701b036123eb63ffffffff83168661370e565b11155b61242c5760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b60448201526064016105dd565b600061243c600160201b42613745565b60085490915060009061245c90600160e01b900463ffffffff1683613695565b905060008163ffffffff1611801561247c57506001600160701b03851615155b801561249057506001600160701b03841615155b156125545760006124a2846064613695565b6124b29063ffffffff1687613759565b905060006124c663ffffffff861687613759565b90508263ffffffff166124eb836124dc846130c5565b6001600160e01b0316906130e4565b6001600160e01b03166124fe919061370e565b6009600082825461250f919061372d565b909155505063ffffffff8316612528826124dc856130c5565b6001600160e01b031661253b919061370e565b600a600082825461254c919061372d565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b03199095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008084118061265f5750600083115b61267b5760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b90041681861080156126a95750806001600160701b031685105b6126c55760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b039182169190811690881682148015906127035750806001600160a01b0316886001600160a01b031614155b61271f5760405162461bcd60e51b81526004016105dd90613501565b89156127305761273082898c612215565b88156127415761274181898b612215565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a99190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190613578565b92505050600088856001600160701b031661282f91906135a7565b831161283c576000612859565b61284f896001600160701b0387166135a7565b61285990846135a7565b90506000612870896001600160701b0387166135a7565b831161287d57600061289a565b612890896001600160701b0387166135a7565b61289a90846135a7565b905060008211806128ab5750600081115b6128c75760405162461bcd60e51b81526004016105dd906135be565b60006128d585612710612359565b905060006128e585612710612359565b9050831561295657600e5460009061290f90869063ffffffff600160201b90910481169061235916565b905061291b838261236c565b600d54909350612934906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156129d257600e5460009061297e90859063ffffffff600160201b90910481169061235916565b905061298a828261236c565b600d549092506129aa90600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415612a3657612a096305f5e100610a106001600160701b038c8116908c16612359565b612a138484612359565b1015612a315760405162461bcd60e51b81526004016105dd906135f3565b612b0c565b600c546001600160a01b03166379c91b37612a5c6001600160701b038c16612710612359565b612a716001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015612acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af09190613615565b612b0c5760405162461bcd60e51b81526004016105dd906135f3565b505050612b1b84848888612397565b60408051838152602081018390529081018b9052606081018a90526001600160a01b0389169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a11612b7e5788612b80565b895b9a9950505050505050505050565b6001600160a01b038316600090815260016020526040902054612bb1908261236c565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612be0908261237a565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906126429085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cae91906136ba565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d299190613578565b6001600160a01b038316151593509050600080612d5a600d546001600160701b0380821692600160701b9092041690565b915091506000836001600160701b0316118015612d745750845b8015612d9c57506000826001600160701b03161180612d9c57506000816001600160701b0316115b15612e9c57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b86612dda816064613695565b612de48c8c613788565b612dee8d8c613788565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015612e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190613578565b90508015612e9957612e998682612f60565b50505b6001600160701b03821615612ebc57600d80546001600160701b03191690555b6001600160701b03811615612ee657600d80546dffffffffffffffffffffffffffff60701b191690555b5050505092915050565b60006003821115612f515750806000612f0a600283613681565b612f1590600161372d565b90505b81811015612f4b57905080600281612f308186613681565b612f3a919061372d565b612f449190613681565b9050612f18565b50919050565b8115612f5b575060015b919050565b600054612f6d908261237a565b60009081556001600160a01b038316815260016020526040902054612f92908261237a565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612fe39085815260200190565b60405180910390a35050565b6000818310612ffe5781612365565b5090919050565b6001600160a01b038216600090815260016020526040902054613028908261236c565b6001600160a01b0383166000908152600160205260408120919091555461304f908261236c565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612fe3565b600061309e84841115836130b3565b60006130aa84866135a7565b95945050505050565b816130c1576130c1816130f9565b5050565b60006130de600160701b6001600160701b0384166137ae565b92915050565b60006123656001600160701b038316846137d4565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b038116811461316157600080fd5b50565b60008060008060006080868803121561317c57600080fd5b853594506020860135935060408601356131958161314c565b9250606086013567ffffffffffffffff808211156131b257600080fd5b818801915088601f8301126131c657600080fd5b8135818111156131d557600080fd5b8960208285010111156131e757600080fd5b9699959850939650602001949392505050565b60005b838110156132155781810151838201526020016131fd565b83811115613224576000848401525b50505050565b60208152600082518060208401526132498160408501602087016131fa565b601f01601f19169190910160400192915050565b6000806040838503121561327057600080fd5b823561327b8161314c565b946020939093013593505050565b600080600080600060a086880312156132a157600080fd5b85356132ac8161314c565b945060208601356132bc8161314c565b9350604086013592506060860135915060808601356132da8161314c565b809150509295509295909350565b6000806000606084860312156132fd57600080fd5b83356133088161314c565b925060208401356133188161314c565b929592945050506040919091013590565b60006020828403121561333b57600080fd5b81356123658161314c565b803563ffffffff81168114612f5b57600080fd5b6000806000806080858703121561337057600080fd5b843561337b8161314c565b9350602085013561338b8161314c565b925061339960408601613346565b91506133a760608601613346565b905092959194509250565b600080600080600080600060e0888a0312156133cd57600080fd5b87356133d88161314c565b965060208801356133e88161314c565b95506040880135945060608801359350608088013560ff8116811461340c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561343c57600080fd5b82356134478161314c565b915060208301356134578161314c565b809150509250929050565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b60208082526021908201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e6040820152601560fa1b606082015260800190565b6020808252601d908201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604082015260600190565b6020808252601190820152705245514c503a20494e56414c49445f544f60781b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561358a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156135b9576135b9613591565b500390565b6020808252818101527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604082015260600190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b60006020828403121561362757600080fd5b8151801515811461236557600080fd5b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b634e487b7160e01b600052601260045260246000fd5b6000826136905761369061366b565b500490565b600063ffffffff838116908316818110156136b2576136b2613591565b039392505050565b6000602082840312156136cc57600080fd5b81516123658161314c565b60006000198214156136eb576136eb613591565b5060010190565b600082516137048184602087016131fa565b9190910192915050565b600081600019048311821515161561372857613728613591565b500290565b6000821982111561374057613740613591565b500190565b6000826137545761375461366b565b500690565b60006001600160701b038083168185168183048111821515161561377f5761377f613591565b02949350505050565b60006001600160701b03808416806137a2576137a261366b565b92169190910492915050565b60006001600160e01b038281168482168115158284048211161561377f5761377f613591565b60006001600160e01b03838116806137a2576137a261366b56fea2646970667358221220e613fdd3871f4bab64904fad36a818149c01df48a2ff8d3b92b5e4b11d55e2c464736f6c634300080a0033a2646970667358221220f9ab6335fea81ae0d371083112d9a8100a62ddbe97a51d0c61a44a41f4f1431b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d146101ba578063ca222979146101cd578063e5e31b1314610207578063f46901ed1461024c57600080fd5b8063787dce3d14610189578063a2e74af61461019e578063b0e21e8a146101b157600080fd5b80631e3dd18b116100c85780631e3dd18b14610145578063257671f5146101585780634b75f54f1461016e578063574f2ba31461018157600080fd5b8063017e7e58146100ef578063094b74151461011f57806314572adb14610132575b600080fd5b600054610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600354610102906001600160a01b031681565b610102610140366004610945565b61025f565b610102610153366004610999565b61066c565b610160610696565b604051908152602001610116565b600154610102906001600160a01b031681565b600554610160565b61019c610197366004610999565b6106e0565b005b61019c6101ac3660046109b2565b610778565b61016060025481565b6101026101c8366004610945565b6107c4565b6101e06101db3660046109b2565b610853565b6040805163ffffffff94851681529284166020840152921691810191909152606001610116565b61023c6102153660046109b2565b6001600160a01b031660009081526006602052604090205467ffffffffffffffff16151590565b6040519015158152602001610116565b61019c61025a3660046109b2565b6108bc565b6000836001600160a01b0316856001600160a01b031614156102c85760405162461bcd60e51b815260206004820152601860248201527f524c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff16101580156102e6575060628363ffffffff1611155b801561030057506102f86002846109d4565b63ffffffff16155b61034c5760405162461bcd60e51b815260206004820152601960248201527f524c503a20494e56414c49445f544f4b454e5f5745494748540000000000000060448201526064016102bf565b60018263ffffffff161015801561036b57506107d08263ffffffff1611155b6103af5760405162461bcd60e51b8152602060048201526015602482015274524c503a20494e56414c49445f535741505f46454560581b60448201526064016102bf565b6000806000866001600160a01b0316886001600160a01b0316106103df5786886103da886064610a05565b6103e3565b8787875b919450925090506001600160a01b0383166104345760405162461bcd60e51b8152602060048201526011602482015270524c503a205a45524f5f4144445245535360781b60448201526064016102bf565b60006040518060200161044690610908565b6020820181038252601f19601f8201166040525090506000848484896040516020016104759493929190610a38565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104e65760405162461bcd60e51b815260206004820152601060248201526f524c503a20504149525f45584953545360801b60448201526064016102bf565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050600082815260046020908152604080832080546001600160a01b03199081166001600160a01b038d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff0000000016811767ffffffffffffffff19909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b6005818154811061067c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516106a560208201610908565b601f1982820381018352601f9091011660408190526106c79190602001610a7f565b6040516020818303038152906040528051906020012081565b6003546001600160a01b0316331461070a5760405162461bcd60e51b81526004016102bf90610aba565b801580610727575061271081101580156107275750620186a08111155b6107735760405162461bcd60e51b815260206004820152601960248201527f524c503a20496e76616c69642050726f746f636f6c206665650000000000000060448201526064016102bf565b600255565b6003546001600160a01b031633146107a25760405162461bcd60e51b81526004016102bf90610aba565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b0316106107f55786886107f0886064610a05565b6107f9565b8787875b9250925092506000838383886040516020016108189493929190610a38565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b0381166000908152600660205260408120548190819067ffffffffffffffff1680156108a25763ffffffff602082901c16935090508061089b846064610a05565b92506108b3565b603280601e935093509350506108b5565b505b9193909250565b6003546001600160a01b031633146108e65760405162461bcd60e51b81526004016102bf90610aba565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61393f80610ae383390190565b80356001600160a01b038116811461092c57600080fd5b919050565b803563ffffffff8116811461092c57600080fd5b6000806000806080858703121561095b57600080fd5b61096485610915565b935061097260208601610915565b925061098060408601610931565b915061098e60608601610931565b905092959194509250565b6000602082840312156109ab57600080fd5b5035919050565b6000602082840312156109c457600080fd5b6109cd82610915565b9392505050565b600063ffffffff808416806109f957634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b600063ffffffff83811690831681811015610a3057634e487b7160e01b600052601160045260246000fd5b039392505050565b6bffffffffffffffffffffffff19606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b6000825160005b81811015610aa05760208186018101518583015201610a86565b81811115610aaf576000828501525b509190910192915050565b6020808252600e908201526d2926281d102327a92124a22222a760911b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556138248061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636a62784211610125578063cc56fd43116100ad578063d505accf1161007c578063d505accf14610538578063d54a8d181461054b578063dd62ed3e14610575578063e9255bae146105a0578063fff6cae9146105b357600080fd5b8063cc56fd43146104da578063d0f69579146104ed578063d21220a714610500578063d4cadf681461051357600080fd5b806395d89b41116100f457806395d89b4114610476578063a9059cbb14610498578063ba9a7a56146104ab578063bc25cf77146104b4578063c45a0155146104c757600080fd5b80636a627842146103fb57806370a082311461040e5780637ecebe001461042e57806389afcb441461044e57600080fd5b806330adf81f116101a85780633644e515116101775780633644e515146103ba5780634ac00e03146103c35780634b75f54f146103d65780635909c0d5146103e95780635a3d5493146103f257600080fd5b806330adf81f1461033c578063313ce5671461036357806332bfe4691461037d57806332fd5493146103a757600080fd5b80630dfe1681116101e45780630dfe1681146102d45780630e6d8bce146102ff57806318160ddd1461032057806323b872dd1461032957600080fd5b8063022c0d9f1461021657806306fdde031461022b5780630902f1ac1461027d578063095ea7b3146102b1575b600080fd5b610229610224366004613164565b6105bb565b005b6102676040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b604051610274919061322a565b60405180910390f35b610285610b8f565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610274565b6102c46102bf36600461325d565b610bb9565b6040519015158152602001610274565b6006546102e7906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b61031261030d366004613289565b610bcf565b604051908152602001610274565b61031260005481565b6102c46103373660046132e8565b610d58565b6103127f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61036b601281565b60405160ff9091168152602001610274565b600d54600e5460408051600160e01b90930463ffffffff9081168452909116602083015201610274565b6102296103b5366004613289565b610dec565b61031260035481565b6103126103d1366004613289565b611370565b600c546102e7906001600160a01b031681565b61031260095481565b610312600a5481565b610312610409366004613329565b61147c565b61031261041c366004613329565b60016020526000908152604090205481565b61031261043c366004613329565b60046020526000908152604090205481565b61046161045c366004613329565b611713565b60408051928352602083019190915201610274565b610267604051806040016040528060038152602001620524c560ec1b81525081565b6102c46104a636600461325d565b611a47565b6103126103e881565b6102296104c2366004613329565b611a54565b6005546102e7906001600160a01b031681565b6103126104e83660046132e8565b611b68565b6102296104fb36600461335a565b611c98565b6007546102e7906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff9091168152602001610274565b6102296105463660046133b2565b611e07565b600d54604080516001600160701b038084168252600160701b909304909216602083015201610274565b610312610583366004613429565b600260209081526000928352604080842090915290825290205481565b6103126105ae3660046132e8565b61200e565b6102296120f1565b600b546001146105e65760405162461bcd60e51b81526004016105dd90613462565b60405180910390fd5b6000600b55841515806105f95750600084115b6106155760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b90041681871080156106435750806001600160701b031686105b61065f5760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b0391821691908116908916821480159061069d5750806001600160a01b0316896001600160a01b031614155b6106b95760405162461bcd60e51b81526004016105dd90613501565b8a156106ca576106ca828a8d612215565b89156106db576106db818a8c612215565b8615610748576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906107159033908f908f908e908e9060040161352c565b600060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190613578565b92505050600089856001600160701b031661083691906135a7565b8311610843576000610860565b6108568a6001600160701b0387166135a7565b61086090846135a7565b905060006108778a6001600160701b0387166135a7565b83116108845760006108a1565b6108978a6001600160701b0387166135a7565b6108a190846135a7565b905060008211806108b25750600081115b6108ce5760405162461bcd60e51b81526004016105dd906135be565b60006108dc85612710612359565b905060006108ec85612710612359565b9050831561095d57600e5460009061091690869063ffffffff600160201b90910481169061235916565b9050610922838261236c565b600d5490935061093b906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156109d957600e5460009061098590859063ffffffff600160201b90910481169061235916565b9050610991828261236c565b600d549092506109b190600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610a4357610a166305f5e100610a106001600160701b038c8116908c16612359565b90612359565b610a208484612359565b1015610a3e5760405162461bcd60e51b81526004016105dd906135f3565b610b19565b600c546001600160a01b03166379c91b37610a696001600160701b038c16612710612359565b610a7e6001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190613615565b610b195760405162461bcd60e51b81526004016105dd906135f3565b505050610b2884848888612397565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bc63384846125ed565b50600192915050565b6000600b54600114610bf35760405162461bcd60e51b81526004016105dd90613462565b6000600b8190556006546001600160a01b038881169116149080808084610c4757600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416610c77565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163b19210b091610cdb918e918a918a918a918a91600160201b900463ffffffff1690600401613637565b602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190613578565b905060008087610d2e57826000610d32565b6000835b91509150610d4182828c61264f565b6001600b559e9d5050505050505050505050505050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610dd7576001600160a01b0384166000908152600260209081526040808320338452909152902054610db2908361236c565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610de2848484612b8e565b5060019392505050565b600b54600114610e0e5760405162461bcd60e51b81526004016105dd90613462565b6000600b81905560065481906001600160a01b03888116911614610e3457836000610e38565b6000845b915091506000821180610e4b5750600081115b610e675760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b9004168184108015610e955750806001600160701b031683105b610eb15760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b03918216919081169089168214801590610eef5750806001600160a01b0316896001600160a01b031614155b610f0b5760405162461bcd60e51b81526004016105dd90613501565b8715610f1c57610f1c828a8a612215565b8615610f2d57610f2d818a89612215565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190613578565b92505050600086856001600160701b031661101b91906135a7565b8311611028576000611045565b61103b876001600160701b0387166135a7565b61104590846135a7565b9050600061105c876001600160701b0387166135a7565b8311611069576000611086565b61107c876001600160701b0387166135a7565b61108690846135a7565b905060008211806110975750600081115b6110b35760405162461bcd60e51b81526004016105dd906135be565b60006110c185612710612359565b905060006110d185612710612359565b9050831561114257600e546000906110fb90869063ffffffff600160201b90910481169061235916565b9050611107838261236c565b600d54909350611120906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156111be57600e5460009061116a90859063ffffffff600160201b90910481169061235916565b9050611176828261236c565b600d5490925061119690600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415611222576111f56305f5e100610a106001600160701b038c8116908c16612359565b6111ff8484612359565b101561121d5760405162461bcd60e51b81526004016105dd906135f3565b6112f8565b600c546001600160a01b03166379c91b376112486001600160701b038c16612710612359565b61125d6001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190613615565b6112f85760405162461bcd60e51b81526004016105dd906135f3565b50505061130784848888612397565b6040805183815260208101839052908101899052606081018890526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b546001146113945760405162461bcd60e51b81526004016105dd90613462565b6000600b8190556006546001600160a01b0388811691161490808080846113e857600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611418565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163671a11b591610cdb918e918a918a918a918a91600160201b900463ffffffff1690600401613637565b6000600b546001146114a05760405162461bcd60e51b81526004016105dd90613462565b6000600b819055806114b0610b8f565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613578565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190613578565b905060006115af836001600160701b03871661236c565b905060006115c6836001600160701b03871661236c565b90506115d28686612c34565b506000548061160d576115f96103e86115f36115ee8686612359565b612ef0565b9061236c565b975061160860006103e8612f60565b611654565b6116516001600160701b0388166116248584612359565b61162e9190613681565b6001600160701b0388166116428585612359565b61164c9190613681565b612fef565b97505b600088116116b05760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b60648201526084016105dd565b6116ba8989612f60565b6116c685858989612397565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146117385760405162461bcd60e51b81526004016105dd90613462565b6000600b81905580611748610b8f565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c69190613578565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190613578565b306000908152600160205260409020549091506118518787612c34565b50600054806118608386612359565b61186a9190613681565b9950806118778385612359565b6118819190613681565b985060008a1180156118935750600089115b6118eb5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b60648201526084016105dd565b6118f53083613005565b611900868c8c612215565b61190b858c8b612215565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561194f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119739190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de9190613578565b92506119ec84848a8a612397565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610bc6338484612b8e565b600b54600114611a765760405162461bcd60e51b81526004016105dd90613462565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611b119184918691611b0c916001600160701b039091169084906370a08231906024015b602060405180830381865afa158015611ae8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f39190613578565b612215565b6008546040516370a0823160e01b8152306004820152611b5e9183918691611b0c91600160701b9091046001600160701b0316906001600160a01b038516906370a0823190602401611acb565b50506001600b5550565b60065460009081908190819081906001600160a01b03898116911614611bbb57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611beb565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b091611c4b918a918991899189918991600160201b90910463ffffffff1690600401613637565b602060405180830381865afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190613578565b98975050505050505050565b6005546001600160a01b03163314611ce55760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b60448201526064016105dd565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff85811682029290921792839055611d489204166064613695565b600e805463ffffffff848116600160201b0267ffffffffffffffff1990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de191906136ba565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b42841015611e465760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b60448201526064016105dd565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611e99836136d7565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611f1292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611f7d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611fb35750886001600160a01b0316816001600160a01b0316145b611ff85760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b60448201526064016105dd565b6120038989896125ed565b505050505050505050565b60065460009081908190819081906001600160a01b0389811691161461206157600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416612091565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b591611c4b918a918991899189918991600160201b90910463ffffffff1690600401613637565b600b546001146121135760405162461bcd60e51b81526004016105dd90613462565b6000600b556006546040516370a0823160e01b815230600482015261220e916001600160a01b0316906370a0823190602401602060405180830381865afa158015612162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121869190613578565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f29190613578565b6008546001600160701b0380821691600160701b900416612397565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916122a191906136f2565b6000604051808303816000865af19150503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b509150915081801561230d57508051158061230d57508080602001905181019061230d9190613615565b6123525760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b60448201526064016105dd565b5050505050565b6000612365828461370e565b9392505050565b60006123658383600161308f565b600080612387838561372d565b90506123658482101560006130b3565b600d54600160e01b900463ffffffff166001600160701b036123ba826064613695565b6123ca9063ffffffff168761370e565b111580156123ee57506001600160701b036123eb63ffffffff83168661370e565b11155b61242c5760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b60448201526064016105dd565b600061243c600160201b42613745565b60085490915060009061245c90600160e01b900463ffffffff1683613695565b905060008163ffffffff1611801561247c57506001600160701b03851615155b801561249057506001600160701b03841615155b156125545760006124a2846064613695565b6124b29063ffffffff1687613759565b905060006124c663ffffffff861687613759565b90508263ffffffff166124eb836124dc846130c5565b6001600160e01b0316906130e4565b6001600160e01b03166124fe919061370e565b6009600082825461250f919061372d565b909155505063ffffffff8316612528826124dc856130c5565b6001600160e01b031661253b919061370e565b600a600082825461254c919061372d565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b03199095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008084118061265f5750600083115b61267b5760405162461bcd60e51b81526004016105dd90613489565b6008546001600160701b0380821691600160701b90041681861080156126a95750806001600160701b031685105b6126c55760405162461bcd60e51b81526004016105dd906134ca565b60065460075460009182916001600160a01b039182169190811690881682148015906127035750806001600160a01b0316886001600160a01b031614155b61271f5760405162461bcd60e51b81526004016105dd90613501565b89156127305761273082898c612215565b88156127415761274181898b612215565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a99190613578565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190613578565b92505050600088856001600160701b031661282f91906135a7565b831161283c576000612859565b61284f896001600160701b0387166135a7565b61285990846135a7565b90506000612870896001600160701b0387166135a7565b831161287d57600061289a565b612890896001600160701b0387166135a7565b61289a90846135a7565b905060008211806128ab5750600081115b6128c75760405162461bcd60e51b81526004016105dd906135be565b60006128d585612710612359565b905060006128e585612710612359565b9050831561295657600e5460009061290f90869063ffffffff600160201b90910481169061235916565b905061291b838261236c565b600d54909350612934906001600160701b03168261237a565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156129d257600e5460009061297e90859063ffffffff600160201b90910481169061235916565b905061298a828261236c565b600d549092506129aa90600160701b90046001600160701b03168261237a565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415612a3657612a096305f5e100610a106001600160701b038c8116908c16612359565b612a138484612359565b1015612a315760405162461bcd60e51b81526004016105dd906135f3565b612b0c565b600c546001600160a01b03166379c91b37612a5c6001600160701b038c16612710612359565b612a716001600160701b038c16612710612359565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015612acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af09190613615565b612b0c5760405162461bcd60e51b81526004016105dd906135f3565b505050612b1b84848888612397565b60408051838152602081018390529081018b9052606081018a90526001600160a01b0389169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a11612b7e5788612b80565b895b9a9950505050505050505050565b6001600160a01b038316600090815260016020526040902054612bb1908261236c565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612be0908261237a565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906126429085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cae91906136ba565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d299190613578565b6001600160a01b038316151593509050600080612d5a600d546001600160701b0380821692600160701b9092041690565b915091506000836001600160701b0316118015612d745750845b8015612d9c57506000826001600160701b03161180612d9c57506000816001600160701b0316115b15612e9c57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b86612dda816064613695565b612de48c8c613788565b612dee8d8c613788565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015612e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190613578565b90508015612e9957612e998682612f60565b50505b6001600160701b03821615612ebc57600d80546001600160701b03191690555b6001600160701b03811615612ee657600d80546dffffffffffffffffffffffffffff60701b191690555b5050505092915050565b60006003821115612f515750806000612f0a600283613681565b612f1590600161372d565b90505b81811015612f4b57905080600281612f308186613681565b612f3a919061372d565b612f449190613681565b9050612f18565b50919050565b8115612f5b575060015b919050565b600054612f6d908261237a565b60009081556001600160a01b038316815260016020526040902054612f92908261237a565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612fe39085815260200190565b60405180910390a35050565b6000818310612ffe5781612365565b5090919050565b6001600160a01b038216600090815260016020526040902054613028908261236c565b6001600160a01b0383166000908152600160205260408120919091555461304f908261236c565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612fe3565b600061309e84841115836130b3565b60006130aa84866135a7565b95945050505050565b816130c1576130c1816130f9565b5050565b60006130de600160701b6001600160701b0384166137ae565b92915050565b60006123656001600160701b038316846137d4565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b038116811461316157600080fd5b50565b60008060008060006080868803121561317c57600080fd5b853594506020860135935060408601356131958161314c565b9250606086013567ffffffffffffffff808211156131b257600080fd5b818801915088601f8301126131c657600080fd5b8135818111156131d557600080fd5b8960208285010111156131e757600080fd5b9699959850939650602001949392505050565b60005b838110156132155781810151838201526020016131fd565b83811115613224576000848401525b50505050565b60208152600082518060208401526132498160408501602087016131fa565b601f01601f19169190910160400192915050565b6000806040838503121561327057600080fd5b823561327b8161314c565b946020939093013593505050565b600080600080600060a086880312156132a157600080fd5b85356132ac8161314c565b945060208601356132bc8161314c565b9350604086013592506060860135915060808601356132da8161314c565b809150509295509295909350565b6000806000606084860312156132fd57600080fd5b83356133088161314c565b925060208401356133188161314c565b929592945050506040919091013590565b60006020828403121561333b57600080fd5b81356123658161314c565b803563ffffffff81168114612f5b57600080fd5b6000806000806080858703121561337057600080fd5b843561337b8161314c565b9350602085013561338b8161314c565b925061339960408601613346565b91506133a760608601613346565b905092959194509250565b600080600080600080600060e0888a0312156133cd57600080fd5b87356133d88161314c565b965060208801356133e88161314c565b95506040880135945060608801359350608088013560ff8116811461340c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561343c57600080fd5b82356134478161314c565b915060208301356134578161314c565b809150509250929050565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b60208082526021908201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e6040820152601560fa1b606082015260800190565b6020808252601d908201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604082015260600190565b6020808252601190820152705245514c503a20494e56414c49445f544f60781b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561358a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156135b9576135b9613591565b500390565b6020808252818101527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604082015260600190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b60006020828403121561362757600080fd5b8151801515811461236557600080fd5b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b634e487b7160e01b600052601260045260246000fd5b6000826136905761369061366b565b500490565b600063ffffffff838116908316818110156136b2576136b2613591565b039392505050565b6000602082840312156136cc57600080fd5b81516123658161314c565b60006000198214156136eb576136eb613591565b5060010190565b600082516137048184602087016131fa565b9190910192915050565b600081600019048311821515161561372857613728613591565b500290565b6000821982111561374057613740613591565b500190565b6000826137545761375461366b565b500690565b60006001600160701b038083168185168183048111821515161561377f5761377f613591565b02949350505050565b60006001600160701b03808416806137a2576137a261366b565b92169190910492915050565b60006001600160e01b038281168482168115158284048211161561377f5761377f613591565b60006001600160e01b03838116806137a2576137a261366b56fea2646970667358221220e613fdd3871f4bab64904fad36a818149c01df48a2ff8d3b92b5e4b11d55e2c464736f6c634300080a0033a2646970667358221220f9ab6335fea81ae0d371083112d9a8100a62ddbe97a51d0c61a44a41f4f1431b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4306,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4308,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4310,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4325,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4328,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4332,
        "contract": "contracts/test/RequiemFactory_flat.sol:RequiemFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
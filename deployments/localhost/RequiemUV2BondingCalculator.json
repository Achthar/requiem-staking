{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_REQT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "REQT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getKValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "k_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "markdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf67183503f774a812aca6dec71cd402514717079cfccbfc450a625f4f66b9926",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "716376",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x416852107fdb1d1044bf23d1a678134627140cf0c57226b14c180e040454a6cf",
    "transactionHash": "0xf67183503f774a812aca6dec71cd402514717079cfccbfc450a625f4f66b9926",
    "logs": [],
    "blockNumber": 37,
    "cumulativeGasUsed": "716376",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788"
  ],
  "solcInputHash": "0f20472ed843c15e57cd0f08d39ae87b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REQT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"REQT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getKValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"markdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Bonding calculator for weighted pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemUV2BondingCalculator.sol\":\"RequiemUV2BondingCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RequiemUV2BondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2TypePair.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./libraries/math/SqrtMath.sol\\\";\\n\\n/**\\n * Bonding calculator for weighted pairs\\n */\\ncontract RequiemUV2BondingCalculator is IBondingCalculator {\\n  using FixedPoint for *;\\n  using SqrtMath for uint256;\\n\\n  address public immutable REQT;\\n\\n  constructor(address _REQT) {\\n    require(_REQT != address(0));\\n    REQT = _REQT;\\n  }\\n\\n  function getKValue(address _pair) public view returns (uint256 k_) {\\n    uint256 token0 = IERC20(IUniswapV2TypePair(_pair).token0()).decimals();\\n    uint256 token1 = IERC20(IUniswapV2TypePair(_pair).token1()).decimals();\\n    uint256 decimals = token0 + token1 - IERC20(_pair).decimals();\\n\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2TypePair(_pair)\\n      .getReserves();\\n    k_ = (reserve0 * reserve1) / (10**decimals);\\n  }\\n\\n  function getTotalValue(address _pair) public view returns (uint256 _value) {\\n    _value = getKValue(_pair).sqrrt() * 2;\\n  }\\n\\n  function valuation(address _pair, uint256 amount_)\\n    external\\n    view\\n    override\\n    returns (uint256 _value)\\n  {\\n    uint256 totalValue = getTotalValue(_pair);\\n    uint256 totalSupply = IUniswapV2TypePair(_pair).totalSupply();\\n\\n    _value = totalValue\\n       * FixedPoint.fraction(amount_, totalSupply).decode112with18()\\n      /1e18;\\n  }\\n\\n  function markdown(address _pair) external view returns (uint256) {\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2TypePair(_pair)\\n      .getReserves();\\n\\n    uint256 reserve;\\n    if (IUniswapV2TypePair(_pair).token0() == REQT) {\\n      reserve = reserve1;\\n    } else {\\n      reserve = reserve0;\\n    }\\n    return\\n      reserve * (2 * (10**IERC20(REQT).decimals())) / getTotalValue(_pair);\\n  }\\n}\\n\",\"keccak256\":\"0xca65da0bf3c2da7316587c8cb3d5a1856e7d54a779f2d66c0d9a71a514b5e0d1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc8de46b5781a713fd63eb204be9a9a821aab6468f5ca504ec90c1aec6b8a3bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBondingCalculator {\\n  function valuation(address pair_, uint256 amount_)\\n    external\\n    view\\n    returns (uint256 _value);\\n}\\n\",\"keccak256\":\"0x7dfca3a4d16834d9182b3521f3b7ce4513e66099ca8499110283a01117171a83\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2TypePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IUniswapV2TypePair {\\n  function totalSupply() external view returns (uint256);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5dcb509ad7e6640bb7dc00145c77847404d023115cda31198eef5690b34b43b5\",\"license\":\"MIT\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= type(uint144).max) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1458dee48a18e010fc603e371c30ead771eaff8b1ead78af037c5a6a6a285e72\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable no-inline-assembly, reason-string, max-line-length\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2603e02c3be8e366637ac7b8e1d84b8b896b191ce5e25cc0fa6e6d395e832ff1\",\"license\":\"MIT\"},\"contracts/libraries/math/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nlibrary SqrtMath {\\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n    if (a > 3) {\\n      c = a;\\n      uint256 b = a / 2 + 1;\\n      while (b < c) {\\n        c = b;\\n        b = ((a / b) + b) / 2;\\n      }\\n    } else if (a != 0) {\\n      c = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe1fc577a8b5bb605a7acadceca306bcda1d8ea871cf976a61cd82c4fac4904ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ca6380380610ca683398101604081905261002f91610053565b6001600160a01b03811661004257600080fd5b6001600160a01b0316608052610083565b60006020828403121561006557600080fd5b81516001600160a01b038116811461007c57600080fd5b9392505050565b608051610bfb6100ab6000396000818160710152818161019a01526102480152610bfb6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80634249719f116100505780634249719f146100d1578063490084ef146100e457806368637549146100f757600080fd5b806302bb41e51461006c57806332da80a3146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c36100be366004610930565b61010a565b6040519081526020016100a7565b6100c36100df36600461094d565b6102fb565b6100c36100f2366004610930565b610394565b6100c3610105366004610930565b61064d565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101719190610997565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022491906109e7565b6001600160a01b0316141561023a57508061023d565b50815b6102468561064d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610a04565b6102d390600a610b21565b6102de906002610b30565b6102e89083610b30565b6102f29190610b4f565b95945050505050565b6000806103078461064d565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610b71565b9050670de0b6b3a764000061038a6103858684610671565b6107d3565b6102e89084610b30565b600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f991906109e7565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610a04565b60ff1690506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906109e7565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610a04565b60ff1690506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610a04565b60ff1661059a8385610b8a565b6105a49190610ba2565b9050600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610997565b506dffffffffffffffffffffffffffff918216935016905061062e83600a610bb9565b6106388284610b30565b6106429190610b4f565b979650505050505050565b600061066061065b83610394565b6107f3565b61066b906002610b30565b92915050565b604080516020810190915260008152600082116106fb5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b82610715575060408051602081019091526000815261066b565b71ffffffffffffffffffffffffffffffffffff83116107b757600061073e83607086901b610b4f565b90506001600160e01b038111156107975760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000060448201526064016106f2565b6040518060200160405280826001600160e01b031681525091505061066b565b600061073e846e01000000000000000000000000000085610863565b805160009061066b906612725dd1d243ab906001600160e01b0316610b4f565b60006003821115610854575080600061080d600283610b4f565b610818906001610b8a565b90505b8181101561084e579050806002816108338186610b4f565b61083d9190610b8a565b6108479190610b4f565b905061081b565b50919050565b811561085e575060015b919050565b60008080600019858709858702925082811083820303915050806000141561089d576000841161089257600080fd5b508290049050610911565b8084116108a957600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6001600160a01b038116811461092d57600080fd5b50565b60006020828403121561094257600080fd5b813561091181610918565b6000806040838503121561096057600080fd5b823561096b81610918565b946020939093013593505050565b80516dffffffffffffffffffffffffffff8116811461085e57600080fd5b6000806000606084860312156109ac57600080fd5b6109b584610979565b92506109c360208501610979565b9150604084015163ffffffff811681146109dc57600080fd5b809150509250925092565b6000602082840312156109f957600080fd5b815161091181610918565b600060208284031215610a1657600080fd5b815160ff8116811461091157600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610a78578160001904821115610a5e57610a5e610a27565b80851615610a6b57918102915b93841c9390800290610a42565b509250929050565b600082610a8f5750600161066b565b81610a9c5750600061066b565b8160018114610ab25760028114610abc57610ad8565b600191505061066b565b60ff841115610acd57610acd610a27565b50506001821b61066b565b5060208310610133831016604e8410600b8410161715610afb575081810a61066b565b610b058383610a3d565b8060001904821115610b1957610b19610a27565b029392505050565b600061091160ff841683610a80565b6000816000190483118215151615610b4a57610b4a610a27565b500290565b600082610b6c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610b8357600080fd5b5051919050565b60008219821115610b9d57610b9d610a27565b500190565b600082821015610bb457610bb4610a27565b500390565b60006109118383610a8056fea26469706673582212202dea00de795edd434535bf0fd4eb06fa8d38b1b92a764501be2551aea92fe4ba64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80634249719f116100505780634249719f146100d1578063490084ef146100e457806368637549146100f757600080fd5b806302bb41e51461006c57806332da80a3146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c36100be366004610930565b61010a565b6040519081526020016100a7565b6100c36100df36600461094d565b6102fb565b6100c36100f2366004610930565b610394565b6100c3610105366004610930565b61064d565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101719190610997565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022491906109e7565b6001600160a01b0316141561023a57508061023d565b50815b6102468561064d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610a04565b6102d390600a610b21565b6102de906002610b30565b6102e89083610b30565b6102f29190610b4f565b95945050505050565b6000806103078461064d565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610b71565b9050670de0b6b3a764000061038a6103858684610671565b6107d3565b6102e89084610b30565b600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f991906109e7565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610a04565b60ff1690506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906109e7565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610a04565b60ff1690506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610a04565b60ff1661059a8385610b8a565b6105a49190610ba2565b9050600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610997565b506dffffffffffffffffffffffffffff918216935016905061062e83600a610bb9565b6106388284610b30565b6106429190610b4f565b979650505050505050565b600061066061065b83610394565b6107f3565b61066b906002610b30565b92915050565b604080516020810190915260008152600082116106fb5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b82610715575060408051602081019091526000815261066b565b71ffffffffffffffffffffffffffffffffffff83116107b757600061073e83607086901b610b4f565b90506001600160e01b038111156107975760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000060448201526064016106f2565b6040518060200160405280826001600160e01b031681525091505061066b565b600061073e846e01000000000000000000000000000085610863565b805160009061066b906612725dd1d243ab906001600160e01b0316610b4f565b60006003821115610854575080600061080d600283610b4f565b610818906001610b8a565b90505b8181101561084e579050806002816108338186610b4f565b61083d9190610b8a565b6108479190610b4f565b905061081b565b50919050565b811561085e575060015b919050565b60008080600019858709858702925082811083820303915050806000141561089d576000841161089257600080fd5b508290049050610911565b8084116108a957600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6001600160a01b038116811461092d57600080fd5b50565b60006020828403121561094257600080fd5b813561091181610918565b6000806040838503121561096057600080fd5b823561096b81610918565b946020939093013593505050565b80516dffffffffffffffffffffffffffff8116811461085e57600080fd5b6000806000606084860312156109ac57600080fd5b6109b584610979565b92506109c360208501610979565b9150604084015163ffffffff811681146109dc57600080fd5b809150509250925092565b6000602082840312156109f957600080fd5b815161091181610918565b600060208284031215610a1657600080fd5b815160ff8116811461091157600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610a78578160001904821115610a5e57610a5e610a27565b80851615610a6b57918102915b93841c9390800290610a42565b509250929050565b600082610a8f5750600161066b565b81610a9c5750600061066b565b8160018114610ab25760028114610abc57610ad8565b600191505061066b565b60ff841115610acd57610acd610a27565b50506001821b61066b565b5060208310610133831016604e8410600b8410161715610afb575081810a61066b565b610b058383610a3d565b8060001904821115610b1957610b19610a27565b029392505050565b600061091160ff841683610a80565b6000816000190483118215151615610b4a57610b4a610a27565b500290565b600082610b6c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610b8357600080fd5b5051919050565b60008219821115610b9d57610b9d610a27565b500190565b600082821015610bb457610bb4610a27565b500390565b60006109118383610a8056fea26469706673582212202dea00de795edd434535bf0fd4eb06fa8d38b1b92a764501be2551aea92fe4ba64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Bonding calculator for weighted pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
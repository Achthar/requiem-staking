{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1396ce1483ee1219a13af9708b04ff19dce4f4b3b282abaada9bdceb8b30cf2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5365336",
    "logsBloom": "0x
    "blockHash": "0x2705a750875ad0641ee1e6ff81c27ce23179021738eb521f09bba8a22a1648cd",
    "transactionHash": "0xa1396ce1483ee1219a13af9708b04ff19dce4f4b3b282abaada9bdceb8b30cf2",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5365336",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "17b4640439d5ed2c83a0e2aca18c8472",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/RequiemFormula_flat.sol\":\"RequiemFormula\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/RequiemFormula_flat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: interfaces/IRequiemFactory.sol\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint32 tokenWeight0,\\n    uint32 swapFee,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function formula() external view returns (address);\\n\\n  function protocolFee() external view returns (uint256);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function isPair(address) external view returns (bool);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair);\\n\\n  function getWeightsAndSwapFee(address pair)\\n    external\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    );\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n\\n  function setProtocolFee(uint256) external;\\n}\\n\\n// File: interfaces/IRequiemERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\n// File: interfaces/IRequiemPair.sol\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\\n// File: interfaces/IRequiemFormula.sol\\n\\npragma solidity >=0.8.10;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n  function getReserveAndWeights(address pair, address tokenA)\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountIn);\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountIn);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view returns (bool);\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    returns (address tokenB);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view returns (uint256 amount);\\n}\\n\\n// File: RequiemFormula.sol\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract RequiemFormula is IRequiemFormula {\\n  uint256 private constant ONE = 1;\\n  uint8 private constant MIN_PRECISION = 32;\\n  uint8 private constant MAX_PRECISION = 127;\\n\\n  uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n  uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n  uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n  uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n  uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n  uint256 private constant OPT_LOG_MAX_VAL =\\n    0x15bf0a8b1457695355fb8ac404e7a79e3;\\n  uint256 private constant OPT_EXP_MAX_VAL =\\n    0x800000000000000000000000000000000;\\n\\n  uint256 private constant LAMBERT_CONV_RADIUS =\\n    0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n  uint256 private constant LAMBERT_POS2_SAMPLE =\\n    0x0003060c183060c183060c183060c18306;\\n  uint256 private constant LAMBERT_POS2_MAXVAL =\\n    0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n  uint256 private constant LAMBERT_POS3_MAXVAL =\\n    0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n  uint256 private constant MAX_UNF_WEIGHT =\\n    0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n  uint256[128] private maxExpArray;\\n\\n  function initMaxExpArray() internal {\\n    maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n    maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n    maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n    maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n    maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n    maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n    maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n    maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n    maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n    maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n    maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n    maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n    maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n    maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n    maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n    maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n    maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n    maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n    maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n    maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n    maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n    maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n    maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n    maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n    maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n    maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n    maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n    maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n    maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n    maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n    maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n    maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n    maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n    maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n    maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n    maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n    maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n    maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n    maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n    maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n    maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n    maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n    maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n    maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n    maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n    maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n    maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n    maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n    maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n    maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n    maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n    maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n    maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n    maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n    maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n    maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n    maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n    maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n    maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n    maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n    maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n    maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n    maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n    maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n    maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n    maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n    maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n    maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n    maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n    maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n    maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n    maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n    maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n    maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n    maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n    maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n    maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n    maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n    maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n    maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n    maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n    maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n    maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n    maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n    maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n    maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n    maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n    maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n    maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n    maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n    maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n    maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n    maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n    maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n    maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n    maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n  }\\n\\n  constructor() {\\n    initMaxExpArray();\\n  }\\n\\n  /**\\n   * @dev General Description:\\n   *     Determine a value of precision.\\n   *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n   *     Return the result along with the precision used.\\n   *\\n   * Detailed Description:\\n   *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n   *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n   *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n   *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n   *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n   *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n   *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n   *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n   *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n   *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n   */\\n  function power(\\n    uint256 _baseN,\\n    uint256 _baseD,\\n    uint32 _expN,\\n    uint32 _expD\\n  ) internal view returns (uint256, uint8) {\\n    require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n    require(_baseN < MAX_NUM);\\n\\n    uint256 baseLog;\\n    uint256 base = (_baseN * FIXED_1) / _baseD;\\n    if (base < OPT_LOG_MAX_VAL) {\\n      baseLog = optimalLog(base);\\n    } else {\\n      baseLog = generalLog(base);\\n    }\\n\\n    uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n    if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n      return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n    } else {\\n      uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n      return (\\n        generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision),\\n        precision\\n      );\\n    }\\n  }\\n  \\n  /**\\n   * @dev computes log(x / FIXED_1) * FIXED_1.\\n   * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n   */\\n  function generalLog(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n    if (x >= FIXED_2) {\\n      uint8 count = floorLog2(x / FIXED_1);\\n      x >>= count;\\n      // now x < 2\\n      res = count * FIXED_1;\\n    }\\n\\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n    if (x > FIXED_1) {\\n      for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n        x = (x * x) / FIXED_1;\\n        // now 1 < x < 4\\n        if (x >= FIXED_2) {\\n          x >>= 1;\\n          // now 1 < x < 2\\n          res += ONE << (i - 1);\\n        }\\n      }\\n    }\\n\\n    return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n   */\\n  function floorLog2(uint256 _n) internal pure returns (uint8) {\\n    uint8 res = 0;\\n\\n    if (_n < 256) {\\n      // At most 8 iterations\\n      while (_n > 1) {\\n        _n >>= 1;\\n        res += 1;\\n      }\\n    } else {\\n      // Exactly 8 iterations\\n      for (uint8 s = 128; s > 0; s >>= 1) {\\n        if (_n >= (ONE << s)) {\\n          _n >>= s;\\n          res |= s;\\n        }\\n      }\\n    }\\n\\n    return res;\\n  }\\n\\n  /**\\n   * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n   * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n   * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n   */\\n  function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n    uint8 lo = MIN_PRECISION;\\n    uint8 hi = MAX_PRECISION;\\n\\n    while (lo + 1 < hi) {\\n      uint8 mid = (lo + hi) / 2;\\n      if (maxExpArray[mid] >= _x) lo = mid;\\n      else hi = mid;\\n    }\\n\\n    if (maxExpArray[hi] >= _x) return hi;\\n    if (maxExpArray[lo] >= _x) return lo;\\n\\n    require(false);\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n   * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n   * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n   * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n   * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n   */\\n  function generalExp(uint256 _x, uint8 _precision)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 xi = _x;\\n    uint256 res = 0;\\n\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n    // add x^02 * (33! / 02!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x116b96f757c380fb287fd0e40000000;\\n    // add x^03 * (33! / 03!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n    // add x^04 * (33! / 04!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00defabf91302cd95b9ffda50000000;\\n    // add x^05 * (33! / 05!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x002529ca9832b22439efff9b8000000;\\n    // add x^06 * (33! / 06!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n    // add x^07 * (33! / 07!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n    // add x^08 * (33! / 08!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000012e066e7b839fa050c309000000;\\n    // add x^09 * (33! / 09!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n    // add x^10 * (33! / 10!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n    // add x^11 * (33! / 11!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n    // add x^12 * (33! / 12!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000048177ebe1fa812375200000;\\n    // add x^13 * (33! / 13!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000005263fe90242dcbacf00000;\\n    // add x^14 * (33! / 14!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000057e22099c030d94100000;\\n    // add x^15 * (33! / 15!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000057e22099c030d9410000;\\n    // add x^16 * (33! / 16!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000052b6b54569976310000;\\n    // add x^17 * (33! / 17!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000004985f67696bf748000;\\n    // add x^18 * (33! / 18!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000003dea12ea99e498000;\\n    // add x^19 * (33! / 19!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000031880f2214b6e000;\\n    // add x^20 * (33! / 20!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000025bcff56eb36000;\\n    // add x^21 * (33! / 21!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000001b722e10ab1000;\\n    // add x^22 * (33! / 22!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000001317c70077000;\\n    // add x^23 * (33! / 23!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000cba84aafa00;\\n    // add x^24 * (33! / 24!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000082573a0a00;\\n    // add x^25 * (33! / 25!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000005035ad900;\\n    // add x^26 * (33! / 26!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000000000002f881b00;\\n    // add x^27 * (33! / 27!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000001b29340;\\n    // add x^28 * (33! / 28!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000000000efc40;\\n    // add x^29 * (33! / 29!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000007fe0;\\n    // add x^30 * (33! / 30!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000420;\\n    // add x^31 * (33! / 31!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000021;\\n    // add x^32 * (33! / 32!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000001;\\n    // add x^33 * (33! / 33!)\\n\\n    return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n  }\\n\\n  /**\\n   * @dev computes log(x / FIXED_1) * FIXED_1\\n   * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n   * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n   * Detailed description:\\n   * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n   * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n   * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n   * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n   * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n   */\\n  function optimalLog(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    uint256 y;\\n    uint256 z;\\n    uint256 w;\\n\\n    if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n      res += 0x40000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n    }\\n    // add 1 / 2^1\\n    if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n      res += 0x20000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n    }\\n    // add 1 / 2^2\\n    if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n      res += 0x10000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n    }\\n    // add 1 / 2^3\\n    if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n      res += 0x08000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n    }\\n    // add 1 / 2^4\\n    if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n      res += 0x04000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n    }\\n    // add 1 / 2^5\\n    if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n      res += 0x02000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n    }\\n    // add 1 / 2^6\\n    if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n      res += 0x01000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n    }\\n    // add 1 / 2^7\\n    if (x >= 0x808040155aabbbe9451521693554f733) {\\n      res += 0x00800000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n    }\\n    // add 1 / 2^8\\n\\n    z = y = x - FIXED_1;\\n    w = (y * y) / FIXED_1;\\n    res +=\\n      (z * (0x100000000000000000000000000000000 - y)) /\\n      0x100000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^01 / 01 - y^02 / 02\\n    res +=\\n      (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\\n      0x200000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^03 / 03 - y^04 / 04\\n    res +=\\n      (z * (0x099999999999999999999999999999999 - y)) /\\n      0x300000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^05 / 05 - y^06 / 06\\n    res +=\\n      (z * (0x092492492492492492492492492492492 - y)) /\\n      0x400000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^07 / 07 - y^08 / 08\\n    res +=\\n      (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\\n      0x500000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^09 / 09 - y^10 / 10\\n    res +=\\n      (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\\n      0x600000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^11 / 11 - y^12 / 12\\n    res +=\\n      (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\\n      0x700000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^13 / 13 - y^14 / 14\\n    res +=\\n      (z * (0x088888888888888888888888888888888 - y)) /\\n      0x800000000000000000000000000000000;\\n    // add y^15 / 15 - y^16 / 16\\n\\n    return res;\\n  }\\n\\n  /**\\n   * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n   * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n   * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n   * Detailed description:\\n   * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n   * - The exponentiation of each binary exponent is given (pre-calculated)\\n   * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n   * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n   * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n   */\\n  function optimalExp(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    uint256 y;\\n    uint256 z;\\n\\n    z = y = x % 0x10000000000000000000000000000000;\\n    // get the input modulo 2^(-3)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x10e1b3be415a0000;\\n    // add y^02 * (20! / 02!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x05a0913f6b1e0000;\\n    // add y^03 * (20! / 03!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0168244fdac78000;\\n    // add y^04 * (20! / 04!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x004807432bc18000;\\n    // add y^05 * (20! / 05!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000c0135dca04000;\\n    // add y^06 * (20! / 06!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0001b707b1cdc000;\\n    // add y^07 * (20! / 07!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000036e0f639b800;\\n    // add y^08 * (20! / 08!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x00000618fee9f800;\\n    // add y^09 * (20! / 09!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000009c197dcc00;\\n    // add y^10 * (20! / 10!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000e30dce400;\\n    // add y^11 * (20! / 11!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000012ebd1300;\\n    // add y^12 * (20! / 12!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000017499f00;\\n    // add y^13 * (20! / 13!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000001a9d480;\\n    // add y^14 * (20! / 14!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x00000000001c6380;\\n    // add y^15 * (20! / 15!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000000001c638;\\n    // add y^16 * (20! / 16!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000001ab8;\\n    // add y^17 * (20! / 17!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000000000017c;\\n    // add y^18 * (20! / 18!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000000014;\\n    // add y^19 * (20! / 19!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000000001;\\n    // add y^20 * (20! / 20!)\\n    res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n    if ((x & 0x010000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\\n        0x18ebef9eac820ae8682b9793ac6d1e776;\\n    // multiply by e^2^(-3)\\n    if ((x & 0x020000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\\n        0x1368b2fc6f9609fe7aceb46aa619baed4;\\n    // multiply by e^2^(-2)\\n    if ((x & 0x040000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\\n        0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n    // multiply by e^2^(-1)\\n    if ((x & 0x080000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\\n        0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n    // multiply by e^2^(+0)\\n    if ((x & 0x100000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\\n        0x00960aadc109e7a3bf4578099615711ea;\\n    // multiply by e^2^(+1)\\n    if ((x & 0x200000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x00960aadc109e7a3bf4578099615711d7) /\\n        0x0002bf84208204f5977f9a8cf01fdce3d;\\n    // multiply by e^2^(+2)\\n    if ((x & 0x400000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\\n        0x0000003c6ab775dd0b95b4cbee7e65d11;\\n    // multiply by e^2^(+3)\\n\\n    return res;\\n  }\\n\\n  function getReserveAndWeights(address pair, address tokenA)\\n    public\\n    view\\n    override\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    )\\n  {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n    uint32 tokenWeight0;\\n    uint32 tokenWeight1;\\n    (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n    if (tokenA == IRequiemPair(pair).token0()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemPair(pair).token1(),\\n        reserve0,\\n        reserve1,\\n        tokenWeight0,\\n        tokenWeight1\\n      );\\n    } else if (tokenA == IRequiemPair(pair).token1()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemPair(pair).token0(),\\n        reserve1,\\n        reserve0,\\n        tokenWeight1,\\n        tokenWeight0\\n      );\\n    } else {\\n      revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    }\\n  }\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    )\\n  {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n    uint32 tokenWeight0;\\n    uint32 tokenWeight1;\\n    (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(\\n      factory,\\n      pair\\n    );\\n\\n    if (tokenA == IRequiemPair(pair).token0()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemPair(pair).token1(),\\n        reserve0,\\n        reserve1,\\n        tokenWeight0,\\n        tokenWeight1\\n      );\\n    } else if (tokenA == IRequiemPair(pair).token1()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemPair(pair).token0(),\\n        reserve1,\\n        reserve0,\\n        tokenWeight1,\\n        tokenWeight0\\n      );\\n    } else {\\n      revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n   *\\n   * Formula:\\n   * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n   *\\n   * @param amountIn                  source reserve amount\\n   * @param reserveIn    source reserve balance\\n   * @param reserveOut    target reserve balance\\n   * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n   * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n   * @param swapFee                  swap fee of the conversion\\n   *\\n   * @return amountOut\\n   */\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) public view override returns (uint256 amountOut) {\\n    // validate input\\n    require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn * (10000 - swapFee);\\n    // special case for equal weights\\n    if (tokenWeightIn == tokenWeightOut) {\\n      return\\n        (reserveOut * amountInWithFee) / (reserveIn * 10000 + amountInWithFee);\\n    }\\n\\n    uint256 result;\\n    uint8 precision;\\n    uint256 baseN = reserveIn * 10000 + amountInWithFee;\\n    (result, precision) = power(\\n      baseN,\\n      reserveIn * 10000,\\n      tokenWeightIn,\\n      tokenWeightOut\\n    );\\n\\n    uint256 temp1 = reserveOut * result;\\n    uint256 temp2 = reserveOut << precision;\\n    amountOut = (temp1 - temp2) / result;\\n  }\\n\\n  /**\\n   * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n   *\\n   * Formula:\\n   * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n   *\\n   * @param amountOut     target reserve amount\\n   * @param reserveIn    source reserve balance\\n   * @param reserveOut    target reserve balance\\n   * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n   * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n   * @param swapFee                  swap fee of the conversion\\n   *\\n   * @return amountIn\\n   */\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) public view override returns (uint256 amountIn) {\\n    // validate input\\n    require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    // special case for equal weights\\n    if (tokenWeightIn == tokenWeightOut) {\\n      uint256 numerator = reserveIn * amountOut * 10000;\\n      uint256 denominator = (reserveOut - amountOut) * (10000 - swapFee);\\n      return numerator / denominator + 1;\\n    }\\n\\n    uint256 result;\\n    uint8 precision;\\n    uint256 baseD = reserveOut - amountOut;\\n    (result, precision) = power(\\n      reserveOut,\\n      baseD,\\n      tokenWeightOut,\\n      tokenWeightIn\\n    );\\n    uint256 baseReserveIn = reserveIn * 10000;\\n    uint256 temp1 = baseReserveIn * result;\\n    uint256 temp2 = baseReserveIn << precision;\\n    amountIn = ((temp1 - temp2) >> precision) / (10000 - swapFee) + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[0] = amountIn;\\n    address currentTokenIn = tokenIn;\\n    for (uint256 i = 0; i < path.length; i++) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getReserveAndWeights(path[i], currentTokenIn);\\n      amounts[i + 1] = getAmountOut(\\n        amounts[i],\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(\\n      currentTokenIn == tokenOut,\\n      \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\"\\n    );\\n  }\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[0] = amountIn;\\n    address currentTokenIn = tokenIn;\\n\\n    for (uint256 i = 0; i < path.length; i++) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getFactoryReserveAndWeights(factory, path[i], currentTokenIn);\\n      amounts[i + 1] = getAmountOut(\\n        amounts[i],\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(\\n      currentTokenIn == tokenOut,\\n      \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\"\\n    );\\n  }\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view override returns (uint256 amountOut) {\\n    (\\n      ,\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut,\\n      uint32 swapFee\\n    ) = getReserveAndWeights(pair, tokenIn);\\n    amountOut = getAmountOut(\\n      amountIn,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[amounts.length - 1] = amountOut;\\n    address currentTokenIn = tokenOut;\\n    for (uint256 i = path.length; i > 0; i--) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n      amounts[i - 1] = getAmountIn(\\n        amounts[i],\\n        reserveOut,\\n        reserveIn,\\n        tokenWeightOut,\\n        tokenWeightIn,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n  }\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[amounts.length - 1] = amountOut;\\n    address currentTokenIn = tokenOut;\\n    for (uint256 i = path.length; i > 0; i--) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getFactoryReserveAndWeights(factory, path[i - 1], currentTokenIn);\\n      amounts[i - 1] = getAmountIn(\\n        amounts[i],\\n        reserveOut,\\n        reserveIn,\\n        tokenWeightOut,\\n        tokenWeightIn,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n  }\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view override returns (uint256 amountIn) {\\n    (\\n      ,\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut,\\n      uint32 swapFee\\n    ) = getReserveAndWeights(pair, tokenIn);\\n    amountIn = getAmountIn(\\n      amountOut,\\n      reserveOut,\\n      reserveIn,\\n      tokenWeightOut,\\n      tokenWeightIn,\\n      swapFee\\n    );\\n  }\\n\\n  function getWeightsAndSwapFee(address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    try IRequiemPair(pair).getTokenWeights() returns (\\n      uint32 _tokenWeight0,\\n      uint32 _tokenWeight1\\n    ) {\\n      return (_tokenWeight0, _tokenWeight1, IRequiemPair(pair).getSwapFee());\\n    } catch Error(string memory reason) {\\n      revert(reason);\\n    } catch (\\n      bytes memory /*lowLevelData*/\\n    ) {\\n      return (50, 50, 30);\\n    }\\n  }\\n\\n  function getFactoryWeightsAndSwapFee(address factory, address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    return IRequiemFactory(factory).getWeightsAndSwapFee(pair);\\n  }\\n\\n  // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n  //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n  //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view override returns (bool) {\\n    if (tokenWeight0 == 50) {\\n      return balance0Adjusted * balance1Adjusted >= reserve0 * reserve1;\\n    }\\n    if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n      return true;\\n    }\\n    if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n      return false;\\n    }\\n    uint32 w0 = tokenWeight0;\\n    uint32 w1 = 100 - w0;\\n\\n    uint256 r0;\\n    uint256 p0;\\n    uint256 r1;\\n    uint256 p1;\\n    if (balance0Adjusted >= reserve0) {\\n      (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n      (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n    } else {\\n      (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n      (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n    }\\n    uint256 minP = p0 < p1 ? p0 : p1;\\n    p0 = p0 - minP;\\n    p1 = p1 - minP;\\n    return (r0 >> p0) <= (r1 >> p1);\\n  }\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    public\\n    pure\\n    override\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n  }\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n    require(\\n      token0 == IRequiemPair(pair).token0() &&\\n        token1 == IRequiemPair(pair).token1(),\\n      \\\"RequiemFormula: Invalid token\\\"\\n    );\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    override\\n    returns (address tokenB)\\n  {\\n    address token0 = IRequiemPair(pair).token0();\\n    address token1 = IRequiemPair(pair).token1();\\n    require(\\n      token0 == tokenA || token1 == tokenA,\\n      \\\"RequiemFormula: Invalid tokenA\\\"\\n    );\\n    tokenB = token0 == tokenA ? token1 : token0;\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure override returns (uint256 amountB) {\\n    require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view override returns (uint256 amount) {\\n    if (collectedFee0 > 0) {\\n      (uint256 r0, uint256 p0) = power(\\n        uint256(collectedFee0) + reserve0,\\n        reserve0,\\n        tokenWeight0,\\n        100\\n      );\\n      amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n    }\\n    if (collectedFee1 > 0) {\\n      (uint256 r1, uint256 p1) = power(\\n        uint256(collectedFee1) + reserve1,\\n        reserve1,\\n        tokenWeight1,\\n        100\\n      );\\n      amount = amount + ((totalLiquidity * r1) >> p1) - totalLiquidity;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x66f46baffa6b41b5bf6489ae3fb12ce8539034ef6013773403208870850ac37e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061073f6001641c35fedd1560601b036020556001646c3390ecc9605e1b036021556001640cf801476160611b0360225560016431bdb23e1d605f1b0360235560016502fb1d8fe083605b1b0360245560016505b771955b37605a1b036025556001650af67a93bb5160591b0360265560016515060c256cb360581b036027556001651428a2f98d7360581b036028556001654d515663970960561b03602955600165944620b0e70f60551b03602a55600166011c592761c66760541b03602b5560016602214d10d014eb60531b03602c55600166020ade36b7dbef60531b03602d5560016603eab73b3bbfe360521b03602e556001660782ee3593f6d760511b03602f556001661ccf4b44bb4821604f1b0360305560016606e7f88ad8a77760511b0360315560016669f3d1c921891d604d1b03603255600166cb2ff529eb71e5604c1b03603355600166c2d415c3db974b604c1b0360345560016702eb40f9f620fda7604a1b0360355560016705990681d961a1eb60491b03603655600167055e12902701414760491b0360375560016714962dee9dc9764160471b0360385560016704ef57b9b560fab560491b0360395560016712ed7b32a58f552b60471b03603a556001679131271922eaa60760441b03603b556001678b380f3558668c4760441b03603c556001680215f77c045fbe885760421b03603d556001600160831b03603e556001670f577eded5773a1160471b03603f556001680eb5ec597592befbf5603f1b036040556001681c35fedd14b861eb05603e1b036041556001683619c87664579bc94b603d1b0360425560016867c00a3b07ffc01fd7603c1b03604355600168c6f6c8f8739773a7a5603b1b03604455600168bec763f8209b7a72b1603b1b0360455560016902dbb8caad9b7097b91b60391b03604655600169057b3d49dda84556d6f760381b03604755600169054183095b2c8ececf3160381b036048556001690a14517cc6b9457111ef60371b0360495560016913545598e5c23276ccf160361b03604a556001692511882c39c3adea96ff60351b03604b55600169471649d87199aa99075760341b03604c557004429a21a029d4c1457cfbffffffffffff604d55700415bc6d6fb7dd71af2cb3ffffffffffff604e557003eab73b3bbfe282243ce1ffffffffffff604f557003c1771ac9fb6b4c18e229ffffffffffff605055700399e96897690418f785257fffffffffff605155700373fc456c53bb779bf0ea9fffffffffff60525570034f9e8e490c48e67e6ab8bfffffffffff60535570032cbfd4a7adc790560b3337ffffffffff60545570030b50570f6e5d2acca94613ffffffffff6055557002eb40f9f620fda6b56c2861ffffffffff6056557002cc8340ecb0d0f520a6af58ffffffffff6057557002af09481380a0a35cf1ba02ffffffffff605855700292c5bdd3b92ec810287b1b3fffffffff605955700277abdcdab07d5a77ac6d6b9fffffffff605a5570025daf6654b1eaa55fd64df5efffffffff605b55700244c49c648baa98192dce88b7ffffffff605c5570022ce03cd5619a311b2471268bffffffff605d55700215f77c045fbe885654a44a0fffffffff605e556001600160811b03605f557001eaefdbdaaee7421fc4d3ede5ffffffff6060557001d6bd8b2eb257df7e8ca57b09bfffffff6061557001c35fedd14b861eb0443f7f133fffffff6062557001b0ce43b322bcde4a56e8ada5afffffff60635570019f0028ec1fff007f5a195a39dfffffff60645570018ded91f0e72ee74f49b15ba527ffffff60655570017d8ec7f04136f4e5615fd41a63ffffff60665570016ddc6556cdb84bdc8d12d22e6fffffff60675570015ecf52776a1155b5bd8395814f7fffff60685570015060c256cb23b3b3cc3754cf40ffffff6069557001428a2f98d728ae223ddab715be3fffff606a5570013545598e5c23276ccf0ede68034fffff606b557001288c4161ce1d6f54b7f61081194fffff606c5570011c592761c666aa641d5a01a40f17ffff606d55700110a688680a7530515f3e6e6cfdcdffff606e557001056f1b5bedf75c6bcb2ce8aed428ffff606f556ffaadceceeff8a0890f3875f008277fff6070556ff05dc6b27edad306388a600f6ba0bfff6071556fe67a5a25da41063de1495d5b18cdbfff6072556fdcff115b14eedde6fc3aa5353f2e4fff6073556fd3e7a3924312399f9aae2e0f868f8fff6074556fcb2ff529eb71e41582cccd5a1ee26fff6075556fc2d415c3db974ab32a51840c0b67edff6076556fbad03e7d883f69ad5b0a186184e06bff6077556fb320d03b2c343d4829abd6075f0cc5ff6078556fabc25204e02828d73c6e80bcdb1a95bf6079556fa4b16f74ee4bb2040a1ec6c15fbbf2df607a556f9deaf736ac1f569deb1b5ae3f36c130f607b556f976bd9952c7aa957f5937d790ef65037607c556f9131271922eaa6064b73a22d0bd4f2bf607d556f8b380f3558668c46c91c49a2f8e967b9607e556f857ddf0117efa215952912839f6473e6607f55565b6139278061074e6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638888a737116100a2578063b19210b011610071578063b19210b0146102e5578063b33d96b0146102f8578063b3923a991461030b578063ca2229791461031e578063d69109371461033157600080fd5b80638888a737146102995780638fabd82d146102ac57806392aec23c146102bf578063ad615dec146102d257600080fd5b80635bff1d92116100e95780635bff1d92146101d95780636350d7741461022f578063671a11b51461025057806367f84adc1461026357806379c91b371461027657600080fd5b8063119220a51461011b5780632bb66e1d14610144578063327494611461017e578063544caa56146101a6575b600080fd5b61012e610129366004613079565b61035c565b60405161013b91906130fe565b60405180910390f35b610157610152366004613142565b6104ec565b6040805163ffffffff9485168152928416602084015292169181019190915260600161013b565b61019161018c36600461317b565b61056b565b6040805192835260208301919091520161013b565b6101b96101b4366004613142565b61076e565b604080516001600160a01b0393841681529290911660208301520161013b565b6101ec6101e7366004613142565b610864565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161013b565b61024261023d3660046131c6565b610b3b565b60405190815260200161013b565b61024261025e366004613219565b610b74565b61012e610271366004613079565b610ce0565b610289610284366004613280565b610e52565b604051901515815260200161013b565b6102426102a73660046131c6565b610f77565b61012e6102ba3660046132cd565b610fa3565b6102426102cd366004613355565b611116565b6102426102e03660046133e2565b6111f9565b6102426102f3366004613219565b61129f565b6101ec61030636600461317b565b611421565b61012e6103193660046132cd565b6116af565b61015761032c36600461340e565b61180e565b61034461033f366004613142565b611969565b6040516001600160a01b03909116815260200161013b565b6060816103845760405162461bcd60e51b815260040161037b9061342b565b60405180910390fd5b61038f826001613478565b67ffffffffffffffff8111156103a7576103a7613490565b6040519080825280602002602001820160405280156103d0578160200160208202803683370190505b50905083816000815181106103e7576103e76134a6565b60209081029190910101528560005b838110156104af576000806000806000806104388f8c8c8a81811061041d5761041d6134a6565b9050602002016020810190610432919061340e565b8a611421565b95509550955095509550955061046b898881518110610459576104596134a6565b60200260200101518686868686610b74565b89610477896001613478565b81518110610487576104876134a6565b60200260200101818152505085975050505050505080806104a7906134bc565b9150506103f6565b50856001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b906134d7565b509695505050505050565b60405163ca22297960e01b81526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e919061351d565b9250925092509250925092565b60008060008061057b868661076e565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e4919061355f565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190613590565b6001600160a01b0316846001600160a01b03161480156106ef5750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190613590565b6001600160a01b0316836001600160a01b0316145b61073b5760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e000000604482015260640161037b565b836001600160a01b0316886001600160a01b03161461075b57808261075e565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156107df5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161037b565b826001600160a01b0316846001600160a01b0316106107ff578284610802565b83835b90925090506001600160a01b03821661085d5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f4144445245535300000000604482015260640161037b565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061355f565b506001600160701b031691506001600160701b031691506000806108f58c61180e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190613590565b6001600160a01b03168b6001600160a01b031614156109f3578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190613590565b99509297509095509350915084848484610b2d565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190613590565b6001600160a01b03168b6001600160a01b03161415610ae5578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190613590565b99509197509195509350915083858385610b2d565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b505050509295509295509295565b600080600080600080610b4e8989610864565b9550955095509550955050610b6787858785878661129f565b9998505050505050505050565b6000808711610bd75760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b606482015260840161037b565b600086118015610be75750600085115b610c035760405162461bcd60e51b815260040161037b906135ad565b6000610c11836127106135f3565b610c219063ffffffff1689613618565b90508363ffffffff168563ffffffff161415610c6a5780610c4488612710613618565b610c4e9190613478565b610c588288613618565b610c62919061364d565b915050610cd6565b6000808083610c7b8b612710613618565b610c859190613478565b9050610c9e81610c978c612710613618565b8a8a611ad2565b90935091506000610caf848b613618565b905060ff83168a901b84610cc38284613661565b610ccd919061364d565b96505050505050505b9695505050505050565b606081610cff5760405162461bcd60e51b815260040161037b9061342b565b610d0a826001613478565b67ffffffffffffffff811115610d2257610d22613490565b604051908082528060200260200182016040528015610d4b578160200160208202803683370190505b509050838160018351610d5e9190613661565b81518110610d6e57610d6e6134a6565b602090810291909101015284825b8015610e205760008080808080610da98f8c8c610d9a60018c613661565b81811061041d5761041d6134a6565b955095509550955095509550610ddc898881518110610dca57610dca6134a6565b6020026020010151858785878661129f565b89610de860018a613661565b81518110610df857610df86134a6565b6020026020010181815250508597505050505050508080610e1890613678565b915050610d7c565b50866001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b9061368f565b60008163ffffffff1660321415610e8057610e6d8587613618565b610e778486613618565b10159050610f6e565b858410158015610e905750848310155b15610e9d57506001610f6e565b858411158015610ead5750848311155b15610eba57506000610f6e565b816000610ec88260646135f3565b90506000806000808b8a10610f0657610ee48b8a876032611ad2565b90945060ff169250610ef98a8d886032611ad2565b90925060ff169050610f31565b610f138c8b886032611ad2565b90945060ff169250610f28898c876032611ad2565b90925060ff1690505b6000818410610f405781610f42565b835b9050610f4e8185613661565b9350610f5a8183613661565b9290921c9390921c92909211159450505050505b95945050505050565b600080600080600080610f8a8989610864565b9550955095509550955050610b67878686868686610b74565b606081610fc25760405162461bcd60e51b815260040161037b9061342b565b610fcd826001613478565b67ffffffffffffffff811115610fe557610fe5613490565b60405190808252806020026020018201604052801561100e578160200160208202803683370190505b5090508381600081518110611025576110256134a6565b60209081029190910101528560005b838110156110da576000806000806000806110758b8b8981811061105a5761105a6134a6565b905060200201602081019061106f919061340e565b89610864565b955095509550955095509550611096898881518110610459576104596134a6565b896110a2896001613478565b815181106110b2576110b26134a6565b60200260200101818152505085975050505050505080806110d2906134bc565b915050611034565b50856001600160a01b0316816001600160a01b03161461110c5760405162461bcd60e51b815260040161037b906134d7565b5095945050505050565b60006001600160701b03831615611183576000806111556111436001600160701b03808c16908816613478565b8a6001600160701b0316896064611ad2565b90925060ff16905089816111698483613618565b611174911c85613478565b61117e9190613661565b925050505b6001600160701b038216156111ee576000806111c06111ae6001600160701b03808b16908716613478565b896001600160701b0316886064611ad2565b90925060ff16905089816111d48483613618565b6111df911c85613478565b6111e99190613661565b925050505b979650505050505050565b60008084116112565760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201526215539560ea1b606482015260840161037b565b6000831180156112665750600082115b6112825760405162461bcd60e51b815260040161037b906135ad565b8261128d8386613618565b611297919061364d565b949350505050565b60008087116113035760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b606482015260840161037b565b6000861180156113135750600085115b61132f5760405162461bcd60e51b815260040161037b906135ad565b8263ffffffff168463ffffffff1614156113a557600061134f8888613618565b61135b90612710613618565b9050600061136b846127106135f3565b63ffffffff1661137b8a89613661565b6113859190613618565b9050611391818361364d565b61139c906001613478565b92505050610cd6565b600080806113b38a89613661565b90506113c18882888a611ad2565b909350915060006113d48a612710613618565b905060006113e28583613618565b905060ff841682901b6113f7886127106135f3565b63ffffffff1660ff861661140b8385613661565b61141692911c61364d565b610ccd906001613478565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f919061355f565b506001600160701b031691506001600160701b031691506000806114b38d8d6104ec565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190613590565b6001600160a01b03168b6001600160a01b031614156115b1578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190613590565b9950929750909550935091508484848461169f565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116139190613590565b6001600160a01b03168b6001600160a01b03161415610ae5578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613590565b995091975091955093509150838583855b5050505093975093979195509350565b6060816116ce5760405162461bcd60e51b815260040161037b9061342b565b6116d9826001613478565b67ffffffffffffffff8111156116f1576116f1613490565b60405190808252806020026020018201604052801561171a578160200160208202803683370190505b50905083816001835161172d9190613661565b8151811061173d5761173d6134a6565b602090810291909101015284825b80156117dc57600080808080806117778b8b61176860018b613661565b81811061105a5761105a6134a6565b955095509550955095509550611798898881518110610dca57610dca6134a6565b896117a460018a613661565b815181106117b4576117b46134a6565b60200260200101818152505085975050505050505080806117d490613678565b91505061174b565b50866001600160a01b0316816001600160a01b03161461110c5760405162461bcd60e51b815260040161037b9061368f565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa92505050801561186c575060408051601f3d908101601f19168201909252611869918101906136d4565b60015b6118f557611878613703565b806308c379a014156118b2575061188d61375a565b8061189857506118b4565b8060405162461bcd60e51b815260040161037b91906137e4565b505b3d8080156118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b50603280601e93509350935050611962565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119599190613839565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ce9190613590565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190613590565b9050836001600160a01b0316826001600160a01b03161480611a675750836001600160a01b0316816001600160a01b0316145b611ab35760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b836001600160a01b0316826001600160a01b0316146112975781610f6e565b60008084861015611b255760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f62617365440000000000604482015260640161037b565b600160811b8610611b3557600080fd5b60008086611b476001607f1b8a613618565b611b51919061364d565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611b7c57611b7581611c0f565b9150611b88565b611b858161217e565b91505b60008563ffffffff168763ffffffff1684611ba39190613618565b611bad919061364d565b9050600160831b811015611bd257611bc481612273565b607f94509450505050611c06565b6000611bdd8261289e565b9050611bf9611bed82607f613856565b60ff1683901c82612951565b95509350611c0692505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611c6857611c3a6001607e1b85613478565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611c5b6001607f1b88613618565b611c65919061364d565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611cbb57611c8d6001607d1b85613478565b93506fa45af1e1f40c333b3de1db4dd55f29a7611cae6001607f1b88613618565b611cb8919061364d565b95505b6f910b022db7ae67ce76b441c27035c6a18610611d0e57611ce06001607c1b85613478565b93506f910b022db7ae67ce76b441c27035c6a1611d016001607f1b88613618565b611d0b919061364d565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610611d6157611d336001607b1b85613478565b93506f88415abbe9a76bead8d00cf112e4d4a8611d546001607f1b88613618565b611d5e919061364d565b95505b6f84102b00893f64c705e841d5d4064bd38610611db457611d866001607a1b85613478565b93506f84102b00893f64c705e841d5d4064bd3611da76001607f1b88613618565b611db1919061364d565b95505b6f8204055aaef1c8bd5c3259f4822735a28610611e0757611dd9600160791b85613478565b93506f8204055aaef1c8bd5c3259f4822735a2611dfa6001607f1b88613618565b611e04919061364d565b95505b6f810100ab00222d861931c15e39b44e998610611e5a57611e2c600160781b85613478565b93506f810100ab00222d861931c15e39b44e99611e4d6001607f1b88613618565b611e57919061364d565b95505b6f808040155aabbbe9451521693554f7338610611ead57611e7f600160771b85613478565b93506f808040155aabbbe9451521693554f733611ea06001607f1b88613618565b611eaa919061364d565b95505b611ebb6001607f1b87613661565b92508291506001607f1b611ecf8380613618565b611ed9919061364d565b9050600160801b611eea8482613661565b611ef49084613618565b611efe919061364d565b611f089085613478565b93506001607f1b611f198284613618565b611f23919061364d565b9150600160811b611f44846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613661565b611f4e9084613618565b611f58919061364d565b611f629085613478565b93506001607f1b611f738284613618565b611f7d919061364d565b9150600360801b611f9e846f99999999999999999999999999999999613661565b611fa89084613618565b611fb2919061364d565b611fbc9085613478565b93506001607f1b611fcd8284613618565b611fd7919061364d565b9150600160821b611ff8846f92492492492492492492492492492492613661565b6120029084613618565b61200c919061364d565b6120169085613478565b93506001607f1b6120278284613618565b612031919061364d565b9150600560801b612052846f8e38e38e38e38e38e38e38e38e38e38e613661565b61205c9084613618565b612066919061364d565b6120709085613478565b93506001607f1b6120818284613618565b61208b919061364d565b9150600360811b6120ac846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613661565b6120b69084613618565b6120c0919061364d565b6120ca9085613478565b93506001607f1b6120db8284613618565b6120e5919061364d565b9150600760801b612106846f89d89d89d89d89d89d89d89d89d89d89613661565b6121109084613618565b61211a919061364d565b6121249085613478565b93506001607f1b6121358284613618565b61213f919061364d565b9150600160831b612160846f88888888888888888888888888888888613661565b61216a9084613618565b612174919061364d565b610cd69085613478565b600080600160801b83106121c25760006121a461219f6001607f1b8661364d565b612faf565b60ff811694851c949091506121be906001607f1b90613618565b9150505b6001607f1b83111561223757607f5b60ff811615612235576001607f1b6121e98580613618565b6121f3919061364d565b9350600160801b841061222557600193841c936122109082613856565b60ff166001901b826122229190613478565b91505b61222e81613879565b90506121d1565b505b6f05b9de1d10bf4103d647b0955897ba806122626f03f80fe03f80fe03f80fe03f80fe03f883613618565b61226c919061364d565b9392505050565b60008080806122866001607c1b86613896565b91508190506001607f1b61229a8280613618565b6122a4919061364d565b90506122b8816710e1b3be415a0000613618565b6122c29084613478565b92506001607f1b6122d38383613618565b6122dd919061364d565b90506122f1816705a0913f6b1e0000613618565b6122fb9084613478565b92506001607f1b61230c8383613618565b612316919061364d565b905061232a81670168244fdac78000613618565b6123349084613478565b92506001607f1b6123458383613618565b61234f919061364d565b905061236281664807432bc18000613618565b61236c9084613478565b92506001607f1b61237d8383613618565b612387919061364d565b905061239a81660c0135dca04000613618565b6123a49084613478565b92506001607f1b6123b58383613618565b6123bf919061364d565b90506123d2816601b707b1cdc000613618565b6123dc9084613478565b92506001607f1b6123ed8383613618565b6123f7919061364d565b9050612409816536e0f639b800613618565b6124139084613478565b92506001607f1b6124248383613618565b61242e919061364d565b905061244081650618fee9f800613618565b61244a9084613478565b92506001607f1b61245b8383613618565b612465919061364d565b905061247681649c197dcc00613618565b6124809084613478565b92506001607f1b6124918383613618565b61249b919061364d565b90506124ac81640e30dce400613618565b6124b69084613478565b92506001607f1b6124c78383613618565b6124d1919061364d565b90506124e28164012ebd1300613618565b6124ec9084613478565b92506001607f1b6124fd8383613618565b612507919061364d565b9050612517816317499f00613618565b6125219084613478565b92506001607f1b6125328383613618565b61253c919061364d565b905061254c816301a9d480613618565b6125569084613478565b92506001607f1b6125678383613618565b612571919061364d565b905061258081621c6380613618565b61258a9084613478565b92506001607f1b61259b8383613618565b6125a5919061364d565b90506125b4816201c638613618565b6125be9084613478565b92506001607f1b6125cf8383613618565b6125d9919061364d565b90506125e781611ab8613618565b6125f19084613478565b92506001607f1b6126028383613618565b61260c919061364d565b905061261a8161017c613618565b6126249084613478565b92506001607f1b6126358383613618565b61263f919061364d565b905061264c816014613618565b6126569084613478565b92506001607f1b6126678383613618565b612671919061364d565b905061267e816001613618565b6126889084613478565b92506001607f1b826126a26721c3677c82b400008661364d565b6126ac9190613478565b6126b69190613478565b92506001607c1b8516156126fe5770018ebef9eac820ae8682b9793ac6d1e7766126f1847001c3d6a24ed82218787d624d3e5eba95f9613618565b6126fb919061364d565b92505b6001607d1b851615612744577001368b2fc6f9609fe7aceb46aa619baed46127378470018ebef9eac820ae8682b9793ac6d1e778613618565b612741919061364d565b92505b6001607e1b851615612789576fbc5ab1b16779be3575bd8f0520a9f21f61277c847001368b2fc6f9609fe7aceb46aa619baed5613618565b612786919061364d565b92505b6001607f1b8516156127cd576f454aaa8efe072e7f6ddbab84b40a55c96127c0846fbc5ab1b16779be3575bd8f0520a9f21e613618565b6127ca919061364d565b92505b600160801b851615612811576f0960aadc109e7a3bf4578099615711ea612804846f454aaa8efe072e7f6ddbab84b40a55c5613618565b61280e919061364d565b92505b600160811b851615612854576e2bf84208204f5977f9a8cf01fdce3d612847846f0960aadc109e7a3bf4578099615711d7613618565b612851919061364d565b92505b600160821b851615612895576d03c6ab775dd0b95b4cbee7e65d11612888846e2bf84208204f5977f9a8cf01fdc307613618565b612892919061364d565b92505b50909392505050565b60006020607f5b60ff81166128b48360016138aa565b60ff16101561290757600060026128cb83856138aa565b6128d591906138cf565b90508460008260ff16608081106128ee576128ee6134a6565b0154106128fd57809250612901565b8091505b506128a5565b8360008260ff166080811061291e5761291e6134a6565b01541061292c579392505050565b8360008360ff1660808110612943576129436134a6565b015410610116575092915050565b6000828160ff84166129638380613618565b901c9150612981826f03442c4e6074a82f1797f72ac0000000613618565b61298b9082613478565b905060ff841661299b8684613618565b901c91506129b9826f0116b96f757c380fb287fd0e40000000613618565b6129c39082613478565b905060ff84166129d38684613618565b901c91506129f0826e45ae5bdd5f0e03eca1ff4390000000613618565b6129fa9082613478565b905060ff8416612a0a8684613618565b901c9150612a27826e0defabf91302cd95b9ffda50000000613618565b612a319082613478565b905060ff8416612a418684613618565b901c9150612a5e826e02529ca9832b22439efff9b8000000613618565b612a689082613478565b905060ff8416612a788684613618565b901c9150612a94826d54f1cf12bd04e516b6da88000000613618565b612a9e9082613478565b905060ff8416612aae8684613618565b901c9150612aca826d0a9e39e257a09ca2d6db51000000613618565b612ad49082613478565b905060ff8416612ae48684613618565b901c9150612b00826d012e066e7b839fa050c309000000613618565b612b0a9082613478565b905060ff8416612b1a8684613618565b901c9150612b35826c1e33d7d926c329a1ad1a800000613618565b612b3f9082613478565b905060ff8416612b4f8684613618565b901c9150612b6a826c02bee513bdb4a6b19b5f800000613618565b612b749082613478565b905060ff8416612b848684613618565b901c9150612b9e826b3a9316fa79b88eccf2a00000613618565b612ba89082613478565b905060ff8416612bb88684613618565b901c9150612bd2826b048177ebe1fa812375200000613618565b612bdc9082613478565b905060ff8416612bec8684613618565b901c9150612c05826a5263fe90242dcbacf00000613618565b612c0f9082613478565b905060ff8416612c1f8684613618565b901c9150612c38826a057e22099c030d94100000613618565b612c429082613478565b905060ff8416612c528684613618565b901c9150612c6a826957e22099c030d9410000613618565b612c749082613478565b905060ff8416612c848684613618565b901c9150612c9c8269052b6b54569976310000613618565b612ca69082613478565b905060ff8416612cb68684613618565b901c9150612ccd82684985f67696bf748000613618565b612cd79082613478565b905060ff8416612ce78684613618565b901c9150612cfe826803dea12ea99e498000613618565b612d089082613478565b905060ff8416612d188684613618565b901c9150612d2e826731880f2214b6e000613618565b612d389082613478565b905060ff8416612d488684613618565b901c9150612d5e8267025bcff56eb36000613618565b612d689082613478565b905060ff8416612d788684613618565b901c9150612d8d82661b722e10ab1000613618565b612d979082613478565b905060ff8416612da78684613618565b901c9150612dbc826601317c70077000613618565b612dc69082613478565b905060ff8416612dd68684613618565b901c9150612dea82650cba84aafa00613618565b612df49082613478565b905060ff8416612e048684613618565b901c9150612e17826482573a0a00613618565b612e219082613478565b905060ff8416612e318684613618565b901c9150612e44826405035ad900613618565b612e4e9082613478565b905060ff8416612e5e8684613618565b901c9150612e7082632f881b00613618565b612e7a9082613478565b905060ff8416612e8a8684613618565b901c9150612e9c826301b29340613618565b612ea69082613478565b905060ff8416612eb68684613618565b901c9150612ec782620efc40613618565b612ed19082613478565b905060ff8416612ee18684613618565b901c9150612ef182617fe0613618565b612efb9082613478565b905060ff8416612f0b8684613618565b901c9150612f1b82610420613618565b612f259082613478565b905060ff8416612f358684613618565b901c9150612f44826021613618565b612f4e9082613478565b905060ff8416612f5e8684613618565b901c9150612f6d826001613618565b612f779082613478565b9050600160ff85161b85612f9b6f0688589cc0e9505e2f2fee55800000008461364d565b612fa59190613478565b610f6e9190613478565b600080610100831015612fe2575b6001831115612fdd57600192831c92612fd690826138aa565b9050612fbd565b613016565b60805b60ff81161561301457600160ff82161b84106130095760ff81169390931c92908117905b60011c607f16612fe5565b505b92915050565b6001600160a01b038116811461303157600080fd5b50565b60008083601f84011261304657600080fd5b50813567ffffffffffffffff81111561305e57600080fd5b6020830191508360208260051b850101111561085d57600080fd5b60008060008060008060a0878903121561309257600080fd5b863561309d8161301c565b955060208701356130ad8161301c565b945060408701356130bd8161301c565b935060608701359250608087013567ffffffffffffffff8111156130e057600080fd5b6130ec89828a01613034565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156131365783518352928401929184019160010161311a565b50909695505050505050565b6000806040838503121561315557600080fd5b82356131608161301c565b915060208301356131708161301c565b809150509250929050565b60008060006060848603121561319057600080fd5b833561319b8161301c565b925060208401356131ab8161301c565b915060408401356131bb8161301c565b809150509250925092565b6000806000606084860312156131db57600080fd5b83356131e68161301c565b925060208401356131f68161301c565b929592945050506040919091013590565b63ffffffff8116811461303157600080fd5b60008060008060008060c0878903121561323257600080fd5b863595506020870135945060408701359350606087013561325281613207565b9250608087013561326281613207565b915060a087013561327281613207565b809150509295509295509295565b600080600080600060a0868803121561329857600080fd5b8535945060208601359350604086013592506060860135915060808601356132bf81613207565b809150509295509295909350565b6000806000806000608086880312156132e557600080fd5b85356132f08161301c565b945060208601356133008161301c565b935060408601359250606086013567ffffffffffffffff81111561332357600080fd5b61332f88828901613034565b969995985093965092949392505050565b6001600160701b038116811461303157600080fd5b600080600080600080600060e0888a03121561337057600080fd5b87359650602088013561338281613340565b9550604088013561339281613340565b945060608801356133a281613207565b935060808801356133b281613207565b925060a08801356133c281613340565b915060c08801356133d281613340565b8091505092959891949750929550565b6000806000606084860312156133f757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561342057600080fd5b813561226c8161301c565b6020808252601c908201527f5265717569656d466f726d756c613a20494e56414c49445f5041544800000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561348b5761348b613462565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156134d0576134d0613462565b5060010190565b60208082526026908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556040820152650a8bea082a8960d31b606082015260800190565b60008060006060848603121561353257600080fd5b835161353d81613207565b602085015190935061354e81613207565b60408501519092506131bb81613207565b60008060006060848603121561357457600080fd5b835161357f81613340565b602085015190935061354e81613340565b6000602082840312156135a257600080fd5b815161226c8161301c565b60208082526026908201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160408201526555494449545960d01b606082015260800190565b600063ffffffff8381169083168181101561361057613610613462565b039392505050565b600081600019048311821515161561363257613632613462565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261365c5761365c613637565b500490565b60008282101561367357613673613462565b500390565b60008161368757613687613462565b506000190190565b60208082526025908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6040820152640bea082a8960db1b606082015260800190565b600080604083850312156136e757600080fd5b82516136f281613207565b602084015190925061317081613207565b600060033d111561371c5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561375357634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156137685790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561379857505050505090565b82850191508151818111156137b05750505050505090565b843d87010160208285010111156137ca5750505050505090565b6137d96020828601018761371f565b509095945050505050565b600060208083528351808285015260005b81811015613811578581018301518582016040015282016137f5565b81811115613823576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561384b57600080fd5b815161226c81613207565b600060ff821660ff84168082101561387057613870613462565b90039392505050565b600060ff82168061388c5761388c613462565b6000190192915050565b6000826138a5576138a5613637565b500690565b600060ff821660ff84168060ff038211156138c7576138c7613462565b019392505050565b600060ff8316806138e2576138e2613637565b8060ff8416049150509291505056fea2646970667358221220396f34fa9e262ada960520b164389cac764354d35a1d1b34349d3f2eb3cef52b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638888a737116100a2578063b19210b011610071578063b19210b0146102e5578063b33d96b0146102f8578063b3923a991461030b578063ca2229791461031e578063d69109371461033157600080fd5b80638888a737146102995780638fabd82d146102ac57806392aec23c146102bf578063ad615dec146102d257600080fd5b80635bff1d92116100e95780635bff1d92146101d95780636350d7741461022f578063671a11b51461025057806367f84adc1461026357806379c91b371461027657600080fd5b8063119220a51461011b5780632bb66e1d14610144578063327494611461017e578063544caa56146101a6575b600080fd5b61012e610129366004613079565b61035c565b60405161013b91906130fe565b60405180910390f35b610157610152366004613142565b6104ec565b6040805163ffffffff9485168152928416602084015292169181019190915260600161013b565b61019161018c36600461317b565b61056b565b6040805192835260208301919091520161013b565b6101b96101b4366004613142565b61076e565b604080516001600160a01b0393841681529290911660208301520161013b565b6101ec6101e7366004613142565b610864565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161013b565b61024261023d3660046131c6565b610b3b565b60405190815260200161013b565b61024261025e366004613219565b610b74565b61012e610271366004613079565b610ce0565b610289610284366004613280565b610e52565b604051901515815260200161013b565b6102426102a73660046131c6565b610f77565b61012e6102ba3660046132cd565b610fa3565b6102426102cd366004613355565b611116565b6102426102e03660046133e2565b6111f9565b6102426102f3366004613219565b61129f565b6101ec61030636600461317b565b611421565b61012e6103193660046132cd565b6116af565b61015761032c36600461340e565b61180e565b61034461033f366004613142565b611969565b6040516001600160a01b03909116815260200161013b565b6060816103845760405162461bcd60e51b815260040161037b9061342b565b60405180910390fd5b61038f826001613478565b67ffffffffffffffff8111156103a7576103a7613490565b6040519080825280602002602001820160405280156103d0578160200160208202803683370190505b50905083816000815181106103e7576103e76134a6565b60209081029190910101528560005b838110156104af576000806000806000806104388f8c8c8a81811061041d5761041d6134a6565b9050602002016020810190610432919061340e565b8a611421565b95509550955095509550955061046b898881518110610459576104596134a6565b60200260200101518686868686610b74565b89610477896001613478565b81518110610487576104876134a6565b60200260200101818152505085975050505050505080806104a7906134bc565b9150506103f6565b50856001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b906134d7565b509695505050505050565b60405163ca22297960e01b81526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e919061351d565b9250925092509250925092565b60008060008061057b868661076e565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e4919061355f565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190613590565b6001600160a01b0316846001600160a01b03161480156106ef5750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190613590565b6001600160a01b0316836001600160a01b0316145b61073b5760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e000000604482015260640161037b565b836001600160a01b0316886001600160a01b03161461075b57808261075e565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156107df5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161037b565b826001600160a01b0316846001600160a01b0316106107ff578284610802565b83835b90925090506001600160a01b03821661085d5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f4144445245535300000000604482015260640161037b565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061355f565b506001600160701b031691506001600160701b031691506000806108f58c61180e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190613590565b6001600160a01b03168b6001600160a01b031614156109f3578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190613590565b99509297509095509350915084848484610b2d565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190613590565b6001600160a01b03168b6001600160a01b03161415610ae5578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190613590565b99509197509195509350915083858385610b2d565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b505050509295509295509295565b600080600080600080610b4e8989610864565b9550955095509550955050610b6787858785878661129f565b9998505050505050505050565b6000808711610bd75760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b606482015260840161037b565b600086118015610be75750600085115b610c035760405162461bcd60e51b815260040161037b906135ad565b6000610c11836127106135f3565b610c219063ffffffff1689613618565b90508363ffffffff168563ffffffff161415610c6a5780610c4488612710613618565b610c4e9190613478565b610c588288613618565b610c62919061364d565b915050610cd6565b6000808083610c7b8b612710613618565b610c859190613478565b9050610c9e81610c978c612710613618565b8a8a611ad2565b90935091506000610caf848b613618565b905060ff83168a901b84610cc38284613661565b610ccd919061364d565b96505050505050505b9695505050505050565b606081610cff5760405162461bcd60e51b815260040161037b9061342b565b610d0a826001613478565b67ffffffffffffffff811115610d2257610d22613490565b604051908082528060200260200182016040528015610d4b578160200160208202803683370190505b509050838160018351610d5e9190613661565b81518110610d6e57610d6e6134a6565b602090810291909101015284825b8015610e205760008080808080610da98f8c8c610d9a60018c613661565b81811061041d5761041d6134a6565b955095509550955095509550610ddc898881518110610dca57610dca6134a6565b6020026020010151858785878661129f565b89610de860018a613661565b81518110610df857610df86134a6565b6020026020010181815250508597505050505050508080610e1890613678565b915050610d7c565b50866001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b9061368f565b60008163ffffffff1660321415610e8057610e6d8587613618565b610e778486613618565b10159050610f6e565b858410158015610e905750848310155b15610e9d57506001610f6e565b858411158015610ead5750848311155b15610eba57506000610f6e565b816000610ec88260646135f3565b90506000806000808b8a10610f0657610ee48b8a876032611ad2565b90945060ff169250610ef98a8d886032611ad2565b90925060ff169050610f31565b610f138c8b886032611ad2565b90945060ff169250610f28898c876032611ad2565b90925060ff1690505b6000818410610f405781610f42565b835b9050610f4e8185613661565b9350610f5a8183613661565b9290921c9390921c92909211159450505050505b95945050505050565b600080600080600080610f8a8989610864565b9550955095509550955050610b67878686868686610b74565b606081610fc25760405162461bcd60e51b815260040161037b9061342b565b610fcd826001613478565b67ffffffffffffffff811115610fe557610fe5613490565b60405190808252806020026020018201604052801561100e578160200160208202803683370190505b5090508381600081518110611025576110256134a6565b60209081029190910101528560005b838110156110da576000806000806000806110758b8b8981811061105a5761105a6134a6565b905060200201602081019061106f919061340e565b89610864565b955095509550955095509550611096898881518110610459576104596134a6565b896110a2896001613478565b815181106110b2576110b26134a6565b60200260200101818152505085975050505050505080806110d2906134bc565b915050611034565b50856001600160a01b0316816001600160a01b03161461110c5760405162461bcd60e51b815260040161037b906134d7565b5095945050505050565b60006001600160701b03831615611183576000806111556111436001600160701b03808c16908816613478565b8a6001600160701b0316896064611ad2565b90925060ff16905089816111698483613618565b611174911c85613478565b61117e9190613661565b925050505b6001600160701b038216156111ee576000806111c06111ae6001600160701b03808b16908716613478565b896001600160701b0316886064611ad2565b90925060ff16905089816111d48483613618565b6111df911c85613478565b6111e99190613661565b925050505b979650505050505050565b60008084116112565760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201526215539560ea1b606482015260840161037b565b6000831180156112665750600082115b6112825760405162461bcd60e51b815260040161037b906135ad565b8261128d8386613618565b611297919061364d565b949350505050565b60008087116113035760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b606482015260840161037b565b6000861180156113135750600085115b61132f5760405162461bcd60e51b815260040161037b906135ad565b8263ffffffff168463ffffffff1614156113a557600061134f8888613618565b61135b90612710613618565b9050600061136b846127106135f3565b63ffffffff1661137b8a89613661565b6113859190613618565b9050611391818361364d565b61139c906001613478565b92505050610cd6565b600080806113b38a89613661565b90506113c18882888a611ad2565b909350915060006113d48a612710613618565b905060006113e28583613618565b905060ff841682901b6113f7886127106135f3565b63ffffffff1660ff861661140b8385613661565b61141692911c61364d565b610ccd906001613478565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f919061355f565b506001600160701b031691506001600160701b031691506000806114b38d8d6104ec565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190613590565b6001600160a01b03168b6001600160a01b031614156115b1578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190613590565b9950929750909550935091508484848461169f565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116139190613590565b6001600160a01b03168b6001600160a01b03161415610ae5578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613590565b995091975091955093509150838583855b5050505093975093979195509350565b6060816116ce5760405162461bcd60e51b815260040161037b9061342b565b6116d9826001613478565b67ffffffffffffffff8111156116f1576116f1613490565b60405190808252806020026020018201604052801561171a578160200160208202803683370190505b50905083816001835161172d9190613661565b8151811061173d5761173d6134a6565b602090810291909101015284825b80156117dc57600080808080806117778b8b61176860018b613661565b81811061105a5761105a6134a6565b955095509550955095509550611798898881518110610dca57610dca6134a6565b896117a460018a613661565b815181106117b4576117b46134a6565b60200260200101818152505085975050505050505080806117d490613678565b91505061174b565b50866001600160a01b0316816001600160a01b03161461110c5760405162461bcd60e51b815260040161037b9061368f565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa92505050801561186c575060408051601f3d908101601f19168201909252611869918101906136d4565b60015b6118f557611878613703565b806308c379a014156118b2575061188d61375a565b8061189857506118b4565b8060405162461bcd60e51b815260040161037b91906137e4565b505b3d8080156118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b50603280601e93509350935050611962565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119599190613839565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ce9190613590565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190613590565b9050836001600160a01b0316826001600160a01b03161480611a675750836001600160a01b0316816001600160a01b0316145b611ab35760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b836001600160a01b0316826001600160a01b0316146112975781610f6e565b60008084861015611b255760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f62617365440000000000604482015260640161037b565b600160811b8610611b3557600080fd5b60008086611b476001607f1b8a613618565b611b51919061364d565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611b7c57611b7581611c0f565b9150611b88565b611b858161217e565b91505b60008563ffffffff168763ffffffff1684611ba39190613618565b611bad919061364d565b9050600160831b811015611bd257611bc481612273565b607f94509450505050611c06565b6000611bdd8261289e565b9050611bf9611bed82607f613856565b60ff1683901c82612951565b95509350611c0692505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611c6857611c3a6001607e1b85613478565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611c5b6001607f1b88613618565b611c65919061364d565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611cbb57611c8d6001607d1b85613478565b93506fa45af1e1f40c333b3de1db4dd55f29a7611cae6001607f1b88613618565b611cb8919061364d565b95505b6f910b022db7ae67ce76b441c27035c6a18610611d0e57611ce06001607c1b85613478565b93506f910b022db7ae67ce76b441c27035c6a1611d016001607f1b88613618565b611d0b919061364d565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610611d6157611d336001607b1b85613478565b93506f88415abbe9a76bead8d00cf112e4d4a8611d546001607f1b88613618565b611d5e919061364d565b95505b6f84102b00893f64c705e841d5d4064bd38610611db457611d866001607a1b85613478565b93506f84102b00893f64c705e841d5d4064bd3611da76001607f1b88613618565b611db1919061364d565b95505b6f8204055aaef1c8bd5c3259f4822735a28610611e0757611dd9600160791b85613478565b93506f8204055aaef1c8bd5c3259f4822735a2611dfa6001607f1b88613618565b611e04919061364d565b95505b6f810100ab00222d861931c15e39b44e998610611e5a57611e2c600160781b85613478565b93506f810100ab00222d861931c15e39b44e99611e4d6001607f1b88613618565b611e57919061364d565b95505b6f808040155aabbbe9451521693554f7338610611ead57611e7f600160771b85613478565b93506f808040155aabbbe9451521693554f733611ea06001607f1b88613618565b611eaa919061364d565b95505b611ebb6001607f1b87613661565b92508291506001607f1b611ecf8380613618565b611ed9919061364d565b9050600160801b611eea8482613661565b611ef49084613618565b611efe919061364d565b611f089085613478565b93506001607f1b611f198284613618565b611f23919061364d565b9150600160811b611f44846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613661565b611f4e9084613618565b611f58919061364d565b611f629085613478565b93506001607f1b611f738284613618565b611f7d919061364d565b9150600360801b611f9e846f99999999999999999999999999999999613661565b611fa89084613618565b611fb2919061364d565b611fbc9085613478565b93506001607f1b611fcd8284613618565b611fd7919061364d565b9150600160821b611ff8846f92492492492492492492492492492492613661565b6120029084613618565b61200c919061364d565b6120169085613478565b93506001607f1b6120278284613618565b612031919061364d565b9150600560801b612052846f8e38e38e38e38e38e38e38e38e38e38e613661565b61205c9084613618565b612066919061364d565b6120709085613478565b93506001607f1b6120818284613618565b61208b919061364d565b9150600360811b6120ac846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613661565b6120b69084613618565b6120c0919061364d565b6120ca9085613478565b93506001607f1b6120db8284613618565b6120e5919061364d565b9150600760801b612106846f89d89d89d89d89d89d89d89d89d89d89613661565b6121109084613618565b61211a919061364d565b6121249085613478565b93506001607f1b6121358284613618565b61213f919061364d565b9150600160831b612160846f88888888888888888888888888888888613661565b61216a9084613618565b612174919061364d565b610cd69085613478565b600080600160801b83106121c25760006121a461219f6001607f1b8661364d565b612faf565b60ff811694851c949091506121be906001607f1b90613618565b9150505b6001607f1b83111561223757607f5b60ff811615612235576001607f1b6121e98580613618565b6121f3919061364d565b9350600160801b841061222557600193841c936122109082613856565b60ff166001901b826122229190613478565b91505b61222e81613879565b90506121d1565b505b6f05b9de1d10bf4103d647b0955897ba806122626f03f80fe03f80fe03f80fe03f80fe03f883613618565b61226c919061364d565b9392505050565b60008080806122866001607c1b86613896565b91508190506001607f1b61229a8280613618565b6122a4919061364d565b90506122b8816710e1b3be415a0000613618565b6122c29084613478565b92506001607f1b6122d38383613618565b6122dd919061364d565b90506122f1816705a0913f6b1e0000613618565b6122fb9084613478565b92506001607f1b61230c8383613618565b612316919061364d565b905061232a81670168244fdac78000613618565b6123349084613478565b92506001607f1b6123458383613618565b61234f919061364d565b905061236281664807432bc18000613618565b61236c9084613478565b92506001607f1b61237d8383613618565b612387919061364d565b905061239a81660c0135dca04000613618565b6123a49084613478565b92506001607f1b6123b58383613618565b6123bf919061364d565b90506123d2816601b707b1cdc000613618565b6123dc9084613478565b92506001607f1b6123ed8383613618565b6123f7919061364d565b9050612409816536e0f639b800613618565b6124139084613478565b92506001607f1b6124248383613618565b61242e919061364d565b905061244081650618fee9f800613618565b61244a9084613478565b92506001607f1b61245b8383613618565b612465919061364d565b905061247681649c197dcc00613618565b6124809084613478565b92506001607f1b6124918383613618565b61249b919061364d565b90506124ac81640e30dce400613618565b6124b69084613478565b92506001607f1b6124c78383613618565b6124d1919061364d565b90506124e28164012ebd1300613618565b6124ec9084613478565b92506001607f1b6124fd8383613618565b612507919061364d565b9050612517816317499f00613618565b6125219084613478565b92506001607f1b6125328383613618565b61253c919061364d565b905061254c816301a9d480613618565b6125569084613478565b92506001607f1b6125678383613618565b612571919061364d565b905061258081621c6380613618565b61258a9084613478565b92506001607f1b61259b8383613618565b6125a5919061364d565b90506125b4816201c638613618565b6125be9084613478565b92506001607f1b6125cf8383613618565b6125d9919061364d565b90506125e781611ab8613618565b6125f19084613478565b92506001607f1b6126028383613618565b61260c919061364d565b905061261a8161017c613618565b6126249084613478565b92506001607f1b6126358383613618565b61263f919061364d565b905061264c816014613618565b6126569084613478565b92506001607f1b6126678383613618565b612671919061364d565b905061267e816001613618565b6126889084613478565b92506001607f1b826126a26721c3677c82b400008661364d565b6126ac9190613478565b6126b69190613478565b92506001607c1b8516156126fe5770018ebef9eac820ae8682b9793ac6d1e7766126f1847001c3d6a24ed82218787d624d3e5eba95f9613618565b6126fb919061364d565b92505b6001607d1b851615612744577001368b2fc6f9609fe7aceb46aa619baed46127378470018ebef9eac820ae8682b9793ac6d1e778613618565b612741919061364d565b92505b6001607e1b851615612789576fbc5ab1b16779be3575bd8f0520a9f21f61277c847001368b2fc6f9609fe7aceb46aa619baed5613618565b612786919061364d565b92505b6001607f1b8516156127cd576f454aaa8efe072e7f6ddbab84b40a55c96127c0846fbc5ab1b16779be3575bd8f0520a9f21e613618565b6127ca919061364d565b92505b600160801b851615612811576f0960aadc109e7a3bf4578099615711ea612804846f454aaa8efe072e7f6ddbab84b40a55c5613618565b61280e919061364d565b92505b600160811b851615612854576e2bf84208204f5977f9a8cf01fdce3d612847846f0960aadc109e7a3bf4578099615711d7613618565b612851919061364d565b92505b600160821b851615612895576d03c6ab775dd0b95b4cbee7e65d11612888846e2bf84208204f5977f9a8cf01fdc307613618565b612892919061364d565b92505b50909392505050565b60006020607f5b60ff81166128b48360016138aa565b60ff16101561290757600060026128cb83856138aa565b6128d591906138cf565b90508460008260ff16608081106128ee576128ee6134a6565b0154106128fd57809250612901565b8091505b506128a5565b8360008260ff166080811061291e5761291e6134a6565b01541061292c579392505050565b8360008360ff1660808110612943576129436134a6565b015410610116575092915050565b6000828160ff84166129638380613618565b901c9150612981826f03442c4e6074a82f1797f72ac0000000613618565b61298b9082613478565b905060ff841661299b8684613618565b901c91506129b9826f0116b96f757c380fb287fd0e40000000613618565b6129c39082613478565b905060ff84166129d38684613618565b901c91506129f0826e45ae5bdd5f0e03eca1ff4390000000613618565b6129fa9082613478565b905060ff8416612a0a8684613618565b901c9150612a27826e0defabf91302cd95b9ffda50000000613618565b612a319082613478565b905060ff8416612a418684613618565b901c9150612a5e826e02529ca9832b22439efff9b8000000613618565b612a689082613478565b905060ff8416612a788684613618565b901c9150612a94826d54f1cf12bd04e516b6da88000000613618565b612a9e9082613478565b905060ff8416612aae8684613618565b901c9150612aca826d0a9e39e257a09ca2d6db51000000613618565b612ad49082613478565b905060ff8416612ae48684613618565b901c9150612b00826d012e066e7b839fa050c309000000613618565b612b0a9082613478565b905060ff8416612b1a8684613618565b901c9150612b35826c1e33d7d926c329a1ad1a800000613618565b612b3f9082613478565b905060ff8416612b4f8684613618565b901c9150612b6a826c02bee513bdb4a6b19b5f800000613618565b612b749082613478565b905060ff8416612b848684613618565b901c9150612b9e826b3a9316fa79b88eccf2a00000613618565b612ba89082613478565b905060ff8416612bb88684613618565b901c9150612bd2826b048177ebe1fa812375200000613618565b612bdc9082613478565b905060ff8416612bec8684613618565b901c9150612c05826a5263fe90242dcbacf00000613618565b612c0f9082613478565b905060ff8416612c1f8684613618565b901c9150612c38826a057e22099c030d94100000613618565b612c429082613478565b905060ff8416612c528684613618565b901c9150612c6a826957e22099c030d9410000613618565b612c749082613478565b905060ff8416612c848684613618565b901c9150612c9c8269052b6b54569976310000613618565b612ca69082613478565b905060ff8416612cb68684613618565b901c9150612ccd82684985f67696bf748000613618565b612cd79082613478565b905060ff8416612ce78684613618565b901c9150612cfe826803dea12ea99e498000613618565b612d089082613478565b905060ff8416612d188684613618565b901c9150612d2e826731880f2214b6e000613618565b612d389082613478565b905060ff8416612d488684613618565b901c9150612d5e8267025bcff56eb36000613618565b612d689082613478565b905060ff8416612d788684613618565b901c9150612d8d82661b722e10ab1000613618565b612d979082613478565b905060ff8416612da78684613618565b901c9150612dbc826601317c70077000613618565b612dc69082613478565b905060ff8416612dd68684613618565b901c9150612dea82650cba84aafa00613618565b612df49082613478565b905060ff8416612e048684613618565b901c9150612e17826482573a0a00613618565b612e219082613478565b905060ff8416612e318684613618565b901c9150612e44826405035ad900613618565b612e4e9082613478565b905060ff8416612e5e8684613618565b901c9150612e7082632f881b00613618565b612e7a9082613478565b905060ff8416612e8a8684613618565b901c9150612e9c826301b29340613618565b612ea69082613478565b905060ff8416612eb68684613618565b901c9150612ec782620efc40613618565b612ed19082613478565b905060ff8416612ee18684613618565b901c9150612ef182617fe0613618565b612efb9082613478565b905060ff8416612f0b8684613618565b901c9150612f1b82610420613618565b612f259082613478565b905060ff8416612f358684613618565b901c9150612f44826021613618565b612f4e9082613478565b905060ff8416612f5e8684613618565b901c9150612f6d826001613618565b612f779082613478565b9050600160ff85161b85612f9b6f0688589cc0e9505e2f2fee55800000008461364d565b612fa59190613478565b610f6e9190613478565b600080610100831015612fe2575b6001831115612fdd57600192831c92612fd690826138aa565b9050612fbd565b613016565b60805b60ff81161561301457600160ff82161b84106130095760ff81169390931c92908117905b60011c607f16612fe5565b505b92915050565b6001600160a01b038116811461303157600080fd5b50565b60008083601f84011261304657600080fd5b50813567ffffffffffffffff81111561305e57600080fd5b6020830191508360208260051b850101111561085d57600080fd5b60008060008060008060a0878903121561309257600080fd5b863561309d8161301c565b955060208701356130ad8161301c565b945060408701356130bd8161301c565b935060608701359250608087013567ffffffffffffffff8111156130e057600080fd5b6130ec89828a01613034565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156131365783518352928401929184019160010161311a565b50909695505050505050565b6000806040838503121561315557600080fd5b82356131608161301c565b915060208301356131708161301c565b809150509250929050565b60008060006060848603121561319057600080fd5b833561319b8161301c565b925060208401356131ab8161301c565b915060408401356131bb8161301c565b809150509250925092565b6000806000606084860312156131db57600080fd5b83356131e68161301c565b925060208401356131f68161301c565b929592945050506040919091013590565b63ffffffff8116811461303157600080fd5b60008060008060008060c0878903121561323257600080fd5b863595506020870135945060408701359350606087013561325281613207565b9250608087013561326281613207565b915060a087013561327281613207565b809150509295509295509295565b600080600080600060a0868803121561329857600080fd5b8535945060208601359350604086013592506060860135915060808601356132bf81613207565b809150509295509295909350565b6000806000806000608086880312156132e557600080fd5b85356132f08161301c565b945060208601356133008161301c565b935060408601359250606086013567ffffffffffffffff81111561332357600080fd5b61332f88828901613034565b969995985093965092949392505050565b6001600160701b038116811461303157600080fd5b600080600080600080600060e0888a03121561337057600080fd5b87359650602088013561338281613340565b9550604088013561339281613340565b945060608801356133a281613207565b935060808801356133b281613207565b925060a08801356133c281613340565b915060c08801356133d281613340565b8091505092959891949750929550565b6000806000606084860312156133f757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561342057600080fd5b813561226c8161301c565b6020808252601c908201527f5265717569656d466f726d756c613a20494e56414c49445f5041544800000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561348b5761348b613462565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156134d0576134d0613462565b5060010190565b60208082526026908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556040820152650a8bea082a8960d31b606082015260800190565b60008060006060848603121561353257600080fd5b835161353d81613207565b602085015190935061354e81613207565b60408501519092506131bb81613207565b60008060006060848603121561357457600080fd5b835161357f81613340565b602085015190935061354e81613340565b6000602082840312156135a257600080fd5b815161226c8161301c565b60208082526026908201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160408201526555494449545960d01b606082015260800190565b600063ffffffff8381169083168181101561361057613610613462565b039392505050565b600081600019048311821515161561363257613632613462565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261365c5761365c613637565b500490565b60008282101561367357613673613462565b500390565b60008161368757613687613462565b506000190190565b60208082526025908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6040820152640bea082a8960db1b606082015260800190565b600080604083850312156136e757600080fd5b82516136f281613207565b602084015190925061317081613207565b600060033d111561371c5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561375357634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156137685790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561379857505050505090565b82850191508151818111156137b05750505050505090565b843d87010160208285010111156137ca5750505050505090565b6137d96020828601018761371f565b509095945050505050565b600060208083528351808285015260005b81811015613811578581018301518582016040015282016137f5565b81811115613823576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561384b57600080fd5b815161226c81613207565b600060ff821660ff84168082101561387057613870613462565b90039392505050565b600060ff82168061388c5761388c613462565b6000190192915050565b6000826138a5576138a5613637565b500690565b600060ff821660ff84168060ff038211156138c7576138c7613462565b019392505050565b600060ff8316806138e2576138e2613637565b8060ff8416049150509291505056fea2646970667358221220396f34fa9e262ada960520b164389cac764354d35a1d1b34349d3f2eb3cef52b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 668,
        "contract": "contracts/test/RequiemFormula_flat.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
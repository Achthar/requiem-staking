{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x877308d1a18913a5545a8dca47cdbf4fe07a6379bfe3bed13dd5be3824039b0d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "5516577",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x92864695b67b1ea36f72a5fcea88bf28497899b55309a534ecb1aeddec0871ca",
    "transactionHash": "0x877308d1a18913a5545a8dca47cdbf4fe07a6379bfe3bed13dd5be3824039b0d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "5516577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "16179579226d00f03cab7d78a37688fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/RequiemFormula_flat.sol\":\"RequiemFormula\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/test/RequiemFormula_flat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: contracts/interfaces/IRequiemWeightedPairFactory.sol\\n\\npragma solidity >=0.8.11;\\n\\ninterface IRequiemWeightedPairFactory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint32 tokenWeight0,\\n    uint32 swapFee,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function formula() external view returns (address);\\n\\n  function protocolFee() external view returns (uint256);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function isPair(address) external view returns (bool);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB,\\n    uint32 tokenWeightA,\\n    uint32 swapFee\\n  ) external returns (address pair);\\n\\n  function getWeightsAndSwapFee(address pair)\\n    external\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    );\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n\\n  function setProtocolFee(uint256) external;\\n}\\n\\n// File: contracts/interfaces/IRequiemPairERC20.sol\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\n// File: contracts/interfaces/IRequiemWeightedPair.sol\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\\n// File: contracts/interfaces/IRequiemFormula.sol\\n\\npragma solidity >=0.8.11;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n  function getReserveAndWeights(address pair, address tokenA)\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    external\\n    view\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    );\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountIn);\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountIn);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view returns (uint256[] memory amounts);\\n\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view returns (bool);\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    returns (address tokenB);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view returns (uint256 amount);\\n}\\n\\n// File: contracts/RequiemFormula.sol\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract RequiemFormula is IRequiemFormula {\\n  uint256 private constant ONE = 1;\\n  uint8 private constant MIN_PRECISION = 32;\\n  uint8 private constant MAX_PRECISION = 127;\\n\\n  uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n  uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n  uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n  uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n  uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n  uint256 private constant OPT_LOG_MAX_VAL =\\n    0x15bf0a8b1457695355fb8ac404e7a79e3;\\n  uint256 private constant OPT_EXP_MAX_VAL =\\n    0x800000000000000000000000000000000;\\n\\n  uint256 private constant LAMBERT_CONV_RADIUS =\\n    0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n  uint256 private constant LAMBERT_POS2_SAMPLE =\\n    0x0003060c183060c183060c183060c18306;\\n  uint256 private constant LAMBERT_POS2_MAXVAL =\\n    0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n  uint256 private constant LAMBERT_POS3_MAXVAL =\\n    0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n  uint256 private constant MAX_UNF_WEIGHT =\\n    0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n  uint256[128] private maxExpArray;\\n\\n  function initMaxExpArray() internal {\\n    maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n    maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n    maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n    maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n    maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n    maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n    maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n    maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n    maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n    maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n    maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n    maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n    maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n    maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n    maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n    maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n    maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n    maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n    maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n    maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n    maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n    maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n    maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n    maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n    maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n    maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n    maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n    maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n    maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n    maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n    maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n    maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n    maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n    maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n    maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n    maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n    maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n    maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n    maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n    maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n    maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n    maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n    maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n    maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n    maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n    maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n    maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n    maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n    maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n    maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n    maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n    maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n    maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n    maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n    maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n    maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n    maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n    maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n    maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n    maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n    maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n    maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n    maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n    maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n    maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n    maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n    maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n    maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n    maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n    maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n    maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n    maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n    maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n    maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n    maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n    maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n    maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n    maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n    maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n    maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n    maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n    maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n    maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n    maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n    maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n    maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n    maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n    maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n    maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n    maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n    maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n    maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n    maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n    maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n    maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n    maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n  }\\n\\n  constructor() {\\n    initMaxExpArray();\\n  }\\n\\n  /**\\n   * @dev General Description:\\n   *     Determine a value of precision.\\n   *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n   *     Return the result along with the precision used.\\n   *\\n   * Detailed Description:\\n   *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n   *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n   *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n   *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n   *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n   *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n   *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n   *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n   *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n   *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n   */\\n  function power(\\n    uint256 _baseN,\\n    uint256 _baseD,\\n    uint32 _expN,\\n    uint32 _expD\\n  ) internal view returns (uint256, uint8) {\\n    require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n    require(_baseN < MAX_NUM);\\n\\n    uint256 baseLog;\\n    uint256 base = (_baseN * FIXED_1) / _baseD;\\n    if (base < OPT_LOG_MAX_VAL) {\\n      baseLog = optimalLog(base);\\n    } else {\\n      baseLog = generalLog(base);\\n    }\\n\\n    uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n    if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n      return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n    } else {\\n      uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n      return (\\n        generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision),\\n        precision\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev computes log(x / FIXED_1) * FIXED_1.\\n   * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n   */\\n  function generalLog(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n    if (x >= FIXED_2) {\\n      uint8 count = floorLog2(x / FIXED_1);\\n      x >>= count;\\n      // now x < 2\\n      res = count * FIXED_1;\\n    }\\n\\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n    if (x > FIXED_1) {\\n      for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n        x = (x * x) / FIXED_1;\\n        // now 1 < x < 4\\n        if (x >= FIXED_2) {\\n          x >>= 1;\\n          // now 1 < x < 2\\n          res += ONE << (i - 1);\\n        }\\n      }\\n    }\\n\\n    return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n   */\\n  function floorLog2(uint256 _n) internal pure returns (uint8) {\\n    uint8 res = 0;\\n\\n    if (_n < 256) {\\n      // At most 8 iterations\\n      while (_n > 1) {\\n        _n >>= 1;\\n        res += 1;\\n      }\\n    } else {\\n      // Exactly 8 iterations\\n      for (uint8 s = 128; s > 0; s >>= 1) {\\n        if (_n >= (ONE << s)) {\\n          _n >>= s;\\n          res |= s;\\n        }\\n      }\\n    }\\n\\n    return res;\\n  }\\n\\n  /**\\n   * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n   * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n   * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n   */\\n  function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n    uint8 lo = MIN_PRECISION;\\n    uint8 hi = MAX_PRECISION;\\n\\n    while (lo + 1 < hi) {\\n      uint8 mid = (lo + hi) / 2;\\n      if (maxExpArray[mid] >= _x) lo = mid;\\n      else hi = mid;\\n    }\\n\\n    if (maxExpArray[hi] >= _x) return hi;\\n    if (maxExpArray[lo] >= _x) return lo;\\n\\n    require(false);\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n   * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n   * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n   * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n   * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n   */\\n  function generalExp(uint256 _x, uint8 _precision)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 xi = _x;\\n    uint256 res = 0;\\n\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n    // add x^02 * (33! / 02!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x116b96f757c380fb287fd0e40000000;\\n    // add x^03 * (33! / 03!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n    // add x^04 * (33! / 04!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00defabf91302cd95b9ffda50000000;\\n    // add x^05 * (33! / 05!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x002529ca9832b22439efff9b8000000;\\n    // add x^06 * (33! / 06!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n    // add x^07 * (33! / 07!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n    // add x^08 * (33! / 08!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000012e066e7b839fa050c309000000;\\n    // add x^09 * (33! / 09!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n    // add x^10 * (33! / 10!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n    // add x^11 * (33! / 11!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n    // add x^12 * (33! / 12!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000048177ebe1fa812375200000;\\n    // add x^13 * (33! / 13!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000005263fe90242dcbacf00000;\\n    // add x^14 * (33! / 14!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000057e22099c030d94100000;\\n    // add x^15 * (33! / 15!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000057e22099c030d9410000;\\n    // add x^16 * (33! / 16!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000052b6b54569976310000;\\n    // add x^17 * (33! / 17!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000004985f67696bf748000;\\n    // add x^18 * (33! / 18!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000003dea12ea99e498000;\\n    // add x^19 * (33! / 19!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000031880f2214b6e000;\\n    // add x^20 * (33! / 20!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000025bcff56eb36000;\\n    // add x^21 * (33! / 21!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000001b722e10ab1000;\\n    // add x^22 * (33! / 22!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000001317c70077000;\\n    // add x^23 * (33! / 23!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000cba84aafa00;\\n    // add x^24 * (33! / 24!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000082573a0a00;\\n    // add x^25 * (33! / 25!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000005035ad900;\\n    // add x^26 * (33! / 26!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x000000000000000000000002f881b00;\\n    // add x^27 * (33! / 27!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000001b29340;\\n    // add x^28 * (33! / 28!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x00000000000000000000000000efc40;\\n    // add x^29 * (33! / 29!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000007fe0;\\n    // add x^30 * (33! / 30!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000420;\\n    // add x^31 * (33! / 31!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000021;\\n    // add x^32 * (33! / 32!)\\n    xi = (xi * _x) >> _precision;\\n    res += xi * 0x0000000000000000000000000000001;\\n    // add x^33 * (33! / 33!)\\n\\n    return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n  }\\n\\n  /**\\n   * @dev computes log(x / FIXED_1) * FIXED_1\\n   * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n   * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n   * Detailed description:\\n   * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n   * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n   * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n   * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n   * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n   */\\n  function optimalLog(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    uint256 y;\\n    uint256 z;\\n    uint256 w;\\n\\n    if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n      res += 0x40000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n    }\\n    // add 1 / 2^1\\n    if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n      res += 0x20000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n    }\\n    // add 1 / 2^2\\n    if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n      res += 0x10000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n    }\\n    // add 1 / 2^3\\n    if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n      res += 0x08000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n    }\\n    // add 1 / 2^4\\n    if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n      res += 0x04000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n    }\\n    // add 1 / 2^5\\n    if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n      res += 0x02000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n    }\\n    // add 1 / 2^6\\n    if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n      res += 0x01000000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n    }\\n    // add 1 / 2^7\\n    if (x >= 0x808040155aabbbe9451521693554f733) {\\n      res += 0x00800000000000000000000000000000;\\n      x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n    }\\n    // add 1 / 2^8\\n\\n    z = y = x - FIXED_1;\\n    w = (y * y) / FIXED_1;\\n    res +=\\n      (z * (0x100000000000000000000000000000000 - y)) /\\n      0x100000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^01 / 01 - y^02 / 02\\n    res +=\\n      (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\\n      0x200000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^03 / 03 - y^04 / 04\\n    res +=\\n      (z * (0x099999999999999999999999999999999 - y)) /\\n      0x300000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^05 / 05 - y^06 / 06\\n    res +=\\n      (z * (0x092492492492492492492492492492492 - y)) /\\n      0x400000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^07 / 07 - y^08 / 08\\n    res +=\\n      (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\\n      0x500000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^09 / 09 - y^10 / 10\\n    res +=\\n      (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\\n      0x600000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^11 / 11 - y^12 / 12\\n    res +=\\n      (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\\n      0x700000000000000000000000000000000;\\n    z = (z * w) / FIXED_1;\\n    // add y^13 / 13 - y^14 / 14\\n    res +=\\n      (z * (0x088888888888888888888888888888888 - y)) /\\n      0x800000000000000000000000000000000;\\n    // add y^15 / 15 - y^16 / 16\\n\\n    return res;\\n  }\\n\\n  /**\\n   * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n   * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n   * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n   * Detailed description:\\n   * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n   * - The exponentiation of each binary exponent is given (pre-calculated)\\n   * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n   * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n   * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n   */\\n  function optimalExp(uint256 x) internal pure returns (uint256) {\\n    uint256 res = 0;\\n\\n    uint256 y;\\n    uint256 z;\\n\\n    z = y = x % 0x10000000000000000000000000000000;\\n    // get the input modulo 2^(-3)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x10e1b3be415a0000;\\n    // add y^02 * (20! / 02!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x05a0913f6b1e0000;\\n    // add y^03 * (20! / 03!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0168244fdac78000;\\n    // add y^04 * (20! / 04!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x004807432bc18000;\\n    // add y^05 * (20! / 05!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000c0135dca04000;\\n    // add y^06 * (20! / 06!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0001b707b1cdc000;\\n    // add y^07 * (20! / 07!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000036e0f639b800;\\n    // add y^08 * (20! / 08!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x00000618fee9f800;\\n    // add y^09 * (20! / 09!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000009c197dcc00;\\n    // add y^10 * (20! / 10!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000e30dce400;\\n    // add y^11 * (20! / 11!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000012ebd1300;\\n    // add y^12 * (20! / 12!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000017499f00;\\n    // add y^13 * (20! / 13!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000001a9d480;\\n    // add y^14 * (20! / 14!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x00000000001c6380;\\n    // add y^15 * (20! / 15!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000000001c638;\\n    // add y^16 * (20! / 16!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000001ab8;\\n    // add y^17 * (20! / 17!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x000000000000017c;\\n    // add y^18 * (20! / 18!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000000014;\\n    // add y^19 * (20! / 19!)\\n    z = (z * y) / FIXED_1;\\n    res += z * 0x0000000000000001;\\n    // add y^20 * (20! / 20!)\\n    res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n    if ((x & 0x010000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\\n        0x18ebef9eac820ae8682b9793ac6d1e776;\\n    // multiply by e^2^(-3)\\n    if ((x & 0x020000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\\n        0x1368b2fc6f9609fe7aceb46aa619baed4;\\n    // multiply by e^2^(-2)\\n    if ((x & 0x040000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\\n        0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n    // multiply by e^2^(-1)\\n    if ((x & 0x080000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\\n        0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n    // multiply by e^2^(+0)\\n    if ((x & 0x100000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\\n        0x00960aadc109e7a3bf4578099615711ea;\\n    // multiply by e^2^(+1)\\n    if ((x & 0x200000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x00960aadc109e7a3bf4578099615711d7) /\\n        0x0002bf84208204f5977f9a8cf01fdce3d;\\n    // multiply by e^2^(+2)\\n    if ((x & 0x400000000000000000000000000000000) != 0)\\n      res =\\n        (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\\n        0x0000003c6ab775dd0b95b4cbee7e65d11;\\n    // multiply by e^2^(+3)\\n\\n    return res;\\n  }\\n\\n  function getReserveAndWeights(address pair, address tokenA)\\n    public\\n    view\\n    override\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    )\\n  {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemWeightedPair(pair)\\n      .getReserves();\\n    uint32 tokenWeight0;\\n    uint32 tokenWeight1;\\n    (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n    if (tokenA == IRequiemWeightedPair(pair).token0()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemWeightedPair(pair).token1(),\\n        reserve0,\\n        reserve1,\\n        tokenWeight0,\\n        tokenWeight1\\n      );\\n    } else if (tokenA == IRequiemWeightedPair(pair).token1()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemWeightedPair(pair).token0(),\\n        reserve1,\\n        reserve0,\\n        tokenWeight1,\\n        tokenWeight0\\n      );\\n    } else {\\n      revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    }\\n  }\\n\\n  function getFactoryReserveAndWeights(\\n    address factory,\\n    address pair,\\n    address tokenA\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      address tokenB,\\n      uint256 reserveA,\\n      uint256 reserveB,\\n      uint32 tokenWeightA,\\n      uint32 tokenWeightB,\\n      uint32 swapFee\\n    )\\n  {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemWeightedPair(pair)\\n      .getReserves();\\n    uint32 tokenWeight0;\\n    uint32 tokenWeight1;\\n    (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(\\n      factory,\\n      pair\\n    );\\n\\n    if (tokenA == IRequiemWeightedPair(pair).token0()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemWeightedPair(pair).token1(),\\n        reserve0,\\n        reserve1,\\n        tokenWeight0,\\n        tokenWeight1\\n      );\\n    } else if (tokenA == IRequiemWeightedPair(pair).token1()) {\\n      (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (\\n        IRequiemWeightedPair(pair).token0(),\\n        reserve1,\\n        reserve0,\\n        tokenWeight1,\\n        tokenWeight0\\n      );\\n    } else {\\n      revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n   *\\n   * Formula:\\n   * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n   *\\n   * @param amountIn                  source reserve amount\\n   * @param reserveIn    source reserve balance\\n   * @param reserveOut    target reserve balance\\n   * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n   * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n   * @param swapFee                  swap fee of the conversion\\n   *\\n   * @return amountOut\\n   */\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) public view override returns (uint256 amountOut) {\\n    // validate input\\n    require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn * (10000 - swapFee);\\n    // special case for equal weights\\n    if (tokenWeightIn == tokenWeightOut) {\\n      return\\n        (reserveOut * amountInWithFee) / (reserveIn * 10000 + amountInWithFee);\\n    }\\n\\n    uint256 result;\\n    uint8 precision;\\n    uint256 baseN = reserveIn * 10000 + amountInWithFee;\\n    (result, precision) = power(\\n      baseN,\\n      reserveIn * 10000,\\n      tokenWeightIn,\\n      tokenWeightOut\\n    );\\n\\n    uint256 temp1 = reserveOut * result;\\n    uint256 temp2 = reserveOut << precision;\\n    amountOut = (temp1 - temp2) / result;\\n  }\\n\\n  /**\\n   * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n   *\\n   * Formula:\\n   * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n   *\\n   * @param amountOut     target reserve amount\\n   * @param reserveIn    source reserve balance\\n   * @param reserveOut    target reserve balance\\n   * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n   * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n   * @param swapFee                  swap fee of the conversion\\n   *\\n   * @return amountIn\\n   */\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut,\\n    uint32 tokenWeightIn,\\n    uint32 tokenWeightOut,\\n    uint32 swapFee\\n  ) public view override returns (uint256 amountIn) {\\n    // validate input\\n    require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    // special case for equal weights\\n    if (tokenWeightIn == tokenWeightOut) {\\n      uint256 numerator = reserveIn * amountOut * 10000;\\n      uint256 denominator = (reserveOut - amountOut) * (10000 - swapFee);\\n      return numerator / denominator + 1;\\n    }\\n\\n    uint256 result;\\n    uint8 precision;\\n    uint256 baseD = reserveOut - amountOut;\\n    (result, precision) = power(\\n      reserveOut,\\n      baseD,\\n      tokenWeightOut,\\n      tokenWeightIn\\n    );\\n    uint256 baseReserveIn = reserveIn * 10000;\\n    uint256 temp1 = baseReserveIn * result;\\n    uint256 temp2 = baseReserveIn << precision;\\n    amountIn = ((temp1 - temp2) >> precision) / (10000 - swapFee) + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[0] = amountIn;\\n    address currentTokenIn = tokenIn;\\n    for (uint256 i = 0; i < path.length; i++) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getReserveAndWeights(path[i], currentTokenIn);\\n      amounts[i + 1] = getAmountOut(\\n        amounts[i],\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(\\n      currentTokenIn == tokenOut,\\n      \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\"\\n    );\\n  }\\n\\n  function getFactoryAmountsOut(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[0] = amountIn;\\n    address currentTokenIn = tokenIn;\\n\\n    for (uint256 i = 0; i < path.length; i++) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getFactoryReserveAndWeights(factory, path[i], currentTokenIn);\\n      amounts[i + 1] = getAmountOut(\\n        amounts[i],\\n        reserveIn,\\n        reserveOut,\\n        tokenWeightIn,\\n        tokenWeightOut,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(\\n      currentTokenIn == tokenOut,\\n      \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\"\\n    );\\n  }\\n\\n  function getPairAmountOut(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountIn\\n  ) external view override returns (uint256 amountOut) {\\n    (\\n      ,\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut,\\n      uint32 swapFee\\n    ) = getReserveAndWeights(pair, tokenIn);\\n    amountOut = getAmountOut(\\n      amountIn,\\n      reserveIn,\\n      reserveOut,\\n      tokenWeightIn,\\n      tokenWeightOut,\\n      swapFee\\n    );\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[amounts.length - 1] = amountOut;\\n    address currentTokenIn = tokenOut;\\n    for (uint256 i = path.length; i > 0; i--) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n      amounts[i - 1] = getAmountIn(\\n        amounts[i],\\n        reserveOut,\\n        reserveIn,\\n        tokenWeightOut,\\n        tokenWeightIn,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n  }\\n\\n  function getFactoryAmountsIn(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut,\\n    address[] calldata path\\n  ) external view override returns (uint256[] memory amounts) {\\n    require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length + 1);\\n    amounts[amounts.length - 1] = amountOut;\\n    address currentTokenIn = tokenOut;\\n    for (uint256 i = path.length; i > 0; i--) {\\n      (\\n        address currentTokenOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n      ) = getFactoryReserveAndWeights(factory, path[i - 1], currentTokenIn);\\n      amounts[i - 1] = getAmountIn(\\n        amounts[i],\\n        reserveOut,\\n        reserveIn,\\n        tokenWeightOut,\\n        tokenWeightIn,\\n        swapFee\\n      );\\n      currentTokenIn = currentTokenOut;\\n    }\\n    require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n  }\\n\\n  function getPairAmountIn(\\n    address pair,\\n    address tokenIn,\\n    uint256 amountOut\\n  ) external view override returns (uint256 amountIn) {\\n    (\\n      ,\\n      uint256 reserveIn,\\n      uint256 reserveOut,\\n      uint32 tokenWeightIn,\\n      uint32 tokenWeightOut,\\n      uint32 swapFee\\n    ) = getReserveAndWeights(pair, tokenIn);\\n    amountIn = getAmountIn(\\n      amountOut,\\n      reserveOut,\\n      reserveIn,\\n      tokenWeightOut,\\n      tokenWeightIn,\\n      swapFee\\n    );\\n  }\\n\\n  function getWeightsAndSwapFee(address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    try IRequiemWeightedPair(pair).getTokenWeights() returns (\\n      uint32 _tokenWeight0,\\n      uint32 _tokenWeight1\\n    ) {\\n      return (\\n        _tokenWeight0,\\n        _tokenWeight1,\\n        IRequiemWeightedPair(pair).getSwapFee()\\n      );\\n    } catch Error(string memory reason) {\\n      revert(reason);\\n    } catch (\\n      bytes memory /*lowLevelData*/\\n    ) {\\n      return (50, 50, 30);\\n    }\\n  }\\n\\n  function getFactoryWeightsAndSwapFee(address factory, address pair)\\n    public\\n    view\\n    returns (\\n      uint32 tokenWeight0,\\n      uint32 tokenWeight1,\\n      uint32 swapFee\\n    )\\n  {\\n    return IRequiemWeightedPairFactory(factory).getWeightsAndSwapFee(pair);\\n  }\\n\\n  // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n  //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n  //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n  function ensureConstantValue(\\n    uint256 reserve0,\\n    uint256 reserve1,\\n    uint256 balance0Adjusted,\\n    uint256 balance1Adjusted,\\n    uint32 tokenWeight0\\n  ) external view override returns (bool) {\\n    if (tokenWeight0 == 50) {\\n      return balance0Adjusted * balance1Adjusted >= reserve0 * reserve1;\\n    }\\n    if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n      return true;\\n    }\\n    if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n      return false;\\n    }\\n    uint32 w0 = tokenWeight0;\\n    uint32 w1 = 100 - w0;\\n\\n    uint256 r0;\\n    uint256 p0;\\n    uint256 r1;\\n    uint256 p1;\\n    if (balance0Adjusted >= reserve0) {\\n      (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n      (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n    } else {\\n      (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n      (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n    }\\n    uint256 minP = p0 < p1 ? p0 : p1;\\n    p0 = p0 - minP;\\n    p1 = p1 - minP;\\n    return (r0 >> p0) <= (r1 >> p1);\\n  }\\n\\n  function sortTokens(address tokenA, address tokenB)\\n    public\\n    pure\\n    override\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n  }\\n\\n  function getReserves(\\n    address pair,\\n    address tokenA,\\n    address tokenB\\n  ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemWeightedPair(pair)\\n      .getReserves();\\n    require(\\n      token0 == IRequiemWeightedPair(pair).token0() &&\\n        token1 == IRequiemWeightedPair(pair).token1(),\\n      \\\"RequiemFormula: Invalid token\\\"\\n    );\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  function getOtherToken(address pair, address tokenA)\\n    external\\n    view\\n    override\\n    returns (address tokenB)\\n  {\\n    address token0 = IRequiemWeightedPair(pair).token0();\\n    address token1 = IRequiemWeightedPair(pair).token1();\\n    require(\\n      token0 == tokenA || token1 == tokenA,\\n      \\\"RequiemFormula: Invalid tokenA\\\"\\n    );\\n    tokenB = token0 == tokenA ? token1 : token0;\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure override returns (uint256 amountB) {\\n    require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  function mintLiquidityFee(\\n    uint256 totalLiquidity,\\n    uint112 reserve0,\\n    uint112 reserve1,\\n    uint32 tokenWeight0,\\n    uint32 tokenWeight1,\\n    uint112 collectedFee0,\\n    uint112 collectedFee1\\n  ) external view override returns (uint256 amount) {\\n    if (collectedFee0 > 0) {\\n      (uint256 r0, uint256 p0) = power(\\n        uint256(collectedFee0) + reserve0,\\n        reserve0,\\n        tokenWeight0,\\n        100\\n      );\\n      amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n    }\\n    if (collectedFee1 > 0) {\\n      (uint256 r1, uint256 p1) = power(\\n        uint256(collectedFee1) + reserve1,\\n        reserve1,\\n        tokenWeight1,\\n        100\\n      );\\n      amount = amount + ((totalLiquidity * r1) >> p1) - totalLiquidity;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x113f2e87b4a3b0f57f92d3701b7b7c023b95c006f05c9311e9d933b6920ff319\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061073f6001641c35fedd1560601b036020556001646c3390ecc9605e1b036021556001640cf801476160611b0360225560016431bdb23e1d605f1b0360235560016502fb1d8fe083605b1b0360245560016505b771955b37605a1b036025556001650af67a93bb5160591b0360265560016515060c256cb360581b036027556001651428a2f98d7360581b036028556001654d515663970960561b03602955600165944620b0e70f60551b03602a55600166011c592761c66760541b03602b5560016602214d10d014eb60531b03602c55600166020ade36b7dbef60531b03602d5560016603eab73b3bbfe360521b03602e556001660782ee3593f6d760511b03602f556001661ccf4b44bb4821604f1b0360305560016606e7f88ad8a77760511b0360315560016669f3d1c921891d604d1b03603255600166cb2ff529eb71e5604c1b03603355600166c2d415c3db974b604c1b0360345560016702eb40f9f620fda7604a1b0360355560016705990681d961a1eb60491b03603655600167055e12902701414760491b0360375560016714962dee9dc9764160471b0360385560016704ef57b9b560fab560491b0360395560016712ed7b32a58f552b60471b03603a556001679131271922eaa60760441b03603b556001678b380f3558668c4760441b03603c556001680215f77c045fbe885760421b03603d556001600160831b03603e556001670f577eded5773a1160471b03603f556001680eb5ec597592befbf5603f1b036040556001681c35fedd14b861eb05603e1b036041556001683619c87664579bc94b603d1b0360425560016867c00a3b07ffc01fd7603c1b03604355600168c6f6c8f8739773a7a5603b1b03604455600168bec763f8209b7a72b1603b1b0360455560016902dbb8caad9b7097b91b60391b03604655600169057b3d49dda84556d6f760381b03604755600169054183095b2c8ececf3160381b036048556001690a14517cc6b9457111ef60371b0360495560016913545598e5c23276ccf160361b03604a556001692511882c39c3adea96ff60351b03604b55600169471649d87199aa99075760341b03604c557004429a21a029d4c1457cfbffffffffffff604d55700415bc6d6fb7dd71af2cb3ffffffffffff604e557003eab73b3bbfe282243ce1ffffffffffff604f557003c1771ac9fb6b4c18e229ffffffffffff605055700399e96897690418f785257fffffffffff605155700373fc456c53bb779bf0ea9fffffffffff60525570034f9e8e490c48e67e6ab8bfffffffffff60535570032cbfd4a7adc790560b3337ffffffffff60545570030b50570f6e5d2acca94613ffffffffff6055557002eb40f9f620fda6b56c2861ffffffffff6056557002cc8340ecb0d0f520a6af58ffffffffff6057557002af09481380a0a35cf1ba02ffffffffff605855700292c5bdd3b92ec810287b1b3fffffffff605955700277abdcdab07d5a77ac6d6b9fffffffff605a5570025daf6654b1eaa55fd64df5efffffffff605b55700244c49c648baa98192dce88b7ffffffff605c5570022ce03cd5619a311b2471268bffffffff605d55700215f77c045fbe885654a44a0fffffffff605e556001600160811b03605f557001eaefdbdaaee7421fc4d3ede5ffffffff6060557001d6bd8b2eb257df7e8ca57b09bfffffff6061557001c35fedd14b861eb0443f7f133fffffff6062557001b0ce43b322bcde4a56e8ada5afffffff60635570019f0028ec1fff007f5a195a39dfffffff60645570018ded91f0e72ee74f49b15ba527ffffff60655570017d8ec7f04136f4e5615fd41a63ffffff60665570016ddc6556cdb84bdc8d12d22e6fffffff60675570015ecf52776a1155b5bd8395814f7fffff60685570015060c256cb23b3b3cc3754cf40ffffff6069557001428a2f98d728ae223ddab715be3fffff606a5570013545598e5c23276ccf0ede68034fffff606b557001288c4161ce1d6f54b7f61081194fffff606c5570011c592761c666aa641d5a01a40f17ffff606d55700110a688680a7530515f3e6e6cfdcdffff606e557001056f1b5bedf75c6bcb2ce8aed428ffff606f556ffaadceceeff8a0890f3875f008277fff6070556ff05dc6b27edad306388a600f6ba0bfff6071556fe67a5a25da41063de1495d5b18cdbfff6072556fdcff115b14eedde6fc3aa5353f2e4fff6073556fd3e7a3924312399f9aae2e0f868f8fff6074556fcb2ff529eb71e41582cccd5a1ee26fff6075556fc2d415c3db974ab32a51840c0b67edff6076556fbad03e7d883f69ad5b0a186184e06bff6077556fb320d03b2c343d4829abd6075f0cc5ff6078556fabc25204e02828d73c6e80bcdb1a95bf6079556fa4b16f74ee4bb2040a1ec6c15fbbf2df607a556f9deaf736ac1f569deb1b5ae3f36c130f607b556f976bd9952c7aa957f5937d790ef65037607c556f9131271922eaa6064b73a22d0bd4f2bf607d556f8b380f3558668c46c91c49a2f8e967b9607e556f857ddf0117efa215952912839f6473e6607f55565b613bf98061074e6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e610149366004613453565b61037c565b60405161015b91906134d8565b60405180910390f35b61017761017236600461351c565b610577565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac366004613555565b61060f565b6040805192835260208301919091520161015b565b6101d96101d436600461351c565b610812565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c61020736600461351c565b610922565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d3660046135a0565b610bf9565b60405190815260200161015b565b61026261027e3660046135f3565b610c32565b61014e610291366004613453565b610df1565b6102a96102a436600461365a565b610fd1565b604051901515815260200161015b565b6102626102c73660046135a0565b6110f6565b61014e6102da3660046136a7565b611122565b6102626102ed36600461372f565b611304565b6102626103003660046137bc565b6113e7565b6102626103133660046135f3565b6114e6565b61020c610326366004613555565b6116ba565b61014e6103393660046136a7565b611948565b61017761034c3660046137e8565b611b15565b61036461035f36600461351c565b611c70565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db82600161381b565b67ffffffffffffffff8111156103f3576103f3613833565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613849565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613849565b905060200201602081019061047e91906137e8565b8a6116ba565b9550955095509550955095506104b78988815181106104a5576104a5613849565b60200260200101518686868686610c32565b896104c389600161381b565b815181106104d3576104d3613849565b60200260200101818152505085975050505050505080806104f39061385f565b915050610442565b50856001600160a01b0316816001600160a01b03161461056c5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556044820152650a8bea082a8960d31b60648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610602919061387a565b9250925092509250925092565b60008060008061061f8686610812565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906138bc565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070191906138ed565b6001600160a01b0316846001600160a01b03161480156107935750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e91906138ed565b6001600160a01b0316836001600160a01b0316145b6107df5760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b0316146107ff578082610802565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b0316141561089d5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108bd5782846108c0565b83835b90925090506001600160a01b03821661091b5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906138bc565b506001600160701b031691506001600160701b031691506000806109b38c611b15565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906138ed565b6001600160a01b03168b6001600160a01b03161415610ab1578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c91906138ed565b99509297509095509350915084848484610beb565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1391906138ed565b6001600160a01b03168b6001600160a01b03161415610ba3578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e91906138ed565b99509197509195509350915083858385610beb565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b600080600080600080610c0c8989610922565b9550955095509550955050610c258785878587866114e6565b9998505050505050505050565b6000808711610ca95760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cb95750600085115b610d145760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b6000610d228361271061390a565b610d329063ffffffff168961392f565b90508363ffffffff168563ffffffff161415610d7b5780610d558861271061392f565b610d5f919061381b565b610d69828861392f565b610d739190613964565b915050610de7565b6000808083610d8c8b61271061392f565b610d96919061381b565b9050610daf81610da88c61271061392f565b8a8a611dd9565b90935091506000610dc0848b61392f565b905060ff83168a901b84610dd48284613978565b610dde9190613964565b96505050505050505b9695505050505050565b606081610e405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610e4b82600161381b565b67ffffffffffffffff811115610e6357610e63613833565b604051908082528060200260200182016040528015610e8c578160200160208202803683370190505b509050838160018351610e9f9190613978565b81518110610eaf57610eaf613849565b602090810291909101015284825b8015610f615760008080808080610eea8f8c8c610edb60018c613978565b81811061046957610469613849565b955095509550955095509550610f1d898881518110610f0b57610f0b613849565b602002602001015185878587866114e6565b89610f2960018a613978565b81518110610f3957610f39613849565b6020026020010181815250508597505050505050508080610f599061398f565b915050610ebd565b50866001600160a01b0316816001600160a01b03161461056c5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6044820152640bea082a8960db1b60648201526084016103c7565b60008163ffffffff1660321415610fff57610fec858761392f565b610ff6848661392f565b101590506110ed565b85841015801561100f5750848310155b1561101c575060016110ed565b85841115801561102c5750848311155b15611039575060006110ed565b81600061104782606461390a565b90506000806000808b8a10611085576110638b8a876032611dd9565b90945060ff1692506110788a8d886032611dd9565b90925060ff1690506110b0565b6110928c8b886032611dd9565b90945060ff1692506110a7898c876032611dd9565b90925060ff1690505b60008184106110bf57816110c1565b835b90506110cd8185613978565b93506110d98183613978565b9290921c9390921c92909211159450505050505b95945050505050565b6000806000806000806111098989610922565b9550955095509550955050610c25878686868686610c32565b6060816111715760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b61117c82600161381b565b67ffffffffffffffff81111561119457611194613833565b6040519080825280602002602001820160405280156111bd578160200160208202803683370190505b50905083816000815181106111d4576111d4613849565b60209081029190910101528560005b83811015611289576000806000806000806112248b8b8981811061120957611209613849565b905060200201602081019061121e91906137e8565b89610922565b9550955095509550955095506112458988815181106104a5576104a5613849565b8961125189600161381b565b8151811061126157611261613849565b60200260200101818152505085975050505050505080806112819061385f565b9150506111e3565b50856001600160a01b0316816001600160a01b0316146112fa5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556044820152650a8bea082a8960d31b60648201526084016103c7565b5095945050505050565b60006001600160701b03831615611371576000806113436113316001600160701b03808c1690881661381b565b8a6001600160701b0316896064611dd9565b90925060ff1690508981611357848361392f565b611362911c8561381b565b61136c9190613978565b925050505b6001600160701b038216156113dc576000806113ae61139c6001600160701b03808b1690871661381b565b896001600160701b0316886064611dd9565b90925060ff16905089816113c2848361392f565b6113cd911c8561381b565b6113d79190613978565b925050505b979650505050505050565b600080841161145e5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008311801561146e5750600082115b6114c95760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b826114d4838661392f565b6114de9190613964565b949350505050565b600080871161155d5760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b60008611801561156d5750600085115b6115c85760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b8263ffffffff168463ffffffff16141561163e5760006115e8888861392f565b6115f49061271061392f565b905060006116048461271061390a565b63ffffffff166116148a89613978565b61161e919061392f565b905061162a8183613964565b61163590600161381b565b92505050610de7565b6000808061164c8a89613978565b905061165a8882888a611dd9565b9093509150600061166d8a61271061392f565b9050600061167b858361392f565b905060ff841682901b6116908861271061390a565b63ffffffff1660ff86166116a48385613978565b6116af92911c613964565b610dde90600161381b565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172891906138bc565b506001600160701b031691506001600160701b0316915060008061174c8d8d610577565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906138ed565b6001600160a01b03168b6001600160a01b0316141561184a578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906138ed565b99509297509095509350915084848484611938565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac91906138ed565b6001600160a01b03168b6001600160a01b03161415610ba3578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192791906138ed565b995091975091955093509150838583855b5050505093975093979195509350565b6060816119975760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b6119a282600161381b565b67ffffffffffffffff8111156119ba576119ba613833565b6040519080825280602002602001820160405280156119e3578160200160208202803683370190505b5090508381600183516119f69190613978565b81518110611a0657611a06613849565b602090810291909101015284825b8015611aa55760008080808080611a408b8b611a3160018b613978565b81811061120957611209613849565b955095509550955095509550611a61898881518110610f0b57610f0b613849565b89611a6d60018a613978565b81518110611a7d57611a7d613849565b6020026020010181815250508597505050505050508080611a9d9061398f565b915050611a14565b50866001600160a01b0316816001600160a01b0316146112fa5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6044820152640bea082a8960db1b60648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611b73575060408051601f3d908101601f19168201909252611b70918101906139a6565b60015b611bfc57611b7f6139d5565b806308c379a01415611bb95750611b94613a2c565b80611b9f5750611bbb565b8060405162461bcd60e51b81526004016103c79190613ab6565b505b3d808015611be5576040519150601f19603f3d011682016040523d82523d6000602084013e611bea565b606091505b50603280601e93509350935050611c69565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c609190613b0b565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd591906138ed565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b91906138ed565b9050836001600160a01b0316826001600160a01b03161480611d6e5750836001600160a01b0316816001600160a01b0316145b611dba5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146114de57816110ed565b60008084861015611e2c5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b600160811b8610611e3c57600080fd5b60008086611e4e6001607f1b8a61392f565b611e589190613964565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611e8357611e7c81611f23565b9150611e8f565b611e8c81612533565b91505b60008563ffffffff168763ffffffff1684611eaa919061392f565b611eb49190613964565b9050700800000000000000000000000000000000811015611ee657611ed881612628565b607f94509450505050611f1a565b6000611ef182612c78565b9050611f0d611f0182607f613b28565b60ff1683901c82612d2b565b95509350611f1a92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611f8857611f5a6f400000000000000000000000000000008561381b565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611f7b6001607f1b8861392f565b611f859190613964565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611fe757611fb96f200000000000000000000000000000008561381b565b93506fa45af1e1f40c333b3de1db4dd55f29a7611fda6001607f1b8861392f565b611fe49190613964565b95505b6f910b022db7ae67ce76b441c27035c6a1861061203a5761200c6001607c1b8561381b565b93506f910b022db7ae67ce76b441c27035c6a161202d6001607f1b8861392f565b6120379190613964565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106120995761206b6f080000000000000000000000000000008561381b565b93506f88415abbe9a76bead8d00cf112e4d4a861208c6001607f1b8861392f565b6120969190613964565b95505b6f84102b00893f64c705e841d5d4064bd386106120f8576120ca6f040000000000000000000000000000008561381b565b93506f84102b00893f64c705e841d5d4064bd36120eb6001607f1b8861392f565b6120f59190613964565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612157576121296f020000000000000000000000000000008561381b565b93506f8204055aaef1c8bd5c3259f4822735a261214a6001607f1b8861392f565b6121549190613964565b95505b6f810100ab00222d861931c15e39b44e9986106121b6576121886f010000000000000000000000000000008561381b565b93506f810100ab00222d861931c15e39b44e996121a96001607f1b8861392f565b6121b39190613964565b95505b6f808040155aabbbe9451521693554f7338610612214576121e66e8000000000000000000000000000008561381b565b93506f808040155aabbbe9451521693554f7336122076001607f1b8861392f565b6122119190613964565b95505b6122226001607f1b87613978565b92508291506001607f1b612236838061392f565b6122409190613964565b9050600160801b6122518482613978565b61225b908461392f565b6122659190613964565b61226f908561381b565b93506001607f1b612280828461392f565b61228a9190613964565b9150600160811b6122ab846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613978565b6122b5908461392f565b6122bf9190613964565b6122c9908561381b565b93506001607f1b6122da828461392f565b6122e49190613964565b9150700300000000000000000000000000000000612312846f99999999999999999999999999999999613978565b61231c908461392f565b6123269190613964565b612330908561381b565b93506001607f1b612341828461392f565b61234b9190613964565b9150700400000000000000000000000000000000612379846f92492492492492492492492492492492613978565b612383908461392f565b61238d9190613964565b612397908561381b565b93506001607f1b6123a8828461392f565b6123b29190613964565b91507005000000000000000000000000000000006123e0846f8e38e38e38e38e38e38e38e38e38e38e613978565b6123ea908461392f565b6123f49190613964565b6123fe908561381b565b93506001607f1b61240f828461392f565b6124199190613964565b9150700600000000000000000000000000000000612447846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613978565b612451908461392f565b61245b9190613964565b612465908561381b565b93506001607f1b612476828461392f565b6124809190613964565b91507007000000000000000000000000000000006124ae846f89d89d89d89d89d89d89d89d89d89d89613978565b6124b8908461392f565b6124c29190613964565b6124cc908561381b565b93506001607f1b6124dd828461392f565b6124e79190613964565b9150700800000000000000000000000000000000612515846f88888888888888888888888888888888613978565b61251f908461392f565b6125299190613964565b610de7908561381b565b600080600160801b83106125775760006125596125546001607f1b86613964565b613389565b60ff811694851c94909150612573906001607f1b9061392f565b9150505b6001607f1b8311156125ec57607f5b60ff8116156125ea576001607f1b61259e858061392f565b6125a89190613964565b9350600160801b84106125da57600193841c936125c59082613b28565b60ff166001901b826125d7919061381b565b91505b6125e381613b4b565b9050612586565b505b6f05b9de1d10bf4103d647b0955897ba806126176f03f80fe03f80fe03f80fe03f80fe03f88361392f565b6126219190613964565b9392505050565b600080808061263b6001607c1b86613b68565b91508190506001607f1b61264f828061392f565b6126599190613964565b905061266d816710e1b3be415a000061392f565b612677908461381b565b92506001607f1b612688838361392f565b6126929190613964565b90506126a6816705a0913f6b1e000061392f565b6126b0908461381b565b92506001607f1b6126c1838361392f565b6126cb9190613964565b90506126df81670168244fdac7800061392f565b6126e9908461381b565b92506001607f1b6126fa838361392f565b6127049190613964565b905061271781664807432bc1800061392f565b612721908461381b565b92506001607f1b612732838361392f565b61273c9190613964565b905061274f81660c0135dca0400061392f565b612759908461381b565b92506001607f1b61276a838361392f565b6127749190613964565b9050612787816601b707b1cdc00061392f565b612791908461381b565b92506001607f1b6127a2838361392f565b6127ac9190613964565b90506127be816536e0f639b80061392f565b6127c8908461381b565b92506001607f1b6127d9838361392f565b6127e39190613964565b90506127f581650618fee9f80061392f565b6127ff908461381b565b92506001607f1b612810838361392f565b61281a9190613964565b905061282b81649c197dcc0061392f565b612835908461381b565b92506001607f1b612846838361392f565b6128509190613964565b905061286181640e30dce40061392f565b61286b908461381b565b92506001607f1b61287c838361392f565b6128869190613964565b90506128978164012ebd130061392f565b6128a1908461381b565b92506001607f1b6128b2838361392f565b6128bc9190613964565b90506128cc816317499f0061392f565b6128d6908461381b565b92506001607f1b6128e7838361392f565b6128f19190613964565b9050612901816301a9d48061392f565b61290b908461381b565b92506001607f1b61291c838361392f565b6129269190613964565b905061293581621c638061392f565b61293f908461381b565b92506001607f1b612950838361392f565b61295a9190613964565b9050612969816201c63861392f565b612973908461381b565b92506001607f1b612984838361392f565b61298e9190613964565b905061299c81611ab861392f565b6129a6908461381b565b92506001607f1b6129b7838361392f565b6129c19190613964565b90506129cf8161017c61392f565b6129d9908461381b565b92506001607f1b6129ea838361392f565b6129f49190613964565b9050612a0181601461392f565b612a0b908461381b565b92506001607f1b612a1c838361392f565b612a269190613964565b9050612a3381600161392f565b612a3d908461381b565b92506001607f1b82612a576721c3677c82b4000086613964565b612a61919061381b565b612a6b919061381b565b92506001607c1b851615612ab35770018ebef9eac820ae8682b9793ac6d1e776612aa6847001c3d6a24ed82218787d624d3e5eba95f961392f565b612ab09190613964565b92505b6f20000000000000000000000000000000851615612b05577001368b2fc6f9609fe7aceb46aa619baed4612af88470018ebef9eac820ae8682b9793ac6d1e77861392f565b612b029190613964565b92505b6f40000000000000000000000000000000851615612b56576fbc5ab1b16779be3575bd8f0520a9f21f612b49847001368b2fc6f9609fe7aceb46aa619baed561392f565b612b539190613964565b92505b6001607f1b851615612b9a576f454aaa8efe072e7f6ddbab84b40a55c9612b8d846fbc5ab1b16779be3575bd8f0520a9f21e61392f565b612b979190613964565b92505b600160801b851615612bde576f0960aadc109e7a3bf4578099615711ea612bd1846f454aaa8efe072e7f6ddbab84b40a55c561392f565b612bdb9190613964565b92505b600160811b851615612c21576e2bf84208204f5977f9a8cf01fdce3d612c14846f0960aadc109e7a3bf4578099615711d761392f565b612c1e9190613964565b92505b700400000000000000000000000000000000851615612c6f576d03c6ab775dd0b95b4cbee7e65d11612c62846e2bf84208204f5977f9a8cf01fdc30761392f565b612c6c9190613964565b92505b50909392505050565b60006020607f5b60ff8116612c8e836001613b7c565b60ff161015612ce15760006002612ca58385613b7c565b612caf9190613ba1565b90508460008260ff1660808110612cc857612cc8613849565b015410612cd757809250612cdb565b8091505b50612c7f565b8360008260ff1660808110612cf857612cf8613849565b015410612d06579392505050565b8360008360ff1660808110612d1d57612d1d613849565b015410610136575092915050565b6000828160ff8416612d3d838061392f565b901c9150612d5b826f03442c4e6074a82f1797f72ac000000061392f565b612d65908261381b565b905060ff8416612d75868461392f565b901c9150612d93826f0116b96f757c380fb287fd0e4000000061392f565b612d9d908261381b565b905060ff8416612dad868461392f565b901c9150612dca826e45ae5bdd5f0e03eca1ff439000000061392f565b612dd4908261381b565b905060ff8416612de4868461392f565b901c9150612e01826e0defabf91302cd95b9ffda5000000061392f565b612e0b908261381b565b905060ff8416612e1b868461392f565b901c9150612e38826e02529ca9832b22439efff9b800000061392f565b612e42908261381b565b905060ff8416612e52868461392f565b901c9150612e6e826d54f1cf12bd04e516b6da8800000061392f565b612e78908261381b565b905060ff8416612e88868461392f565b901c9150612ea4826d0a9e39e257a09ca2d6db5100000061392f565b612eae908261381b565b905060ff8416612ebe868461392f565b901c9150612eda826d012e066e7b839fa050c30900000061392f565b612ee4908261381b565b905060ff8416612ef4868461392f565b901c9150612f0f826c1e33d7d926c329a1ad1a80000061392f565b612f19908261381b565b905060ff8416612f29868461392f565b901c9150612f44826c02bee513bdb4a6b19b5f80000061392f565b612f4e908261381b565b905060ff8416612f5e868461392f565b901c9150612f78826b3a9316fa79b88eccf2a0000061392f565b612f82908261381b565b905060ff8416612f92868461392f565b901c9150612fac826b048177ebe1fa81237520000061392f565b612fb6908261381b565b905060ff8416612fc6868461392f565b901c9150612fdf826a5263fe90242dcbacf0000061392f565b612fe9908261381b565b905060ff8416612ff9868461392f565b901c9150613012826a057e22099c030d9410000061392f565b61301c908261381b565b905060ff841661302c868461392f565b901c9150613044826957e22099c030d941000061392f565b61304e908261381b565b905060ff841661305e868461392f565b901c91506130768269052b6b5456997631000061392f565b613080908261381b565b905060ff8416613090868461392f565b901c91506130a782684985f67696bf74800061392f565b6130b1908261381b565b905060ff84166130c1868461392f565b901c91506130d8826803dea12ea99e49800061392f565b6130e2908261381b565b905060ff84166130f2868461392f565b901c9150613108826731880f2214b6e00061392f565b613112908261381b565b905060ff8416613122868461392f565b901c91506131388267025bcff56eb3600061392f565b613142908261381b565b905060ff8416613152868461392f565b901c915061316782661b722e10ab100061392f565b613171908261381b565b905060ff8416613181868461392f565b901c9150613196826601317c7007700061392f565b6131a0908261381b565b905060ff84166131b0868461392f565b901c91506131c482650cba84aafa0061392f565b6131ce908261381b565b905060ff84166131de868461392f565b901c91506131f1826482573a0a0061392f565b6131fb908261381b565b905060ff841661320b868461392f565b901c915061321e826405035ad90061392f565b613228908261381b565b905060ff8416613238868461392f565b901c915061324a82632f881b0061392f565b613254908261381b565b905060ff8416613264868461392f565b901c9150613276826301b2934061392f565b613280908261381b565b905060ff8416613290868461392f565b901c91506132a182620efc4061392f565b6132ab908261381b565b905060ff84166132bb868461392f565b901c91506132cb82617fe061392f565b6132d5908261381b565b905060ff84166132e5868461392f565b901c91506132f58261042061392f565b6132ff908261381b565b905060ff841661330f868461392f565b901c915061331e82602161392f565b613328908261381b565b905060ff8416613338868461392f565b901c915061334782600161392f565b613351908261381b565b9050600160ff85161b856133756f0688589cc0e9505e2f2fee558000000084613964565b61337f919061381b565b6110ed919061381b565b6000806101008310156133bc575b60018311156133b757600192831c926133b09082613b7c565b9050613397565b6133f0565b60805b60ff8116156133ee57600160ff82161b84106133e35760ff81169390931c92908117905b60011c607f166133bf565b505b92915050565b6001600160a01b038116811461340b57600080fd5b50565b60008083601f84011261342057600080fd5b50813567ffffffffffffffff81111561343857600080fd5b6020830191508360208260051b850101111561091b57600080fd5b60008060008060008060a0878903121561346c57600080fd5b8635613477816133f6565b95506020870135613487816133f6565b94506040870135613497816133f6565b935060608701359250608087013567ffffffffffffffff8111156134ba57600080fd5b6134c689828a0161340e565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b81811015613510578351835292840192918401916001016134f4565b50909695505050505050565b6000806040838503121561352f57600080fd5b823561353a816133f6565b9150602083013561354a816133f6565b809150509250929050565b60008060006060848603121561356a57600080fd5b8335613575816133f6565b92506020840135613585816133f6565b91506040840135613595816133f6565b809150509250925092565b6000806000606084860312156135b557600080fd5b83356135c0816133f6565b925060208401356135d0816133f6565b929592945050506040919091013590565b63ffffffff8116811461340b57600080fd5b60008060008060008060c0878903121561360c57600080fd5b863595506020870135945060408701359350606087013561362c816135e1565b9250608087013561363c816135e1565b915060a087013561364c816135e1565b809150509295509295509295565b600080600080600060a0868803121561367257600080fd5b853594506020860135935060408601359250606086013591506080860135613699816135e1565b809150509295509295909350565b6000806000806000608086880312156136bf57600080fd5b85356136ca816133f6565b945060208601356136da816133f6565b935060408601359250606086013567ffffffffffffffff8111156136fd57600080fd5b6137098882890161340e565b969995985093965092949392505050565b6001600160701b038116811461340b57600080fd5b600080600080600080600060e0888a03121561374a57600080fd5b87359650602088013561375c8161371a565b9550604088013561376c8161371a565b9450606088013561377c816135e1565b9350608088013561378c816135e1565b925060a088013561379c8161371a565b915060c08801356137ac8161371a565b8091505092959891949750929550565b6000806000606084860312156137d157600080fd5b505081359360208301359350604090920135919050565b6000602082840312156137fa57600080fd5b8135612621816133f6565b634e487b7160e01b600052601160045260246000fd5b6000821982111561382e5761382e613805565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561387357613873613805565b5060010190565b60008060006060848603121561388f57600080fd5b835161389a816135e1565b60208501519093506138ab816135e1565b6040850151909250613595816135e1565b6000806000606084860312156138d157600080fd5b83516138dc8161371a565b60208501519093506138ab8161371a565b6000602082840312156138ff57600080fd5b8151612621816133f6565b600063ffffffff8381169083168181101561392757613927613805565b039392505050565b600081600019048311821515161561394957613949613805565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826139735761397361394e565b500490565b60008282101561398a5761398a613805565b500390565b60008161399e5761399e613805565b506000190190565b600080604083850312156139b957600080fd5b82516139c4816135e1565b602084015190925061354a816135e1565b600060033d11156139ee5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff81118282101715613a2557634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d1015613a3a5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613a6a57505050505090565b8285019150815181811115613a825750505050505090565b843d8701016020828501011115613a9c5750505050505090565b613aab602082860101876139f1565b509095945050505050565b600060208083528351808285015260005b81811015613ae357858101830151858201604001528201613ac7565b81811115613af5576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215613b1d57600080fd5b8151612621816135e1565b600060ff821660ff841680821015613b4257613b42613805565b90039392505050565b600060ff821680613b5e57613b5e613805565b6000190192915050565b600082613b7757613b7761394e565b500690565b600060ff821660ff84168060ff03821115613b9957613b99613805565b019392505050565b600060ff831680613bb457613bb461394e565b8060ff8416049150509291505056fea2646970667358221220d7414bbb8e76f9ac07af778053895f0c9e76b71ab5879c7eaaf6298bb3046f5964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e610149366004613453565b61037c565b60405161015b91906134d8565b60405180910390f35b61017761017236600461351c565b610577565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac366004613555565b61060f565b6040805192835260208301919091520161015b565b6101d96101d436600461351c565b610812565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c61020736600461351c565b610922565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d3660046135a0565b610bf9565b60405190815260200161015b565b61026261027e3660046135f3565b610c32565b61014e610291366004613453565b610df1565b6102a96102a436600461365a565b610fd1565b604051901515815260200161015b565b6102626102c73660046135a0565b6110f6565b61014e6102da3660046136a7565b611122565b6102626102ed36600461372f565b611304565b6102626103003660046137bc565b6113e7565b6102626103133660046135f3565b6114e6565b61020c610326366004613555565b6116ba565b61014e6103393660046136a7565b611948565b61017761034c3660046137e8565b611b15565b61036461035f36600461351c565b611c70565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db82600161381b565b67ffffffffffffffff8111156103f3576103f3613833565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613849565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613849565b905060200201602081019061047e91906137e8565b8a6116ba565b9550955095509550955095506104b78988815181106104a5576104a5613849565b60200260200101518686868686610c32565b896104c389600161381b565b815181106104d3576104d3613849565b60200260200101818152505085975050505050505080806104f39061385f565b915050610442565b50856001600160a01b0316816001600160a01b03161461056c5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556044820152650a8bea082a8960d31b60648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610602919061387a565b9250925092509250925092565b60008060008061061f8686610812565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906138bc565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070191906138ed565b6001600160a01b0316846001600160a01b03161480156107935750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e91906138ed565b6001600160a01b0316836001600160a01b0316145b6107df5760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b0316146107ff578082610802565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b0316141561089d5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108bd5782846108c0565b83835b90925090506001600160a01b03821661091b5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906138bc565b506001600160701b031691506001600160701b031691506000806109b38c611b15565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906138ed565b6001600160a01b03168b6001600160a01b03161415610ab1578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c91906138ed565b99509297509095509350915084848484610beb565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1391906138ed565b6001600160a01b03168b6001600160a01b03161415610ba3578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e91906138ed565b99509197509195509350915083858385610beb565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b600080600080600080610c0c8989610922565b9550955095509550955050610c258785878587866114e6565b9998505050505050505050565b6000808711610ca95760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cb95750600085115b610d145760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b6000610d228361271061390a565b610d329063ffffffff168961392f565b90508363ffffffff168563ffffffff161415610d7b5780610d558861271061392f565b610d5f919061381b565b610d69828861392f565b610d739190613964565b915050610de7565b6000808083610d8c8b61271061392f565b610d96919061381b565b9050610daf81610da88c61271061392f565b8a8a611dd9565b90935091506000610dc0848b61392f565b905060ff83168a901b84610dd48284613978565b610dde9190613964565b96505050505050505b9695505050505050565b606081610e405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610e4b82600161381b565b67ffffffffffffffff811115610e6357610e63613833565b604051908082528060200260200182016040528015610e8c578160200160208202803683370190505b509050838160018351610e9f9190613978565b81518110610eaf57610eaf613849565b602090810291909101015284825b8015610f615760008080808080610eea8f8c8c610edb60018c613978565b81811061046957610469613849565b955095509550955095509550610f1d898881518110610f0b57610f0b613849565b602002602001015185878587866114e6565b89610f2960018a613978565b81518110610f3957610f39613849565b6020026020010181815250508597505050505050508080610f599061398f565b915050610ebd565b50866001600160a01b0316816001600160a01b03161461056c5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6044820152640bea082a8960db1b60648201526084016103c7565b60008163ffffffff1660321415610fff57610fec858761392f565b610ff6848661392f565b101590506110ed565b85841015801561100f5750848310155b1561101c575060016110ed565b85841115801561102c5750848311155b15611039575060006110ed565b81600061104782606461390a565b90506000806000808b8a10611085576110638b8a876032611dd9565b90945060ff1692506110788a8d886032611dd9565b90925060ff1690506110b0565b6110928c8b886032611dd9565b90945060ff1692506110a7898c876032611dd9565b90925060ff1690505b60008184106110bf57816110c1565b835b90506110cd8185613978565b93506110d98183613978565b9290921c9390921c92909211159450505050505b95945050505050565b6000806000806000806111098989610922565b9550955095509550955050610c25878686868686610c32565b6060816111715760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b61117c82600161381b565b67ffffffffffffffff81111561119457611194613833565b6040519080825280602002602001820160405280156111bd578160200160208202803683370190505b50905083816000815181106111d4576111d4613849565b60209081029190910101528560005b83811015611289576000806000806000806112248b8b8981811061120957611209613849565b905060200201602081019061121e91906137e8565b89610922565b9550955095509550955095506112458988815181106104a5576104a5613849565b8961125189600161381b565b8151811061126157611261613849565b60200260200101818152505085975050505050505080806112819061385f565b9150506111e3565b50856001600160a01b0316816001600160a01b0316146112fa5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556044820152650a8bea082a8960d31b60648201526084016103c7565b5095945050505050565b60006001600160701b03831615611371576000806113436113316001600160701b03808c1690881661381b565b8a6001600160701b0316896064611dd9565b90925060ff1690508981611357848361392f565b611362911c8561381b565b61136c9190613978565b925050505b6001600160701b038216156113dc576000806113ae61139c6001600160701b03808b1690871661381b565b896001600160701b0316886064611dd9565b90925060ff16905089816113c2848361392f565b6113cd911c8561381b565b6113d79190613978565b925050505b979650505050505050565b600080841161145e5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008311801561146e5750600082115b6114c95760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b826114d4838661392f565b6114de9190613964565b949350505050565b600080871161155d5760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b60008611801561156d5750600085115b6115c85760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103c7565b8263ffffffff168463ffffffff16141561163e5760006115e8888861392f565b6115f49061271061392f565b905060006116048461271061390a565b63ffffffff166116148a89613978565b61161e919061392f565b905061162a8183613964565b61163590600161381b565b92505050610de7565b6000808061164c8a89613978565b905061165a8882888a611dd9565b9093509150600061166d8a61271061392f565b9050600061167b858361392f565b905060ff841682901b6116908861271061390a565b63ffffffff1660ff86166116a48385613978565b6116af92911c613964565b610dde90600161381b565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172891906138bc565b506001600160701b031691506001600160701b0316915060008061174c8d8d610577565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906138ed565b6001600160a01b03168b6001600160a01b0316141561184a578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906138ed565b99509297509095509350915084848484611938565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac91906138ed565b6001600160a01b03168b6001600160a01b03161415610ba3578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192791906138ed565b995091975091955093509150838583855b5050505093975093979195509350565b6060816119975760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b6119a282600161381b565b67ffffffffffffffff8111156119ba576119ba613833565b6040519080825280602002602001820160405280156119e3578160200160208202803683370190505b5090508381600183516119f69190613978565b81518110611a0657611a06613849565b602090810291909101015284825b8015611aa55760008080808080611a408b8b611a3160018b613978565b81811061120957611209613849565b955095509550955095509550611a61898881518110610f0b57610f0b613849565b89611a6d60018a613978565b81518110611a7d57611a7d613849565b6020026020010181815250508597505050505050508080611a9d9061398f565b915050611a14565b50866001600160a01b0316816001600160a01b0316146112fa5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6044820152640bea082a8960db1b60648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611b73575060408051601f3d908101601f19168201909252611b70918101906139a6565b60015b611bfc57611b7f6139d5565b806308c379a01415611bb95750611b94613a2c565b80611b9f5750611bbb565b8060405162461bcd60e51b81526004016103c79190613ab6565b505b3d808015611be5576040519150601f19603f3d011682016040523d82523d6000602084013e611bea565b606091505b50603280601e93509350935050611c69565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c609190613b0b565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd591906138ed565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b91906138ed565b9050836001600160a01b0316826001600160a01b03161480611d6e5750836001600160a01b0316816001600160a01b0316145b611dba5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146114de57816110ed565b60008084861015611e2c5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b600160811b8610611e3c57600080fd5b60008086611e4e6001607f1b8a61392f565b611e589190613964565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611e8357611e7c81611f23565b9150611e8f565b611e8c81612533565b91505b60008563ffffffff168763ffffffff1684611eaa919061392f565b611eb49190613964565b9050700800000000000000000000000000000000811015611ee657611ed881612628565b607f94509450505050611f1a565b6000611ef182612c78565b9050611f0d611f0182607f613b28565b60ff1683901c82612d2b565b95509350611f1a92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611f8857611f5a6f400000000000000000000000000000008561381b565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611f7b6001607f1b8861392f565b611f859190613964565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611fe757611fb96f200000000000000000000000000000008561381b565b93506fa45af1e1f40c333b3de1db4dd55f29a7611fda6001607f1b8861392f565b611fe49190613964565b95505b6f910b022db7ae67ce76b441c27035c6a1861061203a5761200c6001607c1b8561381b565b93506f910b022db7ae67ce76b441c27035c6a161202d6001607f1b8861392f565b6120379190613964565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106120995761206b6f080000000000000000000000000000008561381b565b93506f88415abbe9a76bead8d00cf112e4d4a861208c6001607f1b8861392f565b6120969190613964565b95505b6f84102b00893f64c705e841d5d4064bd386106120f8576120ca6f040000000000000000000000000000008561381b565b93506f84102b00893f64c705e841d5d4064bd36120eb6001607f1b8861392f565b6120f59190613964565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612157576121296f020000000000000000000000000000008561381b565b93506f8204055aaef1c8bd5c3259f4822735a261214a6001607f1b8861392f565b6121549190613964565b95505b6f810100ab00222d861931c15e39b44e9986106121b6576121886f010000000000000000000000000000008561381b565b93506f810100ab00222d861931c15e39b44e996121a96001607f1b8861392f565b6121b39190613964565b95505b6f808040155aabbbe9451521693554f7338610612214576121e66e8000000000000000000000000000008561381b565b93506f808040155aabbbe9451521693554f7336122076001607f1b8861392f565b6122119190613964565b95505b6122226001607f1b87613978565b92508291506001607f1b612236838061392f565b6122409190613964565b9050600160801b6122518482613978565b61225b908461392f565b6122659190613964565b61226f908561381b565b93506001607f1b612280828461392f565b61228a9190613964565b9150600160811b6122ab846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613978565b6122b5908461392f565b6122bf9190613964565b6122c9908561381b565b93506001607f1b6122da828461392f565b6122e49190613964565b9150700300000000000000000000000000000000612312846f99999999999999999999999999999999613978565b61231c908461392f565b6123269190613964565b612330908561381b565b93506001607f1b612341828461392f565b61234b9190613964565b9150700400000000000000000000000000000000612379846f92492492492492492492492492492492613978565b612383908461392f565b61238d9190613964565b612397908561381b565b93506001607f1b6123a8828461392f565b6123b29190613964565b91507005000000000000000000000000000000006123e0846f8e38e38e38e38e38e38e38e38e38e38e613978565b6123ea908461392f565b6123f49190613964565b6123fe908561381b565b93506001607f1b61240f828461392f565b6124199190613964565b9150700600000000000000000000000000000000612447846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613978565b612451908461392f565b61245b9190613964565b612465908561381b565b93506001607f1b612476828461392f565b6124809190613964565b91507007000000000000000000000000000000006124ae846f89d89d89d89d89d89d89d89d89d89d89613978565b6124b8908461392f565b6124c29190613964565b6124cc908561381b565b93506001607f1b6124dd828461392f565b6124e79190613964565b9150700800000000000000000000000000000000612515846f88888888888888888888888888888888613978565b61251f908461392f565b6125299190613964565b610de7908561381b565b600080600160801b83106125775760006125596125546001607f1b86613964565b613389565b60ff811694851c94909150612573906001607f1b9061392f565b9150505b6001607f1b8311156125ec57607f5b60ff8116156125ea576001607f1b61259e858061392f565b6125a89190613964565b9350600160801b84106125da57600193841c936125c59082613b28565b60ff166001901b826125d7919061381b565b91505b6125e381613b4b565b9050612586565b505b6f05b9de1d10bf4103d647b0955897ba806126176f03f80fe03f80fe03f80fe03f80fe03f88361392f565b6126219190613964565b9392505050565b600080808061263b6001607c1b86613b68565b91508190506001607f1b61264f828061392f565b6126599190613964565b905061266d816710e1b3be415a000061392f565b612677908461381b565b92506001607f1b612688838361392f565b6126929190613964565b90506126a6816705a0913f6b1e000061392f565b6126b0908461381b565b92506001607f1b6126c1838361392f565b6126cb9190613964565b90506126df81670168244fdac7800061392f565b6126e9908461381b565b92506001607f1b6126fa838361392f565b6127049190613964565b905061271781664807432bc1800061392f565b612721908461381b565b92506001607f1b612732838361392f565b61273c9190613964565b905061274f81660c0135dca0400061392f565b612759908461381b565b92506001607f1b61276a838361392f565b6127749190613964565b9050612787816601b707b1cdc00061392f565b612791908461381b565b92506001607f1b6127a2838361392f565b6127ac9190613964565b90506127be816536e0f639b80061392f565b6127c8908461381b565b92506001607f1b6127d9838361392f565b6127e39190613964565b90506127f581650618fee9f80061392f565b6127ff908461381b565b92506001607f1b612810838361392f565b61281a9190613964565b905061282b81649c197dcc0061392f565b612835908461381b565b92506001607f1b612846838361392f565b6128509190613964565b905061286181640e30dce40061392f565b61286b908461381b565b92506001607f1b61287c838361392f565b6128869190613964565b90506128978164012ebd130061392f565b6128a1908461381b565b92506001607f1b6128b2838361392f565b6128bc9190613964565b90506128cc816317499f0061392f565b6128d6908461381b565b92506001607f1b6128e7838361392f565b6128f19190613964565b9050612901816301a9d48061392f565b61290b908461381b565b92506001607f1b61291c838361392f565b6129269190613964565b905061293581621c638061392f565b61293f908461381b565b92506001607f1b612950838361392f565b61295a9190613964565b9050612969816201c63861392f565b612973908461381b565b92506001607f1b612984838361392f565b61298e9190613964565b905061299c81611ab861392f565b6129a6908461381b565b92506001607f1b6129b7838361392f565b6129c19190613964565b90506129cf8161017c61392f565b6129d9908461381b565b92506001607f1b6129ea838361392f565b6129f49190613964565b9050612a0181601461392f565b612a0b908461381b565b92506001607f1b612a1c838361392f565b612a269190613964565b9050612a3381600161392f565b612a3d908461381b565b92506001607f1b82612a576721c3677c82b4000086613964565b612a61919061381b565b612a6b919061381b565b92506001607c1b851615612ab35770018ebef9eac820ae8682b9793ac6d1e776612aa6847001c3d6a24ed82218787d624d3e5eba95f961392f565b612ab09190613964565b92505b6f20000000000000000000000000000000851615612b05577001368b2fc6f9609fe7aceb46aa619baed4612af88470018ebef9eac820ae8682b9793ac6d1e77861392f565b612b029190613964565b92505b6f40000000000000000000000000000000851615612b56576fbc5ab1b16779be3575bd8f0520a9f21f612b49847001368b2fc6f9609fe7aceb46aa619baed561392f565b612b539190613964565b92505b6001607f1b851615612b9a576f454aaa8efe072e7f6ddbab84b40a55c9612b8d846fbc5ab1b16779be3575bd8f0520a9f21e61392f565b612b979190613964565b92505b600160801b851615612bde576f0960aadc109e7a3bf4578099615711ea612bd1846f454aaa8efe072e7f6ddbab84b40a55c561392f565b612bdb9190613964565b92505b600160811b851615612c21576e2bf84208204f5977f9a8cf01fdce3d612c14846f0960aadc109e7a3bf4578099615711d761392f565b612c1e9190613964565b92505b700400000000000000000000000000000000851615612c6f576d03c6ab775dd0b95b4cbee7e65d11612c62846e2bf84208204f5977f9a8cf01fdc30761392f565b612c6c9190613964565b92505b50909392505050565b60006020607f5b60ff8116612c8e836001613b7c565b60ff161015612ce15760006002612ca58385613b7c565b612caf9190613ba1565b90508460008260ff1660808110612cc857612cc8613849565b015410612cd757809250612cdb565b8091505b50612c7f565b8360008260ff1660808110612cf857612cf8613849565b015410612d06579392505050565b8360008360ff1660808110612d1d57612d1d613849565b015410610136575092915050565b6000828160ff8416612d3d838061392f565b901c9150612d5b826f03442c4e6074a82f1797f72ac000000061392f565b612d65908261381b565b905060ff8416612d75868461392f565b901c9150612d93826f0116b96f757c380fb287fd0e4000000061392f565b612d9d908261381b565b905060ff8416612dad868461392f565b901c9150612dca826e45ae5bdd5f0e03eca1ff439000000061392f565b612dd4908261381b565b905060ff8416612de4868461392f565b901c9150612e01826e0defabf91302cd95b9ffda5000000061392f565b612e0b908261381b565b905060ff8416612e1b868461392f565b901c9150612e38826e02529ca9832b22439efff9b800000061392f565b612e42908261381b565b905060ff8416612e52868461392f565b901c9150612e6e826d54f1cf12bd04e516b6da8800000061392f565b612e78908261381b565b905060ff8416612e88868461392f565b901c9150612ea4826d0a9e39e257a09ca2d6db5100000061392f565b612eae908261381b565b905060ff8416612ebe868461392f565b901c9150612eda826d012e066e7b839fa050c30900000061392f565b612ee4908261381b565b905060ff8416612ef4868461392f565b901c9150612f0f826c1e33d7d926c329a1ad1a80000061392f565b612f19908261381b565b905060ff8416612f29868461392f565b901c9150612f44826c02bee513bdb4a6b19b5f80000061392f565b612f4e908261381b565b905060ff8416612f5e868461392f565b901c9150612f78826b3a9316fa79b88eccf2a0000061392f565b612f82908261381b565b905060ff8416612f92868461392f565b901c9150612fac826b048177ebe1fa81237520000061392f565b612fb6908261381b565b905060ff8416612fc6868461392f565b901c9150612fdf826a5263fe90242dcbacf0000061392f565b612fe9908261381b565b905060ff8416612ff9868461392f565b901c9150613012826a057e22099c030d9410000061392f565b61301c908261381b565b905060ff841661302c868461392f565b901c9150613044826957e22099c030d941000061392f565b61304e908261381b565b905060ff841661305e868461392f565b901c91506130768269052b6b5456997631000061392f565b613080908261381b565b905060ff8416613090868461392f565b901c91506130a782684985f67696bf74800061392f565b6130b1908261381b565b905060ff84166130c1868461392f565b901c91506130d8826803dea12ea99e49800061392f565b6130e2908261381b565b905060ff84166130f2868461392f565b901c9150613108826731880f2214b6e00061392f565b613112908261381b565b905060ff8416613122868461392f565b901c91506131388267025bcff56eb3600061392f565b613142908261381b565b905060ff8416613152868461392f565b901c915061316782661b722e10ab100061392f565b613171908261381b565b905060ff8416613181868461392f565b901c9150613196826601317c7007700061392f565b6131a0908261381b565b905060ff84166131b0868461392f565b901c91506131c482650cba84aafa0061392f565b6131ce908261381b565b905060ff84166131de868461392f565b901c91506131f1826482573a0a0061392f565b6131fb908261381b565b905060ff841661320b868461392f565b901c915061321e826405035ad90061392f565b613228908261381b565b905060ff8416613238868461392f565b901c915061324a82632f881b0061392f565b613254908261381b565b905060ff8416613264868461392f565b901c9150613276826301b2934061392f565b613280908261381b565b905060ff8416613290868461392f565b901c91506132a182620efc4061392f565b6132ab908261381b565b905060ff84166132bb868461392f565b901c91506132cb82617fe061392f565b6132d5908261381b565b905060ff84166132e5868461392f565b901c91506132f58261042061392f565b6132ff908261381b565b905060ff841661330f868461392f565b901c915061331e82602161392f565b613328908261381b565b905060ff8416613338868461392f565b901c915061334782600161392f565b613351908261381b565b9050600160ff85161b856133756f0688589cc0e9505e2f2fee558000000084613964565b61337f919061381b565b6110ed919061381b565b6000806101008310156133bc575b60018311156133b757600192831c926133b09082613b7c565b9050613397565b6133f0565b60805b60ff8116156133ee57600160ff82161b84106133e35760ff81169390931c92908117905b60011c607f166133bf565b505b92915050565b6001600160a01b038116811461340b57600080fd5b50565b60008083601f84011261342057600080fd5b50813567ffffffffffffffff81111561343857600080fd5b6020830191508360208260051b850101111561091b57600080fd5b60008060008060008060a0878903121561346c57600080fd5b8635613477816133f6565b95506020870135613487816133f6565b94506040870135613497816133f6565b935060608701359250608087013567ffffffffffffffff8111156134ba57600080fd5b6134c689828a0161340e565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b81811015613510578351835292840192918401916001016134f4565b50909695505050505050565b6000806040838503121561352f57600080fd5b823561353a816133f6565b9150602083013561354a816133f6565b809150509250929050565b60008060006060848603121561356a57600080fd5b8335613575816133f6565b92506020840135613585816133f6565b91506040840135613595816133f6565b809150509250925092565b6000806000606084860312156135b557600080fd5b83356135c0816133f6565b925060208401356135d0816133f6565b929592945050506040919091013590565b63ffffffff8116811461340b57600080fd5b60008060008060008060c0878903121561360c57600080fd5b863595506020870135945060408701359350606087013561362c816135e1565b9250608087013561363c816135e1565b915060a087013561364c816135e1565b809150509295509295509295565b600080600080600060a0868803121561367257600080fd5b853594506020860135935060408601359250606086013591506080860135613699816135e1565b809150509295509295909350565b6000806000806000608086880312156136bf57600080fd5b85356136ca816133f6565b945060208601356136da816133f6565b935060408601359250606086013567ffffffffffffffff8111156136fd57600080fd5b6137098882890161340e565b969995985093965092949392505050565b6001600160701b038116811461340b57600080fd5b600080600080600080600060e0888a03121561374a57600080fd5b87359650602088013561375c8161371a565b9550604088013561376c8161371a565b9450606088013561377c816135e1565b9350608088013561378c816135e1565b925060a088013561379c8161371a565b915060c08801356137ac8161371a565b8091505092959891949750929550565b6000806000606084860312156137d157600080fd5b505081359360208301359350604090920135919050565b6000602082840312156137fa57600080fd5b8135612621816133f6565b634e487b7160e01b600052601160045260246000fd5b6000821982111561382e5761382e613805565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561387357613873613805565b5060010190565b60008060006060848603121561388f57600080fd5b835161389a816135e1565b60208501519093506138ab816135e1565b6040850151909250613595816135e1565b6000806000606084860312156138d157600080fd5b83516138dc8161371a565b60208501519093506138ab8161371a565b6000602082840312156138ff57600080fd5b8151612621816133f6565b600063ffffffff8381169083168181101561392757613927613805565b039392505050565b600081600019048311821515161561394957613949613805565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826139735761397361394e565b500490565b60008282101561398a5761398a613805565b500390565b60008161399e5761399e613805565b506000190190565b600080604083850312156139b957600080fd5b82516139c4816135e1565b602084015190925061354a816135e1565b600060033d11156139ee5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff81118282101715613a2557634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d1015613a3a5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613a6a57505050505090565b8285019150815181811115613a825750505050505090565b843d8701016020828501011115613a9c5750505050505090565b613aab602082860101876139f1565b509095945050505050565b600060208083528351808285015260005b81811015613ae357858101830151858201604001528201613ac7565b81811115613af5576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215613b1d57600080fd5b8151612621816135e1565b600060ff821660ff841680821015613b4257613b42613805565b90039392505050565b600060ff821680613b5e57613b5e613805565b6000190192915050565b600082613b7757613b7761394e565b500690565b600060ff821660ff84168060ff03821115613b9957613b99613805565b019392505050565b600060ff831680613bb457613bb461394e565b8060ff8416049150509291505056fea2646970667358221220d7414bbb8e76f9ac07af778053895f0c9e76b71ab5879c7eaaf6298bb3046f5964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 668,
        "contract": "contracts/test/RequiemFormula_flat.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
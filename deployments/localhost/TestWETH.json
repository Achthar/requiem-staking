{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destinatary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcb63c82d2fa3227bb6449a0b39359ffffda62d6763906a0eb75ba1fbadc94fcf",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1138832",
    "logsBloom": "0x
    "blockHash": "0xdfdce04a1fb0e666eb9e598ce9a9cd99d28bbb5ee3e68feeba4135238e4b9584",
    "transactionHash": "0xcb63c82d2fa3227bb6449a0b39359ffffda62d6763906a0eb75ba1fbadc94fcf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xcb63c82d2fa3227bb6449a0b39359ffffda62d6763906a0eb75ba1fbadc94fcf",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdfdce04a1fb0e666eb9e598ce9a9cd99d28bbb5ee3e68feeba4135238e4b9584"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xcb63c82d2fa3227bb6449a0b39359ffffda62d6763906a0eb75ba1fbadc94fcf",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdfdce04a1fb0e666eb9e598ce9a9cd99d28bbb5ee3e68feeba4135238e4b9584"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "1138832",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "93d81b87317fbe53e01af2483d3a7256",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinatary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had already been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"balanceOf\":{\"details\":\"Returns the amount of tokens owned by `account`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestWETH_flat.sol\":\"TestWETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/TestWETH_flat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: libraries/helpers/RequiemErrors.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n  /**\\n   * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n   * supported.\\n   */\\n  function _require(bool condition, uint256 errorCode) internal pure {\\n    if (!condition) RequiemErrors._revert(errorCode);\\n  }\\n\\n  /**\\n   * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n   */\\n  function _revert(uint256 errorCode) internal pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'REQ#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n      // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n      // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n      // the '0' character.\\n\\n      let units := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let tenths := add(mod(errorCode, 10), 0x30)\\n\\n      errorCode := div(errorCode, 10)\\n      let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n      // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n      // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n      // characters to it, each shifted by a multiple of 8.\\n      // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n      // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n      // array).\\n\\n      let revertReason := shl(\\n        200,\\n        add(\\n          0x52455123000000,\\n          add(add(units, shl(8, tenths)), shl(16, hundreds))\\n        )\\n      )\\n\\n      // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n      // message will have the following layout:\\n      // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n      // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n      // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n      mstore(\\n        0x0,\\n        0x08c379a000000000000000000000000000000000000000000000000000000000\\n      )\\n      // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n      mstore(\\n        0x04,\\n        0x0000000000000000000000000000000000000000000000000000000000000020\\n      )\\n      // The string length is fixed: 7 characters.\\n      mstore(0x24, 7)\\n      // Finally, the string itself is stored.\\n      mstore(0x44, revertReason)\\n\\n      // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n      // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n      revert(0, 100)\\n    }\\n  }\\n}\\n\\nlibrary Errors {\\n  // Math\\n  uint256 internal constant ADD_OVERFLOW = 0;\\n  uint256 internal constant SUB_OVERFLOW = 1;\\n  uint256 internal constant SUB_UNDERFLOW = 2;\\n  uint256 internal constant MUL_OVERFLOW = 3;\\n  uint256 internal constant ZERO_DIVISION = 4;\\n  uint256 internal constant DIV_INTERNAL = 5;\\n  uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n  uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n  uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n  uint256 internal constant INVALID_EXPONENT = 9;\\n\\n  // Input\\n  uint256 internal constant OUT_OF_BOUNDS = 100;\\n  uint256 internal constant UNSORTED_ARRAY = 101;\\n  uint256 internal constant UNSORTED_TOKENS = 102;\\n  uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n  uint256 internal constant ZERO_TOKEN = 104;\\n\\n  // Shared pools\\n  uint256 internal constant MIN_TOKENS = 200;\\n  uint256 internal constant MAX_TOKENS = 201;\\n  uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n  uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n  uint256 internal constant MINIMUM_BPT = 204;\\n  uint256 internal constant CALLER_NOT_VAULT = 205;\\n  uint256 internal constant UNINITIALIZED = 206;\\n  uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n  uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n  uint256 internal constant EXPIRED_PERMIT = 209;\\n  uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n  // Pools\\n  uint256 internal constant MIN_AMP = 300;\\n  uint256 internal constant MAX_AMP = 301;\\n  uint256 internal constant MIN_WEIGHT = 302;\\n  uint256 internal constant MAX_STABLE_TOKENS = 303;\\n  uint256 internal constant MAX_IN_RATIO = 304;\\n  uint256 internal constant MAX_OUT_RATIO = 305;\\n  uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n  uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n  uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n  uint256 internal constant INVALID_TOKEN = 309;\\n  uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n  uint256 internal constant ZERO_INVARIANT = 311;\\n  uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n  uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n  uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n  uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n  uint256 internal constant ORACLE_BAD_SECS = 316;\\n  uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n  uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n  uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n  uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n  uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n  uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n  uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n  uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n  uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n  uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n  uint256 internal constant SWAPS_DISABLED = 327;\\n  uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n  uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n  uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n  uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n  uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n  uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n  uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n  uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n  uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n  uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n  uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n  uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n  uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n  uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n  uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n  // Lib\\n  uint256 internal constant REENTRANCY = 400;\\n  uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n  uint256 internal constant PAUSED = 402;\\n  uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n  uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n  uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n  uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n  uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n  uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n  uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n  uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n  uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n  uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n  uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n  uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n  uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n  uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n  uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n  uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n  uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n  uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n  uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n  uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n  uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n  uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n  uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n  uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n  uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n  uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n  uint256 internal constant NOT_PAUSED = 431;\\n\\n  // Vault\\n  uint256 internal constant INVALID_POOL_ID = 500;\\n  uint256 internal constant CALLER_NOT_POOL = 501;\\n  uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n  uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n  uint256 internal constant INVALID_SIGNATURE = 504;\\n  uint256 internal constant EXIT_BELOW_MIN = 505;\\n  uint256 internal constant JOIN_ABOVE_MAX = 506;\\n  uint256 internal constant SWAP_LIMIT = 507;\\n  uint256 internal constant SWAP_DEADLINE = 508;\\n  uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n  uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n  uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n  uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n  uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n  uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n  uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n  uint256 internal constant INSUFFICIENT_ETH = 516;\\n  uint256 internal constant UNALLOCATED_ETH = 517;\\n  uint256 internal constant ETH_TRANSFER = 518;\\n  uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n  uint256 internal constant TOKENS_MISMATCH = 520;\\n  uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n  uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n  uint256 internal constant TOKENS_ALREADY_SET = 523;\\n  uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n  uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n  uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n  uint256 internal constant POOL_NO_TOKENS = 527;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n  // Fees\\n  uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n  uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\\n// File: libraries/EnumerableSet.sol\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode\\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n  // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n  struct AddressSet {\\n    // Storage of set values\\n    address[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(address => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    if (!contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // The swap is only necessary if we're not removing the last element\\n      if (toDeleteIndex != lastIndex) {\\n        address lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n    return unchecked_at(set, index);\\n  }\\n\\n  /**\\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n   * than {length}). O(1).\\n   *\\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n   * within bounds.\\n   */\\n  function unchecked_at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return set._values[index];\\n  }\\n\\n  function rawIndexOf(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return set._indexes[value] - 1;\\n  }\\n\\n  struct Bytes32Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    if (!contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // The swap is only necessary if we're not removing the last element\\n      if (toDeleteIndex != lastIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n    return unchecked_at(set, index);\\n  }\\n\\n  /**\\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n   * than {length}). O(1).\\n   *\\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n   * within bounds.\\n   */\\n  function unchecked_at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return set._values[index];\\n  }\\n\\n  function rawIndexOf(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return set._indexes[value] - 1;\\n  }\\n}\\n\\n// File: libraries/AccessControl.sol\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct RoleData {\\n    EnumerableSet.AddressSet members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    return _roles[role].members.contains(account);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n    return _roles[role].members.length();\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return _roles[role].members.at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) public virtual {\\n    RequiemErrors._require(\\n      hasRole(_roles[role].adminRole, msg.sender),\\n      Errors.GRANT_SENDER_NOT_ADMIN\\n    );\\n\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had already been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) public virtual {\\n    RequiemErrors._require(\\n      hasRole(_roles[role].adminRole, msg.sender),\\n      Errors.REVOKE_SENDER_NOT_ADMIN\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual {\\n    RequiemErrors._require(\\n      account == msg.sender,\\n      Errors.RENOUNCE_SENDER_NOT_ALLOWED\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n    _roles[role].adminRole = adminRole;\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (_roles[role].members.add(account)) {\\n      emit RoleGranted(role, account, msg.sender);\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (_roles[role].members.remove(account)) {\\n      emit RoleRevoked(role, account, msg.sender);\\n    }\\n  }\\n}\\n\\n// File: interfaces/ERC20/IERC20.sol\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n// File: interfaces/IWETH.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\\n// File: test/TestWETH.sol\\n\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ncontract TestWETH is AccessControl, IWETH {\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n  string public name = \\\"Wrapped Ether\\\";\\n  string public symbol = \\\"WETH\\\";\\n  uint8 public decimals = 18;\\n\\n  event Deposit(address indexed dst, uint256 wad);\\n  event Withdrawal(address indexed src, uint256 wad);\\n\\n  mapping(address => uint256) public override balanceOf;\\n  mapping(address => mapping(address => uint256)) public override allowance;\\n\\n  constructor(address minter) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, minter);\\n    _setupRole(MINTER_ROLE, minter);\\n  }\\n\\n  receive() external payable {\\n    deposit();\\n  }\\n\\n  function deposit() public payable override {\\n    balanceOf[msg.sender] += msg.value;\\n    emit Deposit(msg.sender, msg.value);\\n  }\\n\\n  function withdraw(uint256 wad) public override {\\n    require(balanceOf[msg.sender] >= wad, \\\"INSUFFICIENT_BALANCE\\\");\\n    balanceOf[msg.sender] -= wad;\\n    payable(msg.sender).transfer(wad);\\n    emit Withdrawal(msg.sender, wad);\\n  }\\n\\n  // For testing purposes - this creates WETH that cannot be redeemed for ETH via 'withdraw'\\n  function mint(address destinatary, uint256 amount) external {\\n    require(hasRole(MINTER_ROLE, msg.sender), \\\"NOT_MINTER\\\");\\n    balanceOf[destinatary] += amount;\\n    emit Deposit(destinatary, amount);\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function approve(address guy, uint256 wad) public override returns (bool) {\\n    allowance[msg.sender][guy] = wad;\\n    emit Approval(msg.sender, guy, wad);\\n    return true;\\n  }\\n\\n  function transfer(address dst, uint256 wad) public override returns (bool) {\\n    return transferFrom(msg.sender, dst, wad);\\n  }\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) public override returns (bool) {\\n    require(balanceOf[src] >= wad, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n    if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\\n      require(allowance[src][msg.sender] >= wad, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n      allowance[src][msg.sender] -= wad;\\n    }\\n\\n    balanceOf[src] -= wad;\\n    balanceOf[dst] += wad;\\n\\n    emit Transfer(src, dst, wad);\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x15b52b431957ac40482f84c7714b3d94bc6424de69b9268976aafda205d1854c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600d60808190526c2bb930b83832b21022ba3432b960991b60a0908152620000309160019190620001c9565b50604080518082019091526004808252630ae8aa8960e31b60209092019182526200005e91600291620001c9565b506003805460ff191660121790553480156200007957600080fd5b50604051620012a8380380620012a88339810160408190526200009c916200026f565b620000a9600082620000dc565b620000d57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682620000dc565b50620002de565b620000e88282620000ec565b5050565b6000828152602081815260409091206200011191839062000a3762000153821b17901c565b15620000e85760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6001600160a01b0381166000908152600183016020526040812054620001bf57508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03861690811790915585549082528286019093526040902091909155620001c3565b5060005b92915050565b828054620001d790620002a1565b90600052602060002090601f016020900481019282620001fb576000855562000246565b82601f106200021657805160ff191683800117855562000246565b8280016001018555821562000246579182015b828111156200024657825182559160200191906001019062000229565b506200025492915062000258565b5090565b5b8082111562000254576000815560010162000259565b6000602082840312156200028257600080fd5b81516001600160a01b03811681146200029a57600080fd5b9392505050565b600181811c90821680620002b657607f821691505b60208210811415620002d857634e487b7160e01b600052602260045260246000fd5b50919050565b610fba80620002ee6000396000f3fe60806040526004361061012e5760003560e01c806370a08231116100ab578063a9059cbb1161006f578063a9059cbb14610365578063ca15c87314610385578063d0e30db0146103a5578063d5391393146103ad578063d547741f146103e1578063dd62ed3e1461040157600080fd5b806370a08231146102b65780639010d07c146102e357806391d148541461031b57806395d89b411461033b578063a217fddf1461035057600080fd5b80632e1a7d4d116100f25780632e1a7d4d1461020a5780632f2ff15d1461022a578063313ce5671461024a57806336568abe1461027657806340c10f191461029657600080fd5b806306fdde0314610142578063095ea7b31461016d57806318160ddd1461019d57806323b872dd146101ba578063248a9ca3146101da57600080fd5b3661013d5761013b610439565b005b600080fd5b34801561014e57600080fd5b50610157610494565b6040516101649190610d55565b60405180910390f35b34801561017957600080fd5b5061018d610188366004610dc6565b610522565b6040519015158152602001610164565b3480156101a957600080fd5b50475b604051908152602001610164565b3480156101c657600080fd5b5061018d6101d5366004610df0565b61058f565b3480156101e657600080fd5b506101ac6101f5366004610e2c565b60009081526020819052604090206002015490565b34801561021657600080fd5b5061013b610225366004610e2c565b61078e565b34801561023657600080fd5b5061013b610245366004610e45565b61086e565b34801561025657600080fd5b506003546102649060ff1681565b60405160ff9091168152602001610164565b34801561028257600080fd5b5061013b610291366004610e45565b6108a4565b3480156102a257600080fd5b5061013b6102b1366004610dc6565b6108c5565b3480156102c257600080fd5b506101ac6102d1366004610e71565b60046020526000908152604090205481565b3480156102ef57600080fd5b506103036102fe366004610e8c565b610997565b6040516001600160a01b039091168152602001610164565b34801561032757600080fd5b5061018d610336366004610e45565b6109b6565b34801561034757600080fd5b506101576109e1565b34801561035c57600080fd5b506101ac600081565b34801561037157600080fd5b5061018d610380366004610dc6565b6109ee565b34801561039157600080fd5b506101ac6103a0366004610e2c565b6109fb565b61013b610439565b3480156103b957600080fd5b506101ac7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156103ed57600080fd5b5061013b6103fc366004610e45565b610a0f565b34801561040d57600080fd5b506101ac61041c366004610eae565b600560209081526000928352604080842090915290825290205481565b3360009081526004602052604081208054349290610458908490610eee565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b600180546104a190610f06565b80601f01602080910402602001604051908101604052809291908181526020018280546104cd90610f06565b801561051a5780601f106104ef5761010080835404028352916020019161051a565b820191906000526020600020905b8154815290600101906020018083116104fd57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061057d9086815260200190565b60405180910390a35060015b92915050565b6001600160a01b0383166000908152600460205260408120548211156105f35760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b60448201526064015b60405180910390fd5b6001600160a01b038416331480159061063157506001600160a01b038416600090815260056020908152604080832033845290915290205460001914155b156106db576001600160a01b03841660009081526005602090815260408083203384529091529020548211156106a25760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b60448201526064016105ea565b6001600160a01b0384166000908152600560209081526040808320338452909152812080548492906106d5908490610f41565b90915550505b6001600160a01b03841660009081526004602052604081208054849290610703908490610f41565b90915550506001600160a01b03831660009081526004602052604081208054849290610730908490610eee565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161077c91815260200190565b60405180910390a35060019392505050565b336000908152600460205260409020548111156107e45760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b60448201526064016105ea565b3360009081526004602052604081208054839290610803908490610f41565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610835573d6000803e3d6000fd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b6000828152602081905260409020600201546108969061088e90336109b6565b6101a6610aa9565b6108a08282610ab7565b5050565b6108bb6001600160a01b03821633146101a8610aa9565b6108a08282610b10565b6108ef7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336109b6565b6109285760405162461bcd60e51b815260206004820152600a6024820152692727aa2fa6a4a72a22a960b11b60448201526064016105ea565b6001600160a01b03821660009081526004602052604081208054839290610950908490610eee565b90915550506040518181526001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a25050565b60008281526020819052604081206109af9083610b69565b9392505050565b6000828152602081815260408083206001600160a01b038516845260010190915281205415156109af565b600280546104a190610f06565b60006109af33848461058f565b600081815260208190526040812054610589565b6000828152602081905260409020600201546108bb90610a2f90336109b6565b6101a7610aa9565b6001600160a01b0381166000908152600183016020526040812054610aa157508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03861690811790915585549082528286019093526040902091909155610589565b506000610589565b816108a0576108a081610b85565b6000828152602081905260409020610acf9082610a37565b156108a05760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610b289082610bd8565b156108a05760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b8154600090610b7b9083106064610aa9565b6109af8383610d22565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b03811660009081526001830160205260408120548015610d18576000610c06600183610f41565b8554909150600090610c1a90600190610f41565b9050808214610cba576000866000018281548110610c3a57610c3a610f58565b60009182526020909120015487546001600160a01b0390911691508190889085908110610c6957610c69610f58565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055610c9d836001610eee565b6001600160a01b0390911660009081526001880160205260409020555b8554869080610ccb57610ccb610f6e565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935061058992505050565b6000915050610589565b6000826000018281548110610d3957610d39610f58565b6000918252602090912001546001600160a01b03169392505050565b600060208083528351808285015260005b81811015610d8257858101830151858201604001528201610d66565b81811115610d94576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610dc157600080fd5b919050565b60008060408385031215610dd957600080fd5b610de283610daa565b946020939093013593505050565b600080600060608486031215610e0557600080fd5b610e0e84610daa565b9250610e1c60208501610daa565b9150604084013590509250925092565b600060208284031215610e3e57600080fd5b5035919050565b60008060408385031215610e5857600080fd5b82359150610e6860208401610daa565b90509250929050565b600060208284031215610e8357600080fd5b6109af82610daa565b60008060408385031215610e9f57600080fd5b50508035926020909101359150565b60008060408385031215610ec157600080fd5b610eca83610daa565b9150610e6860208401610daa565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f0157610f01610ed8565b500190565b600181811c90821680610f1a57607f821691505b60208210811415610f3b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015610f5357610f53610ed8565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cdebb285d6e3ceae442677da7165529238b07d73b84b2413d0ae7da11938f36b64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had already been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "balanceOf": {
        "details": "Returns the amount of tokens owned by `account`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 914,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)909_storage)"
      },
      {
        "astId": 1286,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1289,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1292,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 1309,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1316,
        "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)909_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)909_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)438_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 433,
            "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 437,
            "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)909_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 906,
            "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)438_storage"
          },
          {
            "astId": 908,
            "contract": "contracts/test/TestWETH_flat.sol:TestWETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
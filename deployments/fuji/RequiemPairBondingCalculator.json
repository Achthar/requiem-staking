{
  "address": "0x7b4E3397CCcc97Bbd93dAF582575858f7Db092e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_QUOTE",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "markdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb93382cb3a09062a69c3296fa681de3fa38a78d06daa58fe4ad4104bdc4fa8e7",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x7b4E3397CCcc97Bbd93dAF582575858f7Db092e6",
    "transactionIndex": 2,
    "gasUsed": "497816",
    "logsBloom": "0x
    "blockHash": "0x2e38923a584e8be84fbb58e06a5b929a6474aee535b3e515eba8d5fef0c27e41",
    "transactionHash": "0xb93382cb3a09062a69c3296fa681de3fa38a78d06daa58fe4ad4104bdc4fa8e7",
    "logs": [],
    "blockNumber": 5363019,
    "cumulativeGasUsed": "5985078",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA"
  ],
  "solcInputHash": "731f1d7318f60180ef379d992f066ce4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_QUOTE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"markdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTotalValue(address)\":{\"params\":{\"_pair\":\"general pair that has the RequiemSwap interface implemented  - the value is calculated as the geometric average of input and output  - is consistent with the uniswapV2-type case\"}},\"valuation(address,uint256)\":{\"params\":{\"_pair\":\"general pair that has the RequiemSwap interface implemented\",\"amount_\":\"the amount of LP to price for the backing  - is consistent with the uniswapV2-type case\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTotalValue(address)\":{\"notice\":\"note for general pairs the price does not necessarily satisfy the conditon that the lp value consists 50% of the one and the other token since the mid price is the quotient of the reserves. That is not necessarily the case for general pairs, therefore, we have to calculate the price separately and apply it to the reserve amount for conversion - calculates the total liquidity value denominated in the provided token - uses the 1bps ouytput reserves for that calculation to avoid slippage to   have a too large impact - the sencond token input argument is ignored when using pools with only 2 tokens\"},\"valuation(address,uint256)\":{\"notice\":\"- calculates the value in QUOTE  that backs reqt 1:1 of the input LP amount provided\"}},\"notice\":\"Bonding calculator for weighted pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemPairBondingCalculator.sol\":\"RequiemPairBondingCalculator\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemPairBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./libraries/math/SqrtMath.sol\\\";\\nimport \\\"./libraries/math/FullMath.sol\\\";\\n\\n/**\\n * Bonding calculator for weighted pairs\\n */\\ncontract RequiemPairBondingCalculator is IBondingCalculator {\\n  using FixedPoint for *;\\n\\n  // address that is used for the quote of the provided pool\\n  address public immutable QUOTE;\\n\\n  constructor(address _QUOTE) {\\n    require(_QUOTE != address(0));\\n    QUOTE = _QUOTE;\\n  }\\n\\n  /**\\n   * note for general pairs the price does not necessarily satisfy the conditon\\n   * that the lp value consists 50% of the one and the other token since the mid\\n   * price is the quotient of the reserves. That is not necessarily the case for\\n   * general pairs, therefore, we have to calculate the price separately and apply it\\n   * to the reserve amount for conversion\\n   * - calculates the total liquidity value denominated in the provided token\\n   * - uses the 1bps ouytput reserves for that calculation to avoid slippage to\\n   *   have a too large impact\\n   * - the sencond token input argument is ignored when using pools with only 2 tokens\\n   * @param _pair general pair that has the RequiemSwap interface implemented\\n   *  - the value is calculated as the geometric average of input and output\\n   *  - is consistent with the uniswapV2-type case\\n   */\\n  function getTotalValue(address _pair) public view returns (uint256 _value) {\\n    (uint256 reserve0, uint256 reserve1, ) = IRequiemWeightedPair(_pair)\\n      .getReserves();\\n    (uint32 weight0, uint32 weight1) = IRequiemWeightedPair(_pair)\\n      .getTokenWeights();\\n\\n    (, uint256 reserveQuote, uint32 weightOther, uint32 weightQuote) = QUOTE ==\\n      IRequiemWeightedPair(_pair).token0()\\n      ? (reserve1, reserve0, weight1, weight0)\\n      : (reserve0, reserve1, weight0, weight1);\\n\\n    // In case of both weights being 50, it is equivalent to\\n    // the UniswapV2 variant. If the weights are different, we define the valuation by\\n    // scaling the reserve up or down dependent on the weights and the use the product as\\n    // adjusted constant product. We will use the conservative estimation of the price - we upscale\\n    // such that the reflected equivalent pool is a uniswapV2 with the higher liquidity that pruduces\\n    // the same price of the Requiem token as the weighted pool.\\n    _value =\\n      reserveQuote +\\n      FullMath.mulDivRoundingUp(reserveQuote, weightOther, weightQuote);\\n\\n    _value *= 10**(18 - IERC20(QUOTE).decimals());\\n  }\\n\\n  /**\\n   * - calculates the value in QUOTE  that backs reqt 1:1 of the input LP amount provided\\n   * @param _pair general pair that has the RequiemSwap interface implemented\\n   * @param amount_ the amount of LP to price for the backing\\n   *  - is consistent with the uniswapV2-type case\\n   */\\n  function valuation(address _pair, uint256 amount_)\\n    external\\n    view\\n    override\\n    returns (uint256 _value)\\n  {\\n    uint256 totalValue = getTotalValue(_pair);\\n    uint256 totalSupply = IRequiemWeightedPair(_pair).totalSupply();\\n\\n    _value = FullMath.mulDivRoundingUp(totalValue, amount_, totalSupply);\\n  }\\n\\n  // markdown function for bond valuation\\n  function markdown(address _pair) external view returns (uint256) {\\n    return getTotalValue(_pair);\\n  }\\n}\\n\",\"keccak256\":\"0x1649c187e4100748c4696e5f817d4a4c89d928b1b1b09a73c1bb5d02f6b0d7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc8de46b5781a713fd63eb204be9a9a821aab6468f5ca504ec90c1aec6b8a3bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBondingCalculator {\\n  function valuation(address pair_, uint256 amount_)\\n    external\\n    view\\n    returns (uint256 _value);\\n}\\n\",\"keccak256\":\"0x7dfca3a4d16834d9182b3521f3b7ce4513e66099ca8499110283a01117171a83\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xb7fca202d8bf1374b0cc8cb0c510addf9450df8f9df33d940808038a663baef0\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRequiemSwap {\\n  function calculateSwapGivenIn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapGivenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa944abac87a457a7884993de5ec7645708b548bf635540b6f2b85b0460419613\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function getCollectedFees()\\n    external\\n    view\\n    returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n  function getTokenWeights()\\n    external\\n    view\\n    returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n  function getSwapFee() external view returns (uint32);\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(\\n    address,\\n    address,\\n    uint32,\\n    uint32\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe806909eb7975fb3a9368a920ee19c164c013f0ffb00e06c6371592295721815\",\"license\":\"MIT\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= type(uint144).max) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1458dee48a18e010fc603e371c30ead771eaff8b1ead78af037c5a6a6a285e72\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable no-inline-assembly, reason-string, max-line-length\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2603e02c3be8e366637ac7b8e1d84b8b896b191ce5e25cc0fa6e6d395e832ff1\",\"license\":\"MIT\"},\"contracts/libraries/math/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nlibrary SqrtMath {\\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n    if (a > 3) {\\n      c = a;\\n      uint256 b = a / 2 + 1;\\n      while (b < c) {\\n        c = b;\\n        b = ((a / b) + b) / 2;\\n      }\\n    } else if (a != 0) {\\n      c = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe1fc577a8b5bb605a7acadceca306bcda1d8ea871cf976a61cd82c4fac4904ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516108b03803806108b083398101604081905261002f91610053565b6001600160a01b03811661004257600080fd5b6001600160a01b0316608052610083565b60006020828403121561006557600080fd5b81516001600160a01b038116811461007c57600080fd5b9392505050565b6080516108056100ab6000396000818160a2015281816102cd015261033401526108056000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332da80a3146100515780634249719f14610077578063686375491461008a5780639c5798391461009d575b600080fd5b61006461005f3660046104f3565b6100dc565b6040519081526020015b60405180910390f35b610064610085366004610510565b6100ed565b6100646100983660046104f3565b610175565b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b60006100e782610175565b92915050565b6000806100f984610175565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061053c565b905061016c8285836103e1565b95945050505050565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156101b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dc9190610585565b506001600160701b031691506001600160701b03169150600080856001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025791906105c8565b915091506000806000886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906105fb565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146103035786868686610308565b858785875b93509350935050610326838363ffffffff168363ffffffff166103e1565b610330908461062e565b97507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190610646565b6103bf906012610669565b6103ca90600a610770565b6103d4908961077f565b9998505050505050505050565b60006103ee84848461042c565b9050600082806104005761040061079e565b848609111561042557600019811061041757600080fd5b80610421816107b4565b9150505b9392505050565b600080806000198587098587029250828110838203039150508060001415610466576000841161045b57600080fd5b508290049050610425565b80841161047257600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b03811681146104f057600080fd5b50565b60006020828403121561050557600080fd5b8135610425816104db565b6000806040838503121561052357600080fd5b823561052e816104db565b946020939093013593505050565b60006020828403121561054e57600080fd5b5051919050565b80516001600160701b038116811461056c57600080fd5b919050565b805163ffffffff8116811461056c57600080fd5b60008060006060848603121561059a57600080fd5b6105a384610555565b92506105b160208501610555565b91506105bf60408501610571565b90509250925092565b600080604083850312156105db57600080fd5b6105e483610571565b91506105f260208401610571565b90509250929050565b60006020828403121561060d57600080fd5b8151610425816104db565b634e487b7160e01b600052601160045260246000fd5b6000821982111561064157610641610618565b500190565b60006020828403121561065857600080fd5b815160ff8116811461042557600080fd5b600060ff821660ff84168082101561068357610683610618565b90039392505050565b600181815b808511156106c75781600019048211156106ad576106ad610618565b808516156106ba57918102915b93841c9390800290610691565b509250929050565b6000826106de575060016100e7565b816106eb575060006100e7565b8160018114610701576002811461070b57610727565b60019150506100e7565b60ff84111561071c5761071c610618565b50506001821b6100e7565b5060208310610133831016604e8410600b841016171561074a575081810a6100e7565b610754838361068c565b806000190482111561076857610768610618565b029392505050565b600061042560ff8416836106cf565b600081600019048311821515161561079957610799610618565b500290565b634e487b7160e01b600052601260045260246000fd5b60006000198214156107c8576107c8610618565b506001019056fea264697066735822122092a53a74fe9e2a90f70d659779c0380878b76e4f17f542a07807105672d83c5864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806332da80a3146100515780634249719f14610077578063686375491461008a5780639c5798391461009d575b600080fd5b61006461005f3660046104f3565b6100dc565b6040519081526020015b60405180910390f35b610064610085366004610510565b6100ed565b6100646100983660046104f3565b610175565b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b60006100e782610175565b92915050565b6000806100f984610175565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061053c565b905061016c8285836103e1565b95945050505050565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156101b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dc9190610585565b506001600160701b031691506001600160701b03169150600080856001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025791906105c8565b915091506000806000886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906105fb565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146103035786868686610308565b858785875b93509350935050610326838363ffffffff168363ffffffff166103e1565b610330908461062e565b97507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190610646565b6103bf906012610669565b6103ca90600a610770565b6103d4908961077f565b9998505050505050505050565b60006103ee84848461042c565b9050600082806104005761040061079e565b848609111561042557600019811061041757600080fd5b80610421816107b4565b9150505b9392505050565b600080806000198587098587029250828110838203039150508060001415610466576000841161045b57600080fd5b508290049050610425565b80841161047257600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b03811681146104f057600080fd5b50565b60006020828403121561050557600080fd5b8135610425816104db565b6000806040838503121561052357600080fd5b823561052e816104db565b946020939093013593505050565b60006020828403121561054e57600080fd5b5051919050565b80516001600160701b038116811461056c57600080fd5b919050565b805163ffffffff8116811461056c57600080fd5b60008060006060848603121561059a57600080fd5b6105a384610555565b92506105b160208501610555565b91506105bf60408501610571565b90509250925092565b600080604083850312156105db57600080fd5b6105e483610571565b91506105f260208401610571565b90509250929050565b60006020828403121561060d57600080fd5b8151610425816104db565b634e487b7160e01b600052601160045260246000fd5b6000821982111561064157610641610618565b500190565b60006020828403121561065857600080fd5b815160ff8116811461042557600080fd5b600060ff821660ff84168082101561068357610683610618565b90039392505050565b600181815b808511156106c75781600019048211156106ad576106ad610618565b808516156106ba57918102915b93841c9390800290610691565b509250929050565b6000826106de575060016100e7565b816106eb575060006100e7565b8160018114610701576002811461070b57610727565b60019150506100e7565b60ff84111561071c5761071c610618565b50506001821b6100e7565b5060208310610133831016604e8410600b841016171561074a575081810a6100e7565b610754838361068c565b806000190482111561076857610768610618565b029392505050565b600061042560ff8416836106cf565b600081600019048311821515161561079957610799610618565b500290565b634e487b7160e01b600052601260045260246000fd5b60006000198214156107c8576107c8610618565b506001019056fea264697066735822122092a53a74fe9e2a90f70d659779c0380878b76e4f17f542a07807105672d83c5864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTotalValue(address)": {
        "params": {
          "_pair": "general pair that has the RequiemSwap interface implemented  - the value is calculated as the geometric average of input and output  - is consistent with the uniswapV2-type case"
        }
      },
      "valuation(address,uint256)": {
        "params": {
          "_pair": "general pair that has the RequiemSwap interface implemented",
          "amount_": "the amount of LP to price for the backing  - is consistent with the uniswapV2-type case"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTotalValue(address)": {
        "notice": "note for general pairs the price does not necessarily satisfy the conditon that the lp value consists 50% of the one and the other token since the mid price is the quotient of the reserves. That is not necessarily the case for general pairs, therefore, we have to calculate the price separately and apply it to the reserve amount for conversion - calculates the total liquidity value denominated in the provided token - uses the 1bps ouytput reserves for that calculation to avoid slippage to   have a too large impact - the sencond token input argument is ignored when using pools with only 2 tokens"
      },
      "valuation(address,uint256)": {
        "notice": "- calculates the value in QUOTE  that backs reqt 1:1 of the input LP amount provided"
      }
    },
    "notice": "Bonding calculator for weighted pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "language": "Solidity",
  "sources": {
    "contracts/test/TestWETH_flat.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// File: libraries/helpers/RequiemErrors.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.10;\n\n// solhint-disable\nlibrary RequiemErrors {\n  /**\n   * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n   * supported.\n   */\n  function _require(bool condition, uint256 errorCode) internal pure {\n    if (!condition) RequiemErrors._revert(errorCode);\n  }\n\n  /**\n   * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n   */\n  function _revert(uint256 errorCode) internal pure {\n    // We're going to dynamically create a revert string based on the error code, with the following format:\n    // 'REQ#{errorCode}'\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\n    //\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\n    // number (8 to 16 bits) than the individual string characters.\n    //\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\n    assembly {\n      // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\n      // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\n      // the '0' character.\n\n      let units := add(mod(errorCode, 10), 0x30)\n\n      errorCode := div(errorCode, 10)\n      let tenths := add(mod(errorCode, 10), 0x30)\n\n      errorCode := div(errorCode, 10)\n      let hundreds := add(mod(errorCode, 10), 0x30)\n\n      // With the individual characters, we can now construct the full string. The \"REQ#\" part is a known constant\n      // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\n      // characters to it, each shifted by a multiple of 8.\n      // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\n      // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\n      // array).\n\n      let revertReason := shl(\n        200,\n        add(\n          0x52455123000000,\n          add(add(units, shl(8, tenths)), shl(16, hundreds))\n        )\n      )\n\n      // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\n      // message will have the following layout:\n      // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\n\n      // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\n      // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\n      mstore(\n        0x0,\n        0x08c379a000000000000000000000000000000000000000000000000000000000\n      )\n      // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\n      mstore(\n        0x04,\n        0x0000000000000000000000000000000000000000000000000000000000000020\n      )\n      // The string length is fixed: 7 characters.\n      mstore(0x24, 7)\n      // Finally, the string itself is stored.\n      mstore(0x44, revertReason)\n\n      // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\n      // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\n      revert(0, 100)\n    }\n  }\n}\n\nlibrary Errors {\n  // Math\n  uint256 internal constant ADD_OVERFLOW = 0;\n  uint256 internal constant SUB_OVERFLOW = 1;\n  uint256 internal constant SUB_UNDERFLOW = 2;\n  uint256 internal constant MUL_OVERFLOW = 3;\n  uint256 internal constant ZERO_DIVISION = 4;\n  uint256 internal constant DIV_INTERNAL = 5;\n  uint256 internal constant X_OUT_OF_BOUNDS = 6;\n  uint256 internal constant Y_OUT_OF_BOUNDS = 7;\n  uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\n  uint256 internal constant INVALID_EXPONENT = 9;\n\n  // Input\n  uint256 internal constant OUT_OF_BOUNDS = 100;\n  uint256 internal constant UNSORTED_ARRAY = 101;\n  uint256 internal constant UNSORTED_TOKENS = 102;\n  uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\n  uint256 internal constant ZERO_TOKEN = 104;\n\n  // Shared pools\n  uint256 internal constant MIN_TOKENS = 200;\n  uint256 internal constant MAX_TOKENS = 201;\n  uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\n  uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\n  uint256 internal constant MINIMUM_BPT = 204;\n  uint256 internal constant CALLER_NOT_VAULT = 205;\n  uint256 internal constant UNINITIALIZED = 206;\n  uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\n  uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\n  uint256 internal constant EXPIRED_PERMIT = 209;\n  uint256 internal constant NOT_TWO_TOKENS = 210;\n\n  // Pools\n  uint256 internal constant MIN_AMP = 300;\n  uint256 internal constant MAX_AMP = 301;\n  uint256 internal constant MIN_WEIGHT = 302;\n  uint256 internal constant MAX_STABLE_TOKENS = 303;\n  uint256 internal constant MAX_IN_RATIO = 304;\n  uint256 internal constant MAX_OUT_RATIO = 305;\n  uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\n  uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\n  uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\n  uint256 internal constant INVALID_TOKEN = 309;\n  uint256 internal constant UNHANDLED_JOIN_KIND = 310;\n  uint256 internal constant ZERO_INVARIANT = 311;\n  uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\n  uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\n  uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\n  uint256 internal constant ORACLE_INVALID_INDEX = 315;\n  uint256 internal constant ORACLE_BAD_SECS = 316;\n  uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\n  uint256 internal constant AMP_ONGOING_UPDATE = 318;\n  uint256 internal constant AMP_RATE_TOO_HIGH = 319;\n  uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\n  uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\n  uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\n  uint256 internal constant RELAYER_NOT_CONTRACT = 323;\n  uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\n  uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\n  uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\n  uint256 internal constant SWAPS_DISABLED = 327;\n  uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\n  uint256 internal constant PRICE_RATE_OVERFLOW = 329;\n  uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\n  uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\n  uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\n  uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\n  uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\n  uint256 internal constant OUT_OF_TARGET_RANGE = 335;\n  uint256 internal constant UNHANDLED_EXIT_KIND = 336;\n  uint256 internal constant UNAUTHORIZED_EXIT = 337;\n  uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\n  uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\n  uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\n  uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\n  uint256 internal constant INVALID_INITIALIZATION = 342;\n\n  // Lib\n  uint256 internal constant REENTRANCY = 400;\n  uint256 internal constant SENDER_NOT_ALLOWED = 401;\n  uint256 internal constant PAUSED = 402;\n  uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\n  uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\n  uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\n  uint256 internal constant INSUFFICIENT_BALANCE = 406;\n  uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\n  uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\n  uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\n  uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\n  uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\n  uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\n  uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\n  uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\n  uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\n  uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\n  uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\n  uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\n  uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\n  uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\n  uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\n  uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\n  uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\n  uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\n  uint256 internal constant CALLER_IS_NOT_OWNER = 426;\n  uint256 internal constant NEW_OWNER_IS_ZERO = 427;\n  uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\n  uint256 internal constant CALL_TO_NON_CONTRACT = 429;\n  uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\n  uint256 internal constant NOT_PAUSED = 431;\n\n  // Vault\n  uint256 internal constant INVALID_POOL_ID = 500;\n  uint256 internal constant CALLER_NOT_POOL = 501;\n  uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\n  uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\n  uint256 internal constant INVALID_SIGNATURE = 504;\n  uint256 internal constant EXIT_BELOW_MIN = 505;\n  uint256 internal constant JOIN_ABOVE_MAX = 506;\n  uint256 internal constant SWAP_LIMIT = 507;\n  uint256 internal constant SWAP_DEADLINE = 508;\n  uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\n  uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\n  uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\n  uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\n  uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\n  uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\n  uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\n  uint256 internal constant INSUFFICIENT_ETH = 516;\n  uint256 internal constant UNALLOCATED_ETH = 517;\n  uint256 internal constant ETH_TRANSFER = 518;\n  uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\n  uint256 internal constant TOKENS_MISMATCH = 520;\n  uint256 internal constant TOKEN_NOT_REGISTERED = 521;\n  uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\n  uint256 internal constant TOKENS_ALREADY_SET = 523;\n  uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\n  uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\n  uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\n  uint256 internal constant POOL_NO_TOKENS = 527;\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\n\n  // Fees\n  uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\n  uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\n  uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\n}\n\n// File: libraries/EnumerableSet.sol\n\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode\n// size and runtime costs.\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\n\npragma solidity ^0.8.10;\n\n// solhint-disable func-name-mixedcase\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n  // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\n  // AddressSet, which uses address keys natively, resulting in more dense bytecode.\n\n  struct AddressSet {\n    // Storage of set values\n    address[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(address => uint256) _indexes;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    if (!contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._indexes[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(AddressSet storage set, address value)\n    internal\n    returns (bool)\n  {\n    // We read and store the value's index to prevent multiple reads from the same storage slot\n    uint256 valueIndex = set._indexes[value];\n\n    if (valueIndex != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 toDeleteIndex = valueIndex - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      // The swap is only necessary if we're not removing the last element\n      if (toDeleteIndex != lastIndex) {\n        address lastValue = set._values[lastIndex];\n\n        // Move the last value to the index where the value to delete is\n        set._values[toDeleteIndex] = lastValue;\n        // Update the index for the moved value\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the index for the deleted slot\n      delete set._indexes[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(AddressSet storage set, address value)\n    internal\n    view\n    returns (bool)\n  {\n    return set._indexes[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(AddressSet storage set, uint256 index)\n    internal\n    view\n    returns (address)\n  {\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\n    return unchecked_at(set, index);\n  }\n\n  /**\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\n   * than {length}). O(1).\n   *\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n   * within bounds.\n   */\n  function unchecked_at(AddressSet storage set, uint256 index)\n    internal\n    view\n    returns (address)\n  {\n    return set._values[index];\n  }\n\n  function rawIndexOf(AddressSet storage set, address value)\n    internal\n    view\n    returns (uint256)\n  {\n    return set._indexes[value] - 1;\n  }\n\n  struct Bytes32Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(bytes32 => uint256) _indexes;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    if (!contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._indexes[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was present.\n   */\n  function remove(Bytes32Set storage set, bytes32 value)\n    internal\n    returns (bool)\n  {\n    // We read and store the value's index to prevent multiple reads from the same storage slot\n    uint256 valueIndex = set._indexes[value];\n\n    if (valueIndex != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 toDeleteIndex = valueIndex - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      // The swap is only necessary if we're not removing the last element\n      if (toDeleteIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the last value to the index where the value to delete is\n        set._values[toDeleteIndex] = lastValue;\n        // Update the index for the moved value\n        set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the index for the deleted slot\n      delete set._indexes[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(Bytes32Set storage set, bytes32 value)\n    internal\n    view\n    returns (bool)\n  {\n    return set._indexes[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(Bytes32Set storage set, uint256 index)\n    internal\n    view\n    returns (bytes32)\n  {\n    RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\n    return unchecked_at(set, index);\n  }\n\n  /**\n   * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\n   * than {length}). O(1).\n   *\n   * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n   * within bounds.\n   */\n  function unchecked_at(Bytes32Set storage set, uint256 index)\n    internal\n    view\n    returns (bytes32)\n  {\n    return set._values[index];\n  }\n\n  function rawIndexOf(Bytes32Set storage set, bytes32 value)\n    internal\n    view\n    returns (uint256)\n  {\n    return set._indexes[value] - 1;\n  }\n}\n\n// File: libraries/AccessControl.sol\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  struct RoleData {\n    EnumerableSet.AddressSet members;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 => RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   *\n   * _Available since v3.1._\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account)\n    public\n    view\n    virtual\n    returns (bool)\n  {\n    return _roles[role].members.contains(account);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n    return _roles[role].members.length();\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(bytes32 role, uint256 index)\n    public\n    view\n    returns (address)\n  {\n    return _roles[role].members.at(index);\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) public virtual {\n    RequiemErrors._require(\n      hasRole(_roles[role].adminRole, msg.sender),\n      Errors.GRANT_SENDER_NOT_ADMIN\n    );\n\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had already been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) public virtual {\n    RequiemErrors._require(\n      hasRole(_roles[role].adminRole, msg.sender),\n      Errors.REVOKE_SENDER_NOT_ADMIN\n    );\n\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `account`.\n   */\n  function renounceRole(bytes32 role, address account) public virtual {\n    RequiemErrors._require(\n      account == msg.sender,\n      Errors.RENOUNCE_SENDER_NOT_ALLOWED\n    );\n\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event. Note that unlike {grantRole}, this function doesn't perform any\n   * checks on the calling account.\n   *\n   * [WARNING]\n   * ====\n   * This function should only be called from the constructor when setting\n   * up the initial roles for the system.\n   *\n   * Using this function in any other way is effectively circumventing the admin\n   * system imposed by {AccessControl}.\n   * ====\n   */\n  function _setupRole(bytes32 role, address account) internal virtual {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n    _roles[role].adminRole = adminRole;\n  }\n\n  function _grantRole(bytes32 role, address account) private {\n    if (_roles[role].members.add(account)) {\n      emit RoleGranted(role, account, msg.sender);\n    }\n  }\n\n  function _revokeRole(bytes32 role, address account) private {\n    if (_roles[role].members.remove(account)) {\n      emit RoleRevoked(role, account, msg.sender);\n    }\n  }\n}\n\n// File: interfaces/ERC20/IERC20.sol\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n// File: interfaces/IWETH.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Interface for WETH9.\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\n */\ninterface IWETH is IERC20 {\n  function deposit() external payable;\n\n  function withdraw(uint256 amount) external;\n}\n\n// File: test/TestWETH.sol\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.10;\n\ncontract TestWETH is AccessControl, IWETH {\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n  string public name = \"Wrapped Ether\";\n  string public symbol = \"WETH\";\n  uint8 public decimals = 18;\n\n  event Deposit(address indexed dst, uint256 wad);\n  event Withdrawal(address indexed src, uint256 wad);\n\n  mapping(address => uint256) public override balanceOf;\n  mapping(address => mapping(address => uint256)) public override allowance;\n\n  constructor(address minter) {\n    _setupRole(DEFAULT_ADMIN_ROLE, minter);\n    _setupRole(MINTER_ROLE, minter);\n  }\n\n  receive() external payable {\n    deposit();\n  }\n\n  function deposit() public payable override {\n    balanceOf[msg.sender] += msg.value;\n    emit Deposit(msg.sender, msg.value);\n  }\n\n  function withdraw(uint256 wad) public override {\n    require(balanceOf[msg.sender] >= wad, \"INSUFFICIENT_BALANCE\");\n    balanceOf[msg.sender] -= wad;\n    payable(msg.sender).transfer(wad);\n    emit Withdrawal(msg.sender, wad);\n  }\n\n  // For testing purposes - this creates WETH that cannot be redeemed for ETH via 'withdraw'\n  function mint(address destinatary, uint256 amount) external {\n    require(hasRole(MINTER_ROLE, msg.sender), \"NOT_MINTER\");\n    balanceOf[destinatary] += amount;\n    emit Deposit(destinatary, amount);\n  }\n\n  function totalSupply() public view override returns (uint256) {\n    return address(this).balance;\n  }\n\n  function approve(address guy, uint256 wad) public override returns (bool) {\n    allowance[msg.sender][guy] = wad;\n    emit Approval(msg.sender, guy, wad);\n    return true;\n  }\n\n  function transfer(address dst, uint256 wad) public override returns (bool) {\n    return transferFrom(msg.sender, dst, wad);\n  }\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 wad\n  ) public override returns (bool) {\n    require(balanceOf[src] >= wad, \"INSUFFICIENT_BALANCE\");\n\n    if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\n      require(allowance[src][msg.sender] >= wad, \"INSUFFICIENT_ALLOWANCE\");\n      allowance[src][msg.sender] -= wad;\n    }\n\n    balanceOf[src] -= wad;\n    balanceOf[dst] += wad;\n\n    emit Transfer(src, dst, wad);\n\n    return true;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}
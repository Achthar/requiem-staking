{
  "address": "0xF5d2E7bAC75673d2D1761B5B98f6209ae5B39203",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_REQUIEM_CHEF",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "LogOnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "LogRewardPerSecond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpToken",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct ComplexRewarderTime.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0ac499d27876abcad12ba74a4b291f574dacf675518412ccddde20090787241",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0xF5d2E7bAC75673d2D1761B5B98f6209ae5B39203",
    "transactionIndex": 0,
    "gasUsed": "1222449",
    "logsBloom": "0x
    "blockHash": "0x1ba0b96938c1272f15dba3009445a69734306ec98907d9498050c45408de484a",
    "transactionHash": "0xf0ac499d27876abcad12ba74a4b291f574dacf675518412ccddde20090787241",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4471129,
        "transactionHash": "0xf0ac499d27876abcad12ba74a4b291f574dacf675518412ccddde20090787241",
        "address": "0xF5d2E7bAC75673d2D1761B5B98f6209ae5B39203",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000010e38dfffcfdbaaf590d5a9958b01c9cfcf6a63b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1ba0b96938c1272f15dba3009445a69734306ec98907d9498050c45408de484a"
      }
    ],
    "blockNumber": 4471129,
    "cumulativeGasUsed": "1222449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d90e6d9368b2838a9558B0a609750243C5C4679",
    1,
    "0xD4864BA8C00Eda17eFcbd0163c3202b36E355007"
  ],
  "solcInputHash": "643d8d4b32e974e077b9271b9fa171b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_REQUIEM_CHEF\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LogOnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"LogRewardPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderTime.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,uint256)\":{\"params\":{\"_pid\":\"Pid on MCV2\",\"allocPoint\":\"AP of the new pool.\"}},\"massUpdatePools(uint256[])\":{\"params\":{\"pids\":\"Pool IDs of all to be updated. Make sure to update all active pools.\"}},\"pendingToken(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"set(uint256,uint256)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\"}},\"setRewardPerSecond(uint256)\":{\"params\":{\"_rewardPerSecond\":\"The amount of Sushi to be distributed per second.\"}},\"updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"stateVariables\":{\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,uint256)\":{\"notice\":\"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"massUpdatePools(uint256[])\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"pendingToken(uint256,address)\":{\"notice\":\"View function to see pending Token\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MCV2 pools.\"},\"set(uint256,uint256)\":{\"notice\":\"Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\"},\"setRewardPerSecond(uint256)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewarders/ComplexRewarderTime.sol\":\"ComplexRewarderTime\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc8de46b5781a713fd63eb204be9a9a821aab6468f5ca504ec90c1aec6b8a3bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IMiniChefV2 {\\n  function lpToken(uint256 _pid) external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x32057dab15c0729afa5c77301d527642680582de3c66f15b06077a7aceacc2d6\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IOwnable {\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n  \\n  function transferOwnership( address newOwner_ ) external;\\n}\",\"keccak256\":\"0xe13848b0135efed399cfcc5493b8d3cdf28a70d6c9e893bc93b4eb0f4ed66da8\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  function onReward(\\n    uint256 pid,\\n    address user,\\n    address recipient,\\n    uint256 rewardAmount,\\n    uint256 newLpAmount\\n  ) external;\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256 rewardAmount\\n  ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x28a6a04239ee16858a9d37be09cddf0a18ae050329c58b5a847daa90a71b546a\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\ncontract Ownable is IOwnable {\\n    \\n  address internal _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor () {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred( address(0), _owner );\\n  }\\n\\n  function owner() public view override returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n    _;\\n  }\\n\\n  function renounceOwnership() public virtual override onlyOwner() {\\n    emit OwnershipTransferred( _owner, address(0) );\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\\n    require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred( _owner, newOwner_ );\\n    _owner = newOwner_;\\n  }\\n}\",\"keccak256\":\"0xc237d4d7d8e2cd332a34e0a8766a5fe3bc911e3fdce1523d0b6c8f4fd166151f\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    RequiemErrors._require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      Errors.SAFE_ERC20_CALL_FAILED\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc2deaa0858d31692b977c478b7139e60fd3084eff4ed832ba55f6c8d890ec489\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"},\"contracts/rewarders/ComplexRewarderTime.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/IRewarder.sol\\\";\\nimport \\\"../interfaces/IMiniChefV2.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\ncontract ComplexRewarderTime is IRewarder, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private rewardToken;\\n\\n  /// @notice Info of each MCV2 user.\\n  /// `amount` LP token amount the user has provided.\\n  /// `rewardDebt` The amount of reward entitled to the user.\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  /// @notice Info of each MCV2 pool.\\n  /// `allocPoint` The amount of allocation points assigned to the pool.\\n  /// Also known as the amount of SUSHI to distribute per block.\\n  struct PoolInfo {\\n    uint256 accRewardPerShare;\\n    uint256 lastRewardTime;\\n    uint256 allocPoint;\\n  }\\n\\n  /// @notice Info of each pool.\\n  mapping(uint256 => PoolInfo) public poolInfo;\\n\\n  uint256[] public poolIds;\\n\\n  /// @notice Info of each user that stakes LP tokens.\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n  /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n  uint256 totalAllocPoint;\\n\\n  uint256 public rewardPerSecond;\\n  uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n\\n  address private REQUIEM_CHEF;\\n\\n  event LogOnReward(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 amount,\\n    address indexed to\\n  );\\n  event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\\n  event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n  event LogUpdatePool(\\n    uint256 indexed pid,\\n    uint256 lastRewardTime,\\n    uint256 lpSupply,\\n    uint256 accRewardPerShare\\n  );\\n  event LogRewardPerSecond(uint256 rewardPerSecond);\\n  event LogInit();\\n\\n  constructor(\\n    IERC20 _rewardToken,\\n    uint256 _rewardPerSecond,\\n    address _REQUIEM_CHEF\\n  ) {\\n    rewardToken = _rewardToken;\\n    rewardPerSecond = _rewardPerSecond;\\n    REQUIEM_CHEF = _REQUIEM_CHEF;\\n  }\\n\\n  function onReward(\\n    uint256 pid,\\n    address _user,\\n    address to,\\n    uint256,\\n    uint256 lpToken\\n  ) external override onlyMCV2 {\\n    PoolInfo memory pool = updatePool(pid);\\n    UserInfo storage user = userInfo[pid][_user];\\n    uint256 pending;\\n    if (user.amount > 0) {\\n      pending =\\n        (user.amount * pool.accRewardPerShare) /\\n        ACC_TOKEN_PRECISION -\\n        user.rewardDebt;\\n      rewardToken.safeTransfer(to, pending);\\n    }\\n    user.amount = lpToken;\\n    user.rewardDebt = (lpToken * pool.accRewardPerShare) / ACC_TOKEN_PRECISION;\\n    emit LogOnReward(_user, pid, pending, to);\\n  }\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256\\n  )\\n    external\\n    view\\n    override\\n    returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\\n  {\\n    IERC20[] memory _rewardTokens = new IERC20[](1);\\n    _rewardTokens[0] = (rewardToken);\\n    uint256[] memory _rewardAmounts = new uint256[](1);\\n    _rewardAmounts[0] = pendingToken(pid, user);\\n    return (_rewardTokens, _rewardAmounts);\\n  }\\n\\n  /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n  /// @param _rewardPerSecond The amount of Sushi to be distributed per second.\\n  function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n    rewardPerSecond = _rewardPerSecond;\\n    emit LogRewardPerSecond(_rewardPerSecond);\\n  }\\n\\n  modifier onlyMCV2() {\\n    require(msg.sender == REQUIEM_CHEF, \\\"Only MCV2 can call this function.\\\");\\n    _;\\n  }\\n\\n  /// @notice Returns the number of MCV2 pools.\\n  function poolLength() public view returns (uint256 pools) {\\n    pools = poolIds.length;\\n  }\\n\\n  /// @notice Add a new LP to the pool. Can only be called by the owner.\\n  /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n  /// @param allocPoint AP of the new pool.\\n  /// @param _pid Pid on MCV2\\n  function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\\n    require(poolInfo[_pid].lastRewardTime == 0, \\\"Pool already exists\\\");\\n    uint256 lastRewardTime = block.timestamp;\\n    totalAllocPoint += allocPoint;\\n\\n    poolInfo[_pid] = PoolInfo({\\n      allocPoint: allocPoint,\\n      lastRewardTime: lastRewardTime,\\n      accRewardPerShare: 0\\n    });\\n    poolIds.push(_pid);\\n    emit LogPoolAddition(_pid, allocPoint);\\n  }\\n\\n  /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\\n  /// @param _pid The index of the pool. See `poolInfo`.\\n  /// @param _allocPoint New AP of the pool.\\n  function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\n    totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n    poolInfo[_pid].allocPoint = _allocPoint;\\n    emit LogSetPool(_pid, _allocPoint);\\n  }\\n\\n  /// @notice View function to see pending Token\\n  /// @param _pid The index of the pool. See `poolInfo`.\\n  /// @param _user Address of user.\\n  /// @return pending reward for a given user.\\n  function pendingToken(uint256 _pid, address _user)\\n    public\\n    view\\n    returns (uint256 pending)\\n  {\\n    PoolInfo memory pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_user];\\n    uint256 accRewardPerShare = pool.accRewardPerShare;\\n    uint256 lpSupply = IMiniChefV2(REQUIEM_CHEF).lpToken(_pid).balanceOf(\\n      REQUIEM_CHEF\\n    );\\n    if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n      uint256 time = block.timestamp - pool.lastRewardTime;\\n      uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\\n        totalAllocPoint;\\n      accRewardPerShare += (rewardAmount * ACC_TOKEN_PRECISION) / lpSupply;\\n    }\\n    pending =\\n      (user.amount * accRewardPerShare) /\\n      ACC_TOKEN_PRECISION -\\n      user.rewardDebt;\\n  }\\n\\n  /// @notice Update reward variables for all pools. Be careful of gas spending!\\n  /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n  function massUpdatePools(uint256[] calldata pids) external {\\n    uint256 len = pids.length;\\n    for (uint256 i = 0; i < len; ++i) {\\n      updatePool(pids[i]);\\n    }\\n  }\\n\\n  /// @notice Update reward variables of the given pool.\\n  /// @param pid The index of the pool. See `poolInfo`.\\n  /// @return pool Returns the pool that was updated.\\n  function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n    pool = poolInfo[pid];\\n    if (block.timestamp > pool.lastRewardTime) {\\n      uint256 lpSupply = IMiniChefV2(REQUIEM_CHEF).lpToken(pid).balanceOf(\\n        REQUIEM_CHEF\\n      );\\n\\n      if (lpSupply > 0) {\\n        uint256 time = block.timestamp - pool.lastRewardTime;\\n        uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) /\\n          totalAllocPoint;\\n        pool.accRewardPerShare =\\n          pool.accRewardPerShare +\\n          (rewardAmount * ACC_TOKEN_PRECISION) /\\n          lpSupply;\\n      }\\n      pool.lastRewardTime = block.timestamp;\\n      poolInfo[pid] = pool;\\n      emit LogUpdatePool(\\n        pid,\\n        pool.lastRewardTime,\\n        lpSupply,\\n        pool.accRewardPerShare\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe2496608cb848eb39e46f2fe93cbcd27debdc0f8d31a7c312fc7848b17ed6b73\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161148338038061148383398101604081905261002f916100bd565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600180546001600160a01b039485166001600160a01b03199182161790915560069290925560078054919093169116179055610100565b6001600160a01b03811681146100ba57600080fd5b50565b6000806000606084860312156100d257600080fd5b83516100dd816100a5565b6020850151604086015191945092506100f5816100a5565b809150509250925092565b6113748061010f6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806369883b4e116100975780638f10369a116100665780638f10369a1461024457806393f1a40b1461024d578063d63b3c4914610294578063f2fde38b146102b557600080fd5b806369883b4e146101fb578063715018a61461020e578063771602f7146102165780638da5cb5b1461022957600080fd5b806348e43af4116100d357806348e43af41461018d57806351eb05a6146101a057806357a5b58c146101d557806366da5815146101e857600080fd5b8063081e3eda146101055780631526fe271461011c5780631ab06ee51461016557806344af0fa71461017a575b600080fd5b6003545b6040519081526020015b60405180910390f35b61014a61012a366004610fca565b600260208190526000918252604090912080546001820154919092015483565b60408051938452602084019290925290820152606001610113565b610178610173366004610fe3565b6102c8565b005b61017861018836600461101d565b6103a9565b61010961019b36600461106f565b61051b565b6101b36101ae366004610fca565b6106f8565b6040805182518152602080840151908201529181015190820152606001610113565b6101786101e336600461109f565b61091f565b6101786101f6366004610fca565b610963565b610109610209366004610fca565b6109f8565b610178610a19565b610178610224366004610fe3565b610aca565b6000546040516001600160a01b039091168152602001610113565b61010960065481565b61027f61025b36600461106f565b60046020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610113565b6102a76102a2366004611114565b610c50565b60405161011392919061114c565b6101786102c33660046111d0565b610d08565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000828152600260208190526040909120015460055482916103489161120a565b6103529190611221565b600555600082815260026020819052604091829020018290555182907f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c9061039d9084815260200190565b60405180910390a25050565b6007546001600160a01b031633146104295760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79204d4356322063616e2063616c6c20746869732066756e6374696f6e60448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015260840161031e565b6000610434866106f8565b60008781526004602090815260408083206001600160a01b038a1684529091528120805492935091156104a85760018201548351835464e8d4a510009161047a91611239565b6104849190611258565b61048e919061120a565b6001549091506104a8906001600160a01b03168783610e46565b838255825164e8d4a51000906104be9086611239565b6104c89190611258565b60018301556040518181526001600160a01b03808816918a918a16907f2ece88ca2bc08dd018db50e1d25a20bf1241e5fab1c396caa51f01a54bd2f75b9060200160405180910390a45050505050505050565b60008281526002602081815260408084208151606081018352815481526001820154818501529301548382015285845260048083528185206001600160a01b0387811687529352818520845160075493516378ed5d1f60e01b81529283018990529093909286929116906378ed5d1f90602401602060405180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf919061127a565b6007546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611297565b905083602001514211801561065057508015155b156106c0576000846020015142610667919061120a565b905060006005548660400151600654846106819190611239565b61068b9190611239565b6106959190611258565b9050826106a764e8d4a5100083611239565b6106b19190611258565b6106bb9085611221565b935050505b6001830154835464e8d4a51000906106d9908590611239565b6106e39190611258565b6106ed919061120a565b979650505050505050565b61071c60405180606001604052806000815260200160008152602001600081525090565b506000818152600260208181526040928390208351606081018552815481526001820154928101839052920154928201929092529042111561091a576007546040516378ed5d1f60e01b8152600481018490526000916001600160a01b0316906378ed5d1f90602401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c6919061127a565b6007546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190611297565b905080156108a857600082602001514261084d919061120a565b905060006005548460400151600654846108679190611239565b6108719190611239565b61087b9190611258565b90508261088d64e8d4a5100083611239565b6108979190611258565b84516108a39190611221565b845250505b426020838101918252600085815260028083526040918290208651808255945160018201819055838801519190920155815190815291820184905281019190915283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b8060005b8181101561095d5761094c848483818110610940576109406112b0565b905060200201356106f8565b50610956816112c6565b9050610923565b50505050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b60068190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b60038181548110610a0857600080fd5b600091825260209091200154905081565b6000546001600160a01b03163314610a735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b03163314610b245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b60008181526002602052604090206001015415610b835760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161031e565b60004290508260056000828254610b9a9190611221565b909155505060408051606081018252600080825260208083018581528385018881528784526002928390528584209451855590516001808601919091559051939091019290925560038054928301815590527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018390555182907f38410508059921573ab9ebdca2a5034be738d236366b8f32de4434ea95ed3c8190610c439086815260200190565b60405180910390a2505050565b604080516001808252818301909252606091829160009160208083019080368337505060015482519293506001600160a01b031691839150600090610c9757610c976112b0565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050610cde878761051b565b81600081518110610cf157610cf16112b0565b602090810291909101015290969095509350505050565b6000546001600160a01b03163314610d625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b6001600160a01b038116610dde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161031e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec6908490610ecb565b505050565b600080836001600160a01b031683604051610ee691906112e1565b6000604051808303816000865af19150503d8060008114610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b50915091506000821415610f40573d6000803e3d6000fd5b61095d815160001480610f62575081806020019051810190610f62919061131c565b6101a281610f7357610f7381610f77565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600060208284031215610fdc57600080fd5b5035919050565b60008060408385031215610ff657600080fd5b50508035926020909101359150565b6001600160a01b038116811461101a57600080fd5b50565b600080600080600060a0868803121561103557600080fd5b85359450602086013561104781611005565b9350604086013561105781611005565b94979396509394606081013594506080013592915050565b6000806040838503121561108257600080fd5b82359150602083013561109481611005565b809150509250929050565b600080602083850312156110b257600080fd5b823567ffffffffffffffff808211156110ca57600080fd5b818501915085601f8301126110de57600080fd5b8135818111156110ed57600080fd5b8660208260051b850101111561110257600080fd5b60209290920196919550909350505050565b60008060006060848603121561112957600080fd5b83359250602084013561113b81611005565b929592945050506040919091013590565b604080825283519082018190526000906020906060840190828701845b8281101561118e5781516001600160a01b031684529284019290840190600101611169565b5050508381038285015284518082528583019183019060005b818110156111c3578351835292840192918401916001016111a7565b5090979650505050505050565b6000602082840312156111e257600080fd5b81356111ed81611005565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561121c5761121c6111f4565b500390565b60008219821115611234576112346111f4565b500190565b6000816000190483118215151615611253576112536111f4565b500290565b60008261127557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561128c57600080fd5b81516111ed81611005565b6000602082840312156112a957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156112da576112da6111f4565b5060010190565b6000825160005b8181101561130257602081860181015185830152016112e8565b81811115611311576000828501525b509190910192915050565b60006020828403121561132e57600080fd5b815180151581146111ed57600080fdfea26469706673582212203f8fe573f29fba31eda4ee782cc28417664a9509a17da6ad1776886d95a57bc164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806369883b4e116100975780638f10369a116100665780638f10369a1461024457806393f1a40b1461024d578063d63b3c4914610294578063f2fde38b146102b557600080fd5b806369883b4e146101fb578063715018a61461020e578063771602f7146102165780638da5cb5b1461022957600080fd5b806348e43af4116100d357806348e43af41461018d57806351eb05a6146101a057806357a5b58c146101d557806366da5815146101e857600080fd5b8063081e3eda146101055780631526fe271461011c5780631ab06ee51461016557806344af0fa71461017a575b600080fd5b6003545b6040519081526020015b60405180910390f35b61014a61012a366004610fca565b600260208190526000918252604090912080546001820154919092015483565b60408051938452602084019290925290820152606001610113565b610178610173366004610fe3565b6102c8565b005b61017861018836600461101d565b6103a9565b61010961019b36600461106f565b61051b565b6101b36101ae366004610fca565b6106f8565b6040805182518152602080840151908201529181015190820152606001610113565b6101786101e336600461109f565b61091f565b6101786101f6366004610fca565b610963565b610109610209366004610fca565b6109f8565b610178610a19565b610178610224366004610fe3565b610aca565b6000546040516001600160a01b039091168152602001610113565b61010960065481565b61027f61025b36600461106f565b60046020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610113565b6102a76102a2366004611114565b610c50565b60405161011392919061114c565b6101786102c33660046111d0565b610d08565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000828152600260208190526040909120015460055482916103489161120a565b6103529190611221565b600555600082815260026020819052604091829020018290555182907f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c9061039d9084815260200190565b60405180910390a25050565b6007546001600160a01b031633146104295760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79204d4356322063616e2063616c6c20746869732066756e6374696f6e60448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015260840161031e565b6000610434866106f8565b60008781526004602090815260408083206001600160a01b038a1684529091528120805492935091156104a85760018201548351835464e8d4a510009161047a91611239565b6104849190611258565b61048e919061120a565b6001549091506104a8906001600160a01b03168783610e46565b838255825164e8d4a51000906104be9086611239565b6104c89190611258565b60018301556040518181526001600160a01b03808816918a918a16907f2ece88ca2bc08dd018db50e1d25a20bf1241e5fab1c396caa51f01a54bd2f75b9060200160405180910390a45050505050505050565b60008281526002602081815260408084208151606081018352815481526001820154818501529301548382015285845260048083528185206001600160a01b0387811687529352818520845160075493516378ed5d1f60e01b81529283018990529093909286929116906378ed5d1f90602401602060405180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf919061127a565b6007546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611297565b905083602001514211801561065057508015155b156106c0576000846020015142610667919061120a565b905060006005548660400151600654846106819190611239565b61068b9190611239565b6106959190611258565b9050826106a764e8d4a5100083611239565b6106b19190611258565b6106bb9085611221565b935050505b6001830154835464e8d4a51000906106d9908590611239565b6106e39190611258565b6106ed919061120a565b979650505050505050565b61071c60405180606001604052806000815260200160008152602001600081525090565b506000818152600260208181526040928390208351606081018552815481526001820154928101839052920154928201929092529042111561091a576007546040516378ed5d1f60e01b8152600481018490526000916001600160a01b0316906378ed5d1f90602401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c6919061127a565b6007546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190611297565b905080156108a857600082602001514261084d919061120a565b905060006005548460400151600654846108679190611239565b6108719190611239565b61087b9190611258565b90508261088d64e8d4a5100083611239565b6108979190611258565b84516108a39190611221565b845250505b426020838101918252600085815260028083526040918290208651808255945160018201819055838801519190920155815190815291820184905281019190915283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b8060005b8181101561095d5761094c848483818110610940576109406112b0565b905060200201356106f8565b50610956816112c6565b9050610923565b50505050565b6000546001600160a01b031633146109bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b60068190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b60038181548110610a0857600080fd5b600091825260209091200154905081565b6000546001600160a01b03163314610a735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b03163314610b245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b60008181526002602052604090206001015415610b835760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161031e565b60004290508260056000828254610b9a9190611221565b909155505060408051606081018252600080825260208083018581528385018881528784526002928390528584209451855590516001808601919091559051939091019290925560038054928301815590527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018390555182907f38410508059921573ab9ebdca2a5034be738d236366b8f32de4434ea95ed3c8190610c439086815260200190565b60405180910390a2505050565b604080516001808252818301909252606091829160009160208083019080368337505060015482519293506001600160a01b031691839150600090610c9757610c976112b0565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050610cde878761051b565b81600081518110610cf157610cf16112b0565b602090810291909101015290969095509350505050565b6000546001600160a01b03163314610d625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b6001600160a01b038116610dde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161031e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec6908490610ecb565b505050565b600080836001600160a01b031683604051610ee691906112e1565b6000604051808303816000865af19150503d8060008114610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b50915091506000821415610f40573d6000803e3d6000fd5b61095d815160001480610f62575081806020019051810190610f62919061131c565b6101a281610f7357610f7381610f77565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600060208284031215610fdc57600080fd5b5035919050565b60008060408385031215610ff657600080fd5b50508035926020909101359150565b6001600160a01b038116811461101a57600080fd5b50565b600080600080600060a0868803121561103557600080fd5b85359450602086013561104781611005565b9350604086013561105781611005565b94979396509394606081013594506080013592915050565b6000806040838503121561108257600080fd5b82359150602083013561109481611005565b809150509250929050565b600080602083850312156110b257600080fd5b823567ffffffffffffffff808211156110ca57600080fd5b818501915085601f8301126110de57600080fd5b8135818111156110ed57600080fd5b8660208260051b850101111561110257600080fd5b60209290920196919550909350505050565b60008060006060848603121561112957600080fd5b83359250602084013561113b81611005565b929592945050506040919091013590565b604080825283519082018190526000906020906060840190828701845b8281101561118e5781516001600160a01b031684529284019290840190600101611169565b5050508381038285015284518082528583019183019060005b818110156111c3578351835292840192918401916001016111a7565b5090979650505050505050565b6000602082840312156111e257600080fd5b81356111ed81611005565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561121c5761121c6111f4565b500390565b60008219821115611234576112346111f4565b500190565b6000816000190483118215151615611253576112536111f4565b500290565b60008261127557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561128c57600080fd5b81516111ed81611005565b6000602082840312156112a957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156112da576112da6111f4565b5060010190565b6000825160005b8181101561130257602081860181015185830152016112e8565b81811115611311576000828501525b509190910192915050565b60006020828403121561132e57600080fd5b815180151581146111ed57600080fdfea26469706673582212203f8fe573f29fba31eda4ee782cc28417664a9509a17da6ad1776886d95a57bc164736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,uint256)": {
        "params": {
          "_pid": "Pid on MCV2",
          "allocPoint": "AP of the new pool."
        }
      },
      "massUpdatePools(uint256[])": {
        "params": {
          "pids": "Pool IDs of all to be updated. Make sure to update all active pools."
        }
      },
      "pendingToken(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "set(uint256,uint256)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`."
        }
      },
      "setRewardPerSecond(uint256)": {
        "params": {
          "_rewardPerSecond": "The amount of Sushi to be distributed per second."
        }
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "stateVariables": {
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,uint256)": {
        "notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "massUpdatePools(uint256[])": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "pendingToken(uint256,address)": {
        "notice": "View function to see pending Token"
      },
      "poolInfo(uint256)": {
        "notice": "Info of each pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MCV2 pools."
      },
      "set(uint256,uint256)": {
        "notice": "Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner."
      },
      "setRewardPerSecond(uint256)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11789,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16570,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)9666"
      },
      {
        "astId": 16588,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)16582_storage)"
      },
      {
        "astId": 16591,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "poolIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16599,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)16575_storage))"
      },
      {
        "astId": 16602,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 16604,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 16609,
        "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
        "label": "REQUIEM_CHEF",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)9666": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)16575_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComplexRewarderTime.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)16575_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)16575_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ComplexRewarderTime.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)16575_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)16582_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ComplexRewarderTime.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)16582_storage"
      },
      "t_struct(PoolInfo)16582_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderTime.PoolInfo",
        "members": [
          {
            "astId": 16577,
            "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16579,
            "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16581,
            "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)16575_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderTime.UserInfo",
        "members": [
          {
            "astId": 16572,
            "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16574,
            "contract": "contracts/rewarders/ComplexRewarderTime.sol:ComplexRewarderTime",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x30E4242b17Cda7e6C5F05B7b2cE35A38e06BD7Ee",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_REQT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_TUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_REQTDAI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksNeededForQueue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum RequiemTreasury.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "activated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "ChangeActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum RequiemTreasury.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "ChangeQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LiquidityDepositorQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LiquidityManagerQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LiquidityTokenQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ReserveManagerQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksNeededForQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtorQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "debtors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excessReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDebtor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidityDepositor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidityManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidityToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isReserveDepositor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isReserveManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isReserveSpender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isReserveToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityDepositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RequiemTreasury.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithREQT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reserveDepositorQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveDepositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reserveSpenderQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveSpenders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reserveTokenQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardManagerQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sREQT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sREQTQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RequiemTreasury.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        }
      ],
      "name": "toggle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "valueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3da6e0929cc6954d1e31bf28e5cb877b4d3122eeb5b5c654f46173026c08798",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x30E4242b17Cda7e6C5F05B7b2cE35A38e06BD7Ee",
    "transactionIndex": 3,
    "gasUsed": "2865675",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000800000000010000000000000000000000000000000000000000000000000000000000000000000000020000000000000000020000000000000000000800000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000020000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x46a3a0f5ee7ba74d731810fe73965f0b60e3e06242f1e57d94dc8bb6af94941e",
    "transactionHash": "0xd3da6e0929cc6954d1e31bf28e5cb877b4d3122eeb5b5c654f46173026c08798",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 4813039,
        "transactionHash": "0xd3da6e0929cc6954d1e31bf28e5cb877b4d3122eeb5b5c654f46173026c08798",
        "address": "0x30E4242b17Cda7e6C5F05B7b2cE35A38e06BD7Ee",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000010e38dfffcfdbaaf590d5a9958b01c9cfcf6a63b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x46a3a0f5ee7ba74d731810fe73965f0b60e3e06242f1e57d94dc8bb6af94941e"
      }
    ],
    "blockNumber": 4813039,
    "cumulativeGasUsed": "3088371",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d90e6d9368b2838a9558B0a609750243C5C4679",
    "0xaea51e4fee50a980928b4353e852797b54deacd8",
    "0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1",
    "0xcde9f3be9786e91b3b309bcf5f6de69c9ea8739c",
    0
  ],
  "solcInputHash": "dbef1d8ea824065ffebdb63511cd47a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REQT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_REQTDAI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum RequiemTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum RequiemTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReserveManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDebtor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RequiemTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithREQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveSpenderQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSpenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sREQT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sREQTQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RequiemTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"queue(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"repayDebtWithREQT(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"toggle(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"valueOf(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"},\"returns\":{\"value_\":\"uint\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for REQT\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mintRewards(address,uint256)\":{\"notice\":\"send epoch reward to staking contract\"},\"queue(uint8,address)\":{\"notice\":\"queue address to change boolean in mapping\"},\"repayDebtWithREQT(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with REQT\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"toggle(uint8,address,address)\":{\"notice\":\"verify queue then set boolean in mapping\"},\"valueOf(address,uint256)\":{\"notice\":\"returns REQT valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn REQT for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemTreasury.sol\":\"RequiemTreasury\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./libraries/Manageable.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20Mintable.sol\\\";\\nimport \\\"./interfaces/IREQTERC20.sol\\\";\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\n\\ncontract RequiemTreasury is Manageable, ITreasury {\\n  using SafeERC20 for IERC20;\\n\\n  event Deposit(address indexed token, uint256 amount, uint256 value);\\n  event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n  event CreateDebt(\\n    address indexed debtor,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n  event RepayDebt(\\n    address indexed debtor,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n  event ReservesManaged(address indexed token, uint256 amount);\\n  event ReservesUpdated(uint256 indexed totalReserves);\\n  event ReservesAudited(uint256 indexed totalReserves);\\n  event RewardsMinted(\\n    address indexed caller,\\n    address indexed recipient,\\n    uint256 amount\\n  );\\n  event ChangeQueued(MANAGING indexed managing, address queued);\\n  event ChangeActivated(\\n    MANAGING indexed managing,\\n    address activated,\\n    bool result\\n  );\\n\\n  enum MANAGING {\\n    RESERVEDEPOSITOR,\\n    RESERVESPENDER,\\n    RESERVETOKEN,\\n    RESERVEMANAGER,\\n    LIQUIDITYDEPOSITOR,\\n    LIQUIDITYTOKEN,\\n    LIQUIDITYMANAGER,\\n    DEBTOR,\\n    REWARDMANAGER,\\n    SREQT\\n  }\\n\\n  address public immutable REQT;\\n  uint256 public immutable blocksNeededForQueue;\\n\\n  address[] public reserveTokens; // Push only, beware false-positives.\\n  mapping(address => bool) public isReserveToken;\\n  mapping(address => uint256) public reserveTokenQueue; // Delays changes to mapping.\\n\\n  address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveDepositor;\\n  mapping(address => uint256) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n  address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveSpender;\\n  mapping(address => uint256) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityTokens; // Push only, beware false-positives.\\n  mapping(address => bool) public isLiquidityToken;\\n  mapping(address => uint256) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isLiquidityDepositor;\\n  mapping(address => uint256) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n  mapping(address => address) public bondCalculator; // bond calculator for liquidity token\\n\\n  address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveManager;\\n  mapping(address => uint256) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isLiquidityManager;\\n  mapping(address => uint256) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n  address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isDebtor;\\n  mapping(address => uint256) public debtorQueue; // Delays changes to mapping.\\n  mapping(address => uint256) public debtorBalance;\\n\\n  address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isRewardManager;\\n  mapping(address => uint256) public rewardManagerQueue; // Delays changes to mapping.\\n\\n  address public sREQT;\\n  uint256 public sREQTQueue; // Delays change to sREQT address\\n\\n  uint256 public totalReserves; // Risk-free value of all assets\\n  uint256 public totalDebt;\\n\\n  constructor(\\n    address _REQT,\\n    address _DAI,\\n    address _TUSD,\\n    address _REQTDAI,\\n    uint256 _blocksNeededForQueue\\n  ) {\\n    require(_REQT != address(0));\\n    REQT = _REQT;\\n\\n    isReserveToken[_DAI] = true;\\n    reserveTokens.push(_DAI);\\n\\n    isReserveToken[_TUSD] = true;\\n    reserveTokens.push(_TUSD);\\n\\n    isLiquidityToken[_REQTDAI] = true;\\n    liquidityTokens.push(_REQTDAI);\\n\\n    blocksNeededForQueue = _blocksNeededForQueue;\\n  }\\n\\n  /**\\n        @notice allow approved address to deposit an asset for REQT\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n  function deposit(\\n    uint256 _amount,\\n    address _token,\\n    uint256 _profit\\n  ) external returns (uint256 send_) {\\n    require(isReserveToken[_token] || isLiquidityToken[_token], \\\"Not accepted\\\");\\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    if (isReserveToken[_token]) {\\n      require(isReserveDepositor[msg.sender], \\\"Not approved\\\");\\n    } else {\\n      require(isLiquidityDepositor[msg.sender], \\\"Not approved\\\");\\n    }\\n\\n    uint256 value = valueOf(_token, _amount);\\n    // mint REQT needed and store amount of rewards for distribution\\n    send_ = value - _profit;\\n    IERC20Mintable(REQT).mint(msg.sender, send_);\\n\\n    totalReserves += value;\\n    emit ReservesUpdated(totalReserves);\\n\\n    emit Deposit(_token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to burn REQT for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function withdraw(uint256 _amount, address _token) external {\\n    require(isReserveToken[_token], \\\"Not accepted\\\"); // Only reserves can be used for redemptions\\n    require(isReserveSpender[msg.sender] == true, \\\"Not approved\\\");\\n\\n    uint256 value = valueOf(_token, _amount);\\n    IREQTERC20(REQT).burnFrom(msg.sender, value);\\n\\n    totalReserves -= value;\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n    emit Withdrawal(_token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function incurDebt(uint256 _amount, address _token) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n    require(isReserveToken[_token], \\\"Not accepted\\\");\\n\\n    uint256 value = valueOf(_token, _amount);\\n\\n    uint256 maximumDebt = IERC20(sREQT).balanceOf(msg.sender); // Can only borrow against sREQT held\\n    uint256 availableDebt = maximumDebt - debtorBalance[msg.sender];\\n    require(value <= availableDebt, \\\"Exceeds debt limit\\\");\\n\\n    debtorBalance[msg.sender] += value;\\n    totalDebt += value;\\n\\n    totalReserves -= value;\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).transfer(msg.sender, _amount);\\n\\n    emit CreateDebt(msg.sender, _token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function repayDebtWithReserve(uint256 _amount, address _token) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n    require(isReserveToken[_token], \\\"Not accepted\\\");\\n\\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    uint256 value = valueOf(_token, _amount);\\n    debtorBalance[msg.sender] -= value;\\n    totalDebt -= value;\\n\\n    totalReserves += value;\\n    emit ReservesUpdated(totalReserves);\\n\\n    emit RepayDebt(msg.sender, _token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to repay borrowed reserves with REQT\\n        @param _amount uint\\n     */\\n  function repayDebtWithREQT(uint256 _amount) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n\\n    IREQTERC20(REQT).burnFrom(msg.sender, _amount);\\n\\n    debtorBalance[msg.sender] -= _amount;\\n    totalDebt -= _amount;\\n\\n    emit RepayDebt(msg.sender, REQT, _amount, _amount);\\n  }\\n\\n  /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n  function manage(address _token, uint256 _amount) external {\\n    if (isLiquidityToken[_token]) {\\n      require(isLiquidityManager[msg.sender], \\\"Not approved\\\");\\n    } else {\\n      require(isReserveManager[msg.sender], \\\"Not approved\\\");\\n    }\\n\\n    uint256 value = valueOf(_token, _amount);\\n    require(value <= excessReserves(), \\\"Insufficient reserves\\\");\\n\\n    totalReserves -= value;\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n    emit ReservesManaged(_token, _amount);\\n  }\\n\\n  /**\\n        @notice send epoch reward to staking contract\\n     */\\n  function mintRewards(address _recipient, uint256 _amount) external {\\n    require(isRewardManager[msg.sender], \\\"Not approved\\\");\\n    require(_amount <= excessReserves(), \\\"Insufficient reserves\\\");\\n\\n    IERC20Mintable(REQT).mint(_recipient, _amount);\\n\\n    emit RewardsMinted(msg.sender, _recipient, _amount);\\n  }\\n\\n  /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n  function excessReserves() public view returns (uint256) {\\n    return totalReserves - (IERC20(REQT).totalSupply() - totalDebt);\\n  }\\n\\n  /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n  function auditReserves() external onlyManager {\\n    uint256 reserves;\\n    for (uint256 i = 0; i < reserveTokens.length; i++) {\\n      reserves += valueOf(\\n        reserveTokens[i],\\n        IERC20(reserveTokens[i]).balanceOf(address(this))\\n      );\\n    }\\n    for (uint256 i = 0; i < liquidityTokens.length; i++) {\\n      reserves += valueOf(\\n        liquidityTokens[i],\\n        IERC20(liquidityTokens[i]).balanceOf(address(this))\\n      );\\n    }\\n    totalReserves = reserves;\\n    emit ReservesUpdated(reserves);\\n    emit ReservesAudited(reserves);\\n  }\\n\\n  /**\\n        @notice returns REQT valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n  function valueOf(address _token, uint256 _amount)\\n    public\\n    view\\n    override\\n    returns (uint256 value_)\\n  {\\n    if (isReserveToken[_token]) {\\n      // convert amount to match REQT decimals\\n      value_ =\\n        _amount *\\n        (10**(IERC20(REQT).decimals() - IERC20(_token).decimals()));\\n    }  else if (isLiquidityToken[_token]) {\\n      value_ = IBondingCalculator(bondCalculator[_token]).valuation(\\n        _token,\\n        _amount\\n      );\\n    }\\n  }\\n  \\n  /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n  function queue(MANAGING _managing, address _address)\\n    external\\n    onlyManager\\n    returns (bool)\\n  {\\n    require(_address != address(0));\\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n      // 0\\n      reserveDepositorQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.RESERVESPENDER) {\\n      // 1\\n      reserveSpenderQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.RESERVETOKEN) {\\n      // 2\\n      reserveTokenQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\\n      // 3\\n      ReserveManagerQueue[_address] = block.number + blocksNeededForQueue * 2;\\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n      // 4\\n      LiquidityDepositorQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n      // 5\\n      LiquidityTokenQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n      // 6\\n      LiquidityManagerQueue[_address] = block.number + blocksNeededForQueue * 2;\\n    } else if (_managing == MANAGING.DEBTOR) {\\n      // 7\\n      debtorQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.REWARDMANAGER) {\\n      // 8\\n      rewardManagerQueue[_address] = block.number + blocksNeededForQueue;\\n    } else if (_managing == MANAGING.SREQT) {\\n      // 9\\n      sREQTQueue = block.number + blocksNeededForQueue;\\n    } else return false;\\n\\n    emit ChangeQueued(_managing, _address);\\n    return true;\\n  }\\n\\n  /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n  function toggle(\\n    MANAGING _managing,\\n    address _address,\\n    address _calculator\\n  ) external onlyManager returns (bool) {\\n    require(_address != address(0));\\n    bool result;\\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n      // 0\\n      if (requirements(reserveDepositorQueue, isReserveDepositor, _address)) {\\n        reserveDepositorQueue[_address] = 0;\\n        if (!listContains(reserveDepositors, _address)) {\\n          reserveDepositors.push(_address);\\n        }\\n      }\\n      result = !isReserveDepositor[_address];\\n      isReserveDepositor[_address] = result;\\n    } else if (_managing == MANAGING.RESERVESPENDER) {\\n      // 1\\n      if (requirements(reserveSpenderQueue, isReserveSpender, _address)) {\\n        reserveSpenderQueue[_address] = 0;\\n        if (!listContains(reserveSpenders, _address)) {\\n          reserveSpenders.push(_address);\\n        }\\n      }\\n      result = !isReserveSpender[_address];\\n      isReserveSpender[_address] = result;\\n    } else if (_managing == MANAGING.RESERVETOKEN) {\\n      // 2\\n      if (requirements(reserveTokenQueue, isReserveToken, _address)) {\\n        reserveTokenQueue[_address] = 0;\\n        if (!listContains(reserveTokens, _address)) {\\n          reserveTokens.push(_address);\\n        }\\n      }\\n      result = !isReserveToken[_address];\\n      isReserveToken[_address] = result;\\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\\n      // 3\\n      if (requirements(ReserveManagerQueue, isReserveManager, _address)) {\\n        reserveManagers.push(_address);\\n        ReserveManagerQueue[_address] = 0;\\n        if (!listContains(reserveManagers, _address)) {\\n          reserveManagers.push(_address);\\n        }\\n      }\\n      result = !isReserveManager[_address];\\n      isReserveManager[_address] = result;\\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n      // 4\\n      if (\\n        requirements(LiquidityDepositorQueue, isLiquidityDepositor, _address)\\n      ) {\\n        liquidityDepositors.push(_address);\\n        LiquidityDepositorQueue[_address] = 0;\\n        if (!listContains(liquidityDepositors, _address)) {\\n          liquidityDepositors.push(_address);\\n        }\\n      }\\n      result = !isLiquidityDepositor[_address];\\n      isLiquidityDepositor[_address] = result;\\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n      // 5\\n      if (requirements(LiquidityTokenQueue, isLiquidityToken, _address)) {\\n        LiquidityTokenQueue[_address] = 0;\\n        if (!listContains(liquidityTokens, _address)) {\\n          liquidityTokens.push(_address);\\n        }\\n      }\\n      result = !isLiquidityToken[_address];\\n      isLiquidityToken[_address] = result;\\n      bondCalculator[_address] = _calculator;\\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n      // 6\\n      if (requirements(LiquidityManagerQueue, isLiquidityManager, _address)) {\\n        LiquidityManagerQueue[_address] = 0;\\n        if (!listContains(liquidityManagers, _address)) {\\n          liquidityManagers.push(_address);\\n        }\\n      }\\n      result = !isLiquidityManager[_address];\\n      isLiquidityManager[_address] = result;\\n    } else if (_managing == MANAGING.DEBTOR) {\\n      // 7\\n      if (requirements(debtorQueue, isDebtor, _address)) {\\n        debtorQueue[_address] = 0;\\n        if (!listContains(debtors, _address)) {\\n          debtors.push(_address);\\n        }\\n      }\\n      result = !isDebtor[_address];\\n      isDebtor[_address] = result;\\n    } else if (_managing == MANAGING.REWARDMANAGER) {\\n      // 8\\n      if (requirements(rewardManagerQueue, isRewardManager, _address)) {\\n        rewardManagerQueue[_address] = 0;\\n        if (!listContains(rewardManagers, _address)) {\\n          rewardManagers.push(_address);\\n        }\\n      }\\n      result = !isRewardManager[_address];\\n      isRewardManager[_address] = result;\\n    } else if (_managing == MANAGING.SREQT) {\\n      // 9\\n      sREQTQueue = 0;\\n      sREQT = _address;\\n      result = true;\\n    } else return false;\\n\\n    emit ChangeActivated(_managing, _address, result);\\n    return true;\\n  }\\n\\n  /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n  function requirements(\\n    mapping(address => uint256) storage queue_,\\n    mapping(address => bool) storage status_,\\n    address _address\\n  ) internal view returns (bool) {\\n    if (!status_[_address]) {\\n      require(queue_[_address] != 0, \\\"Must queue\\\");\\n      require(queue_[_address] <= block.number, \\\"Queue not expired\\\");\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n  function listContains(address[] storage _list, address _token)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    for (uint256 i = 0; i < _list.length; i++) {\\n      if (_list[i] == _token) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xcfebd594510995fe4b8fa9e8802e038f19b5493e0073b04a4b3180d346b77f58\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc8de46b5781a713fd63eb204be9a9a821aab6468f5ca504ec90c1aec6b8a3bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20Mintable {\\n  function mint(uint256 amount_) external;\\n\\n  function mint(address account_, uint256 ammount_) external;\\n}\\n\",\"keccak256\":\"0xff07216b6d8b8beed9a96756cc27c0268468fa37f94b777d1a553f9abad63147\",\"license\":\"MIT\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBondingCalculator {\\n  function valuation(address pair_, uint256 amount_)\\n    external\\n    view\\n    returns (uint256 _value);\\n}\\n\",\"keccak256\":\"0x7dfca3a4d16834d9182b3521f3b7ce4513e66099ca8499110283a01117171a83\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IManageable {\\n  function policy() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\",\"keccak256\":\"0xa295012398e6b24514d628e22bc6aee9a4df737961dd646d728e676123034d12\",\"license\":\"MIT\"},\"contracts/interfaces/IREQTERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IREQTERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xc7c0d98be1bbcb88f68f065f1d54a55ab573459fb40f8b3303512f7f8e95356f\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ITreasury {\\n  function deposit(\\n    uint256 _amount,\\n    address _token,\\n    uint256 _profit\\n  ) external returns (uint256 send_);\\n\\n  function valueOf(address _token, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 value_);\\n\\n  function mintRewards(address _recipient, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7eafe12d901ec2bfd90939cdb6d161b0fe615336382b7edf3b930c416d2485d2\",\"license\":\"MIT\"},\"contracts/libraries/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\ncontract Manageable is IManageable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function policy() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyPolicy() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\",\"keccak256\":\"0x5f70377ccfe343b704282ca2b360251536e6640166290e6f99b60bc4634ed5a2\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      address(token),\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   *\\n   * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n   */\\n  function _callOptionalReturn(address token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves.\\n    (bool success, bytes memory returndata) = token.call(data);\\n\\n    // If the low-level call didn't succeed we return whatever was returned from it.\\n    assembly {\\n      if eq(success, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n    RequiemErrors._require(\\n      returndata.length == 0 || abi.decode(returndata, (bool)),\\n      Errors.SAFE_ERC20_CALL_FAILED\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc2deaa0858d31692b977c478b7139e60fd3084eff4ed832ba55f6c8d890ec489\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary FixedPoint {\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  struct uq144x112 {\\n    uint256 _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\\n  uint256 private constant Q224 =\\n    0x100000000000000000000000000000000000000000000000000000000;\\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  function decode112with18(uq112x112 memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(self._x) / 5192296858534827;\\n  }\\n\\n  function fraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (uq112x112 memory)\\n  {\\n    require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n    if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n    if (numerator <= type(uint144).max) {\\n      uint256 result = (numerator << RESOLUTION) / denominator;\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    } else {\\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n      require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n      return uq112x112(uint224(result));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1458dee48a18e010fc603e371c30ead771eaff8b1ead78af037c5a6a6a285e72\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable no-inline-assembly, reason-string, max-line-length\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2603e02c3be8e366637ac7b8e1d84b8b896b191ce5e25cc0fa6e6d395e832ff1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620031bd380380620031bd833981016040819052620000349162000195565b600080546001600160a01b0319163390811782556040519091907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36001600160a01b0385166200008757600080fd5b6001600160a01b0394851660805292841660008181526003602090815260408083208054600160ff1991821681179092556002805480840182557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90810180546001600160a01b03199081169099179055988b168087528487208054841685179055815480850190925598018054871690981790975594909716808352600c90915295812080549094168317909355600b805492830181559092527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805490911690921790915560a052620001fc565b80516001600160a01b03811681146200019057600080fd5b919050565b600080600080600060a08688031215620001ae57600080fd5b620001b98662000178565b9450620001c96020870162000178565b9350620001d96040870162000178565b9250620001e96060870162000178565b9150608086015190509295509295909350565b60805160a051612f2462000299600039600081816106cc01528181611aba01528181611b1c01528181611b7e01528181611be001528181611c4d01528181611caf01528181611d1101528181611d7e01528181611de00152611e4201526000818161030f0152818161089f01528181610b9801528181610f3201528181611394015281816114460152818161160901526118240152612f246000f3fe608060405234801561001057600080fd5b50600436106102f05760003560e01c806387d67dff1161019d578063d031370b116100e9578063ee4e19a1116100a2578063fbfd393b1161007c578063fbfd393b146107b0578063fc7b9c18146107c3578063fd1ec010146107cc578063fff9ee87146107df57600080fd5b8063ee4e19a11461075a578063fafbbc671461077d578063fb9395881461079057600080fd5b8063d031370b146106b4578063d07f390f146106c7578063d796ffb8146106ee578063df89b34414610701578063e83afee314610724578063ebd83cd81461073757600080fd5b8063a569e57111610156578063b5b1d56011610130578063b5b1d5601461064e578063bc157ac114610661578063c24ad43e14610674578063cd85641a1461069457600080fd5b8063a569e571146105eb578063ab319c9a1461060e578063b1bd38b01461062e57600080fd5b806387d67dff146105495780638f59c7271461056c5780638f6a7b571461058c5780638f840ddd1461059f578063932cc8c3146105a8578063a1210a2d146105c857600080fd5b80632b7ce5001161025c5780635a96ac0a116102155780636b5e40a7116101ef5780636b5e40a7146104f057806370a0502a14610503578063788c6c0114610516578063869871bf1461053657600080fd5b80635a96ac0a146104b257806368c31dd5146104ba5780636a20de92146104dd57600080fd5b80632b7ce50014610445578063437f79121461044d57806346f68ee9146104605780634e83423c146104735780634f997d581461049657806357fba4c3146104a957600080fd5b80630b0eee30116102ae5780630b0eee30146103a85780630c3513a8146103bb578063124154ca146103c357806312422d23146103f65780631af4da70146104095780631eec5a9a1461043257600080fd5b8062f714ce146102f557806302bb41e51461030a5780630505c8c91461034e5780630619aff11461035f578063089208d814610372578063094a86511461037a575b600080fd5b610308610303366004612ab8565b6107ff565b005b6103317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b0316610331565b61033161036d366004612ae4565b610992565b6103086109bc565b61039a610388366004612afd565b601b6020526000908152604090205481565b604051908152602001610345565b6103086103b6366004612b18565b610a30565b61039a610b91565b6103e66103d1366004612afd565b60066020526000908152604090205460ff1681565b6040519015158152602001610345565b610308610404366004612ab8565b610c34565b610331610417366004612afd565b6011602052600090815260409020546001600160a01b031681565b61039a610440366004612b18565b610ead565b610308611087565b61033161045b366004612ae4565b61124f565b61030861046e366004612afd565b61125f565b6103e6610481366004612afd565b601d6020526000908152604090205460ff1681565b6103086104a4366004612ae4565b611349565b61039a60205481565b61030861149f565b6103e66104c8366004612afd565b60036020526000908152604090205460ff1681565b6103086104eb366004612b18565b611565565b6103316104fe366004612ae4565b6116a9565b610331610511366004612ae4565b6116b9565b61039a610524366004612afd565b60046020526000908152604090205481565b610331610544366004612ae4565b6116c9565b6103e6610557366004612afd565b60096020526000908152604090205460ff1681565b61039a61057a366004612afd565b600d6020526000908152604090205481565b61033161059a366004612ae4565b6116d9565b61039a60215481565b61039a6105b6366004612afd565b60076020526000908152604090205481565b6103e66105d6366004612afd565b600f6020526000908152604090205460ff1681565b6103e66105f9366004612afd565b600c6020526000908152604090205460ff1681565b61039a61061c366004612afd565b60176020526000908152604090205481565b61039a61063c366004612afd565b60146020526000908152604090205481565b61033161065c366004612ae4565b6116e9565b61039a61066f366004612b42565b6116f9565b61039a610682366004612afd565b600a6020526000908152604090205481565b61039a6106a2366004612afd565b601a6020526000908152604090205481565b6103316106c2366004612ae4565b611905565b61039a7f000000000000000000000000000000000000000000000000000000000000000081565b6103086106fc366004612ab8565b611915565b6103e661070f366004612afd565b60166020526000908152604090205460ff1681565b6103e6610732366004612b86565b611a5d565b6103e6610745366004612afd565b60136020526000908152604090205460ff1681565b6103e6610768366004612afd565b60196020526000908152604090205460ff1681565b601f54610331906001600160a01b031681565b61039a61079e366004612afd565b601e6020526000908152604090205481565b6103e66107be366004612bb0565b611ece565b61039a60225481565b6103316107da366004612ae4565b6127a7565b61039a6107ed366004612afd565b60106020526000908152604090205481565b6001600160a01b03811660009081526003602052604090205460ff166108405760405162461bcd60e51b815260040161083790612bf3565b60405180910390fd5b3360009081526009602052604090205460ff1615156001146108745760405162461bcd60e51b815260040161083790612c19565b60006108808284610ead565b60405163079cc67960e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b5050505080602160008282546109159190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a26109486001600160a01b03831633856127b7565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb91015b60405180910390a2505050565b601281815481106109a257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146109e65760405162461bcd60e51b815260040161083790612c6c565b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6001600160a01b0382166000908152600c602052604090205460ff1615610a85573360009081526016602052604090205460ff16610a805760405162461bcd60e51b815260040161083790612c19565b610ab4565b3360009081526013602052604090205460ff16610ab45760405162461bcd60e51b815260040161083790612c19565b6000610ac08383610ead565b9050610aca610b91565b811115610b115760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e7420726573657276657360581b6044820152606401610837565b8060216000828254610b239190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a2610b566001600160a01b03841633846127b7565b826001600160a01b03167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd808360405161098591815260200190565b60006022547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612ca1565b610c229190612c55565b602154610c2f9190612c55565b905090565b3360009081526019602052604090205460ff16610c635760405162461bcd60e51b815260040161083790612c19565b6001600160a01b03811660009081526003602052604090205460ff16610c9b5760405162461bcd60e51b815260040161083790612bf3565b6000610ca78284610ead565b601f546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190612ca1565b336000908152601b602052604081205491925090610d379083612c55565b905080831115610d7e5760405162461bcd60e51b8152602060048201526012602482015271115e18d959591cc81919589d081b1a5b5a5d60721b6044820152606401610837565b336000908152601b602052604081208054859290610d9d908490612cba565b925050819055508260226000828254610db69190612cba565b925050819055508260216000828254610dcf9190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a260405163a9059cbb60e01b8152336004820152602481018690526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190612cd2565b5060408051868152602081018590526001600160a01b0386169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d6910160405180910390a35050505050565b6001600160a01b03821660009081526003602052604081205460ff1615610fd857826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f309190612cf4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190612cf4565b610fbc9190612d17565b610fc790600a612e1e565b610fd19083612e2d565b9050611081565b6001600160a01b0383166000908152600c602052604090205460ff1615611081576001600160a01b0383811660008181526011602052604090819020549051634249719f60e01b815260048101929092526024820185905290911690634249719f90604401602060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190612ca1565b90505b92915050565b6000546001600160a01b031633146110b15760405162461bcd60e51b815260040161083790612c6c565b6000805b60025481101561119457611176600282815481106110d5576110d5612e4c565b600091825260209091200154600280546001600160a01b03909216918490811061110157611101612e4c565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190612ca1565b6111809083612cba565b91508061118c81612e62565b9150506110b5565b5060005b600b54811015611202576111e4600b82815481106111b8576111b8612e4c565b600091825260209091200154600b80546001600160a01b03909216918490811061110157611101612e4c565b6111ee9083612cba565b9150806111fa81612e62565b915050611198565b5060218190556040518190600080516020612ecf83398151915290600090a260405181907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a250565b600881815481106109a257600080fd5b6000546001600160a01b031633146112895760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b0381166112ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610837565b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526019602052604090205460ff166113785760405162461bcd60e51b815260040161083790612c19565b60405163079cc67960e41b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b5050336000908152601b602052604081208054859450909250611418908490612c55565b9250508190555080602260008282546114319190612c55565b909155505060408051828152602081018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b6001546001600160a01b031633146115045760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206d757374206265206e6577206f776e657220746f2070756044820152611b1b60f21b6064820152608401610837565b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b336000908152601d602052604090205460ff166115945760405162461bcd60e51b815260040161083790612c19565b61159c610b91565b8111156115e35760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e7420726573657276657360581b6044820152606401610837565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561164d57600080fd5b505af1158015611661573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c9060200160405180910390a35050565b600581815481106109a257600080fd5b601581815481106109a257600080fd5b601881815481106109a257600080fd5b600e81815481106109a257600080fd5b601c81815481106109a257600080fd5b6001600160a01b03821660009081526003602052604081205460ff168061173857506001600160a01b0383166000908152600c602052604090205460ff165b6117545760405162461bcd60e51b815260040161083790612bf3565b6117696001600160a01b03841633308761281f565b6001600160a01b03831660009081526003602052604090205460ff16156117be573360009081526006602052604090205460ff166117b95760405162461bcd60e51b815260040161083790612c19565b6117ed565b336000908152600f602052604090205460ff166117ed5760405162461bcd60e51b815260040161083790612c19565b60006117f98486610ead565b90506118058382612c55565b6040516340c10f1960e01b8152336004820152602481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b50505050806021600082825461189a9190612cba565b9091555050602154604051600080516020612ecf83398151915290600090a260408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2509392505050565b600281815481106109a257600080fd5b3360009081526019602052604090205460ff166119445760405162461bcd60e51b815260040161083790612c19565b6001600160a01b03811660009081526003602052604090205460ff1661197c5760405162461bcd60e51b815260040161083790612bf3565b6119916001600160a01b03821633308561281f565b600061199d8284610ead565b336000908152601b60205260408120805492935083929091906119c1908490612c55565b9250508190555080602260008282546119da9190612c55565b9250508190555080602160008282546119f39190612cba565b9091555050602154604051600080516020612ecf83398151915290600090a260408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a3505050565b600080546001600160a01b03163314611a885760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b038216611a9b57600080fd5b6000836009811115611aaf57611aaf612e7d565b1415611afd57611adf7f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260076020526040902055611e77565b6001836009811115611b1157611b11612e7d565b1415611b5f57611b417f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152600a6020526040902055611e77565b6002836009811115611b7357611b73612e7d565b1415611bc157611ba37f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260046020526040902055611e77565b6003836009811115611bd557611bd5612e7d565b1415611c2e57611c067f00000000000000000000000000000000000000000000000000000000000000006002612e2d565b611c109043612cba565b6001600160a01b038316600090815260146020526040902055611e77565b6004836009811115611c4257611c42612e7d565b1415611c9057611c727f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260106020526040902055611e77565b6005836009811115611ca457611ca4612e7d565b1415611cf257611cd47f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152600d6020526040902055611e77565b6006836009811115611d0657611d06612e7d565b1415611d5f57611d377f00000000000000000000000000000000000000000000000000000000000000006002612e2d565b611d419043612cba565b6001600160a01b038316600090815260176020526040902055611e77565b6007836009811115611d7357611d73612e7d565b1415611dc157611da37f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152601a6020526040902055611e77565b6008836009811115611dd557611dd5612e7d565b1415611e2357611e057f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152601e6020526040902055611e77565b6009836009811115611e3757611e37612e7d565b1415611e6f57611e677f000000000000000000000000000000000000000000000000000000000000000043612cba565b602055611e77565b506000611081565b826009811115611e8957611e89612e7d565b6040516001600160a01b03841681527f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf9060200160405180910390a250600192915050565b600080546001600160a01b03163314611ef95760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b038316611f0c57600080fd5b600080856009811115611f2157611f21612e7d565b1415611fdd57611f34600760068661285d565b15611fad576001600160a01b038416600090815260076020526040812055611f5d60058561293d565b611fad57600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600660205260409020805460ff81161560ff199091168117909155612745565b6001856009811115611ff157611ff1612e7d565b14156120ad57612004600a60098661285d565b1561207d576001600160a01b0384166000908152600a602052604081205561202d60088561293d565b61207d57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600960205260409020805460ff81161560ff199091168117909155612745565b60028560098111156120c1576120c1612e7d565b141561217d576120d4600460038661285d565b1561214d576001600160a01b0384166000908152600460205260408120556120fd60028561293d565b61214d57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600360205260409020805460ff81161560ff199091168117909155612745565b600385600981111561219157612191612e7d565b141561228a576121a4601460138661285d565b1561225a57601280546001810182557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b03871690811790915560009081526014602052604081205561220a908561293d565b61225a57601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601360205260409020805460ff81161560ff199091168117909155612745565b600485600981111561229e5761229e612e7d565b1415612397576122b16010600f8661285d565b1561236757600e80546001810182557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b038716908117909155600090815260106020526040812055612317908561293d565b61236757600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600f60205260409020805460ff81161560ff199091168117909155612745565b60058560098111156123ab576123ab612e7d565b1415612489576123be600d600c8661285d565b15612437576001600160a01b0384166000908152600d60205260408120556123e7600b8561293d565b61243757600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b038381166000908152600c60209081526040808320805460ff81161560ff199091168117909155601190925290912080546001600160a01b03191692851692909217909155612745565b600685600981111561249d5761249d612e7d565b1415612559576124b0601760168661285d565b15612529576001600160a01b0384166000908152601760205260408120556124d960158561293d565b61252957601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601660205260409020805460ff81161560ff199091168117909155612745565b600785600981111561256d5761256d612e7d565b141561262957612580601a60198661285d565b156125f9576001600160a01b0384166000908152601a60205260408120556125a960188561293d565b6125f957601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601960205260409020805460ff81161560ff199091168117909155612745565b600885600981111561263d5761263d612e7d565b14156126f957612650601e601d8661285d565b156126c9576001600160a01b0384166000908152601e6020526040812055612679601c8561293d565b6126c957601c80546001810182556000919091527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2110180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601d60205260409020805460ff81161560ff199091168117909155612745565b600985600981111561270d5761270d612e7d565b141561273b57506000602055601f80546001600160a01b0319166001600160a01b0385161790556001612745565b60009150506127a0565b84600981111561275757612757612e7d565b604080516001600160a01b038716815283151560208201527f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc477910160405180910390a260019150505b9392505050565b600b81815481106109a257600080fd5b6040516001600160a01b03831660248201526044810182905261281a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261299d565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526128579085906323b872dd60e01b906084016127e3565b50505050565b6001600160a01b03811660009081526020839052604081205460ff16612933576001600160a01b0382166000908152602085905260409020546128cf5760405162461bcd60e51b815260206004820152600a6024820152694d75737420717565756560b01b6044820152606401610837565b6001600160a01b03821660009081526020859052604090205443101561292b5760405162461bcd60e51b8152602060048201526011602482015270145d595d59481b9bdd08195e1c1a5c9959607a1b6044820152606401610837565b5060016127a0565b5060009392505050565b6000805b835481101561293357826001600160a01b031684828154811061296657612966612e4c565b6000918252602090912001546001600160a01b0316141561298b576001915050611081565b8061299581612e62565b915050612941565b600080836001600160a01b0316836040516129b89190612e93565b6000604051808303816000865af19150503d80600081146129f5576040519150601f19603f3d011682016040523d82523d6000602084013e6129fa565b606091505b50915091506000821415612a12573d6000803e3d6000fd5b612857815160001480612a34575081806020019051810190612a349190612cd2565b6101a281612a4557612a4581612a49565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b80356001600160a01b0381168114612ab357600080fd5b919050565b60008060408385031215612acb57600080fd5b82359150612adb60208401612a9c565b90509250929050565b600060208284031215612af657600080fd5b5035919050565b600060208284031215612b0f57600080fd5b61107e82612a9c565b60008060408385031215612b2b57600080fd5b612b3483612a9c565b946020939093013593505050565b600080600060608486031215612b5757600080fd5b83359250612b6760208501612a9c565b9150604084013590509250925092565b8035600a8110612ab357600080fd5b60008060408385031215612b9957600080fd5b612ba283612b77565b9150612adb60208401612a9c565b600080600060608486031215612bc557600080fd5b612bce84612b77565b9250612bdc60208501612a9c565b9150612bea60408501612a9c565b90509250925092565b6020808252600c908201526b139bdd081858d8d95c1d195960a21b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612c6757612c67612c3f565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612cb357600080fd5b5051919050565b60008219821115612ccd57612ccd612c3f565b500190565b600060208284031215612ce457600080fd5b815180151581146127a057600080fd5b600060208284031215612d0657600080fd5b815160ff811681146127a057600080fd5b600060ff821660ff841680821015612d3157612d31612c3f565b90039392505050565b600181815b80851115612d75578160001904821115612d5b57612d5b612c3f565b80851615612d6857918102915b93841c9390800290612d3f565b509250929050565b600082612d8c57506001611081565b81612d9957506000611081565b8160018114612daf5760028114612db957612dd5565b6001915050611081565b60ff841115612dca57612dca612c3f565b50506001821b611081565b5060208310610133831016604e8410600b8410161715612df8575081810a611081565b612e028383612d3a565b8060001904821115612e1657612e16612c3f565b029392505050565b600061107e60ff841683612d7d565b6000816000190483118215151615612e4757612e47612c3f565b500290565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e7657612e76612c3f565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000825160005b81811015612eb45760208186018101518583015201612e9a565b81811115612ec3576000828501525b50919091019291505056fe93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d66a26469706673582212207810ae4ed719d5d15ca22235e75abea68542186fd747d279d95cd1feb7c9c8d464736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f05760003560e01c806387d67dff1161019d578063d031370b116100e9578063ee4e19a1116100a2578063fbfd393b1161007c578063fbfd393b146107b0578063fc7b9c18146107c3578063fd1ec010146107cc578063fff9ee87146107df57600080fd5b8063ee4e19a11461075a578063fafbbc671461077d578063fb9395881461079057600080fd5b8063d031370b146106b4578063d07f390f146106c7578063d796ffb8146106ee578063df89b34414610701578063e83afee314610724578063ebd83cd81461073757600080fd5b8063a569e57111610156578063b5b1d56011610130578063b5b1d5601461064e578063bc157ac114610661578063c24ad43e14610674578063cd85641a1461069457600080fd5b8063a569e571146105eb578063ab319c9a1461060e578063b1bd38b01461062e57600080fd5b806387d67dff146105495780638f59c7271461056c5780638f6a7b571461058c5780638f840ddd1461059f578063932cc8c3146105a8578063a1210a2d146105c857600080fd5b80632b7ce5001161025c5780635a96ac0a116102155780636b5e40a7116101ef5780636b5e40a7146104f057806370a0502a14610503578063788c6c0114610516578063869871bf1461053657600080fd5b80635a96ac0a146104b257806368c31dd5146104ba5780636a20de92146104dd57600080fd5b80632b7ce50014610445578063437f79121461044d57806346f68ee9146104605780634e83423c146104735780634f997d581461049657806357fba4c3146104a957600080fd5b80630b0eee30116102ae5780630b0eee30146103a85780630c3513a8146103bb578063124154ca146103c357806312422d23146103f65780631af4da70146104095780631eec5a9a1461043257600080fd5b8062f714ce146102f557806302bb41e51461030a5780630505c8c91461034e5780630619aff11461035f578063089208d814610372578063094a86511461037a575b600080fd5b610308610303366004612ab8565b6107ff565b005b6103317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b0316610331565b61033161036d366004612ae4565b610992565b6103086109bc565b61039a610388366004612afd565b601b6020526000908152604090205481565b604051908152602001610345565b6103086103b6366004612b18565b610a30565b61039a610b91565b6103e66103d1366004612afd565b60066020526000908152604090205460ff1681565b6040519015158152602001610345565b610308610404366004612ab8565b610c34565b610331610417366004612afd565b6011602052600090815260409020546001600160a01b031681565b61039a610440366004612b18565b610ead565b610308611087565b61033161045b366004612ae4565b61124f565b61030861046e366004612afd565b61125f565b6103e6610481366004612afd565b601d6020526000908152604090205460ff1681565b6103086104a4366004612ae4565b611349565b61039a60205481565b61030861149f565b6103e66104c8366004612afd565b60036020526000908152604090205460ff1681565b6103086104eb366004612b18565b611565565b6103316104fe366004612ae4565b6116a9565b610331610511366004612ae4565b6116b9565b61039a610524366004612afd565b60046020526000908152604090205481565b610331610544366004612ae4565b6116c9565b6103e6610557366004612afd565b60096020526000908152604090205460ff1681565b61039a61057a366004612afd565b600d6020526000908152604090205481565b61033161059a366004612ae4565b6116d9565b61039a60215481565b61039a6105b6366004612afd565b60076020526000908152604090205481565b6103e66105d6366004612afd565b600f6020526000908152604090205460ff1681565b6103e66105f9366004612afd565b600c6020526000908152604090205460ff1681565b61039a61061c366004612afd565b60176020526000908152604090205481565b61039a61063c366004612afd565b60146020526000908152604090205481565b61033161065c366004612ae4565b6116e9565b61039a61066f366004612b42565b6116f9565b61039a610682366004612afd565b600a6020526000908152604090205481565b61039a6106a2366004612afd565b601a6020526000908152604090205481565b6103316106c2366004612ae4565b611905565b61039a7f000000000000000000000000000000000000000000000000000000000000000081565b6103086106fc366004612ab8565b611915565b6103e661070f366004612afd565b60166020526000908152604090205460ff1681565b6103e6610732366004612b86565b611a5d565b6103e6610745366004612afd565b60136020526000908152604090205460ff1681565b6103e6610768366004612afd565b60196020526000908152604090205460ff1681565b601f54610331906001600160a01b031681565b61039a61079e366004612afd565b601e6020526000908152604090205481565b6103e66107be366004612bb0565b611ece565b61039a60225481565b6103316107da366004612ae4565b6127a7565b61039a6107ed366004612afd565b60106020526000908152604090205481565b6001600160a01b03811660009081526003602052604090205460ff166108405760405162461bcd60e51b815260040161083790612bf3565b60405180910390fd5b3360009081526009602052604090205460ff1615156001146108745760405162461bcd60e51b815260040161083790612c19565b60006108808284610ead565b60405163079cc67960e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b5050505080602160008282546109159190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a26109486001600160a01b03831633856127b7565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb91015b60405180910390a2505050565b601281815481106109a257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146109e65760405162461bcd60e51b815260040161083790612c6c565b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6001600160a01b0382166000908152600c602052604090205460ff1615610a85573360009081526016602052604090205460ff16610a805760405162461bcd60e51b815260040161083790612c19565b610ab4565b3360009081526013602052604090205460ff16610ab45760405162461bcd60e51b815260040161083790612c19565b6000610ac08383610ead565b9050610aca610b91565b811115610b115760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e7420726573657276657360581b6044820152606401610837565b8060216000828254610b239190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a2610b566001600160a01b03841633846127b7565b826001600160a01b03167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd808360405161098591815260200190565b60006022547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612ca1565b610c229190612c55565b602154610c2f9190612c55565b905090565b3360009081526019602052604090205460ff16610c635760405162461bcd60e51b815260040161083790612c19565b6001600160a01b03811660009081526003602052604090205460ff16610c9b5760405162461bcd60e51b815260040161083790612bf3565b6000610ca78284610ead565b601f546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190612ca1565b336000908152601b602052604081205491925090610d379083612c55565b905080831115610d7e5760405162461bcd60e51b8152602060048201526012602482015271115e18d959591cc81919589d081b1a5b5a5d60721b6044820152606401610837565b336000908152601b602052604081208054859290610d9d908490612cba565b925050819055508260226000828254610db69190612cba565b925050819055508260216000828254610dcf9190612c55565b9091555050602154604051600080516020612ecf83398151915290600090a260405163a9059cbb60e01b8152336004820152602481018690526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190612cd2565b5060408051868152602081018590526001600160a01b0386169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d6910160405180910390a35050505050565b6001600160a01b03821660009081526003602052604081205460ff1615610fd857826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f309190612cf4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190612cf4565b610fbc9190612d17565b610fc790600a612e1e565b610fd19083612e2d565b9050611081565b6001600160a01b0383166000908152600c602052604090205460ff1615611081576001600160a01b0383811660008181526011602052604090819020549051634249719f60e01b815260048101929092526024820185905290911690634249719f90604401602060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190612ca1565b90505b92915050565b6000546001600160a01b031633146110b15760405162461bcd60e51b815260040161083790612c6c565b6000805b60025481101561119457611176600282815481106110d5576110d5612e4c565b600091825260209091200154600280546001600160a01b03909216918490811061110157611101612e4c565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190612ca1565b6111809083612cba565b91508061118c81612e62565b9150506110b5565b5060005b600b54811015611202576111e4600b82815481106111b8576111b8612e4c565b600091825260209091200154600b80546001600160a01b03909216918490811061110157611101612e4c565b6111ee9083612cba565b9150806111fa81612e62565b915050611198565b5060218190556040518190600080516020612ecf83398151915290600090a260405181907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a250565b600881815481106109a257600080fd5b6000546001600160a01b031633146112895760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b0381166112ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610837565b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526019602052604090205460ff166113785760405162461bcd60e51b815260040161083790612c19565b60405163079cc67960e41b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b5050336000908152601b602052604081208054859450909250611418908490612c55565b9250508190555080602260008282546114319190612c55565b909155505060408051828152602081018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b6001546001600160a01b031633146115045760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206d757374206265206e6577206f776e657220746f2070756044820152611b1b60f21b6064820152608401610837565b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b336000908152601d602052604090205460ff166115945760405162461bcd60e51b815260040161083790612c19565b61159c610b91565b8111156115e35760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e7420726573657276657360581b6044820152606401610837565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561164d57600080fd5b505af1158015611661573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c9060200160405180910390a35050565b600581815481106109a257600080fd5b601581815481106109a257600080fd5b601881815481106109a257600080fd5b600e81815481106109a257600080fd5b601c81815481106109a257600080fd5b6001600160a01b03821660009081526003602052604081205460ff168061173857506001600160a01b0383166000908152600c602052604090205460ff165b6117545760405162461bcd60e51b815260040161083790612bf3565b6117696001600160a01b03841633308761281f565b6001600160a01b03831660009081526003602052604090205460ff16156117be573360009081526006602052604090205460ff166117b95760405162461bcd60e51b815260040161083790612c19565b6117ed565b336000908152600f602052604090205460ff166117ed5760405162461bcd60e51b815260040161083790612c19565b60006117f98486610ead565b90506118058382612c55565b6040516340c10f1960e01b8152336004820152602481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b50505050806021600082825461189a9190612cba565b9091555050602154604051600080516020612ecf83398151915290600090a260408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2509392505050565b600281815481106109a257600080fd5b3360009081526019602052604090205460ff166119445760405162461bcd60e51b815260040161083790612c19565b6001600160a01b03811660009081526003602052604090205460ff1661197c5760405162461bcd60e51b815260040161083790612bf3565b6119916001600160a01b03821633308561281f565b600061199d8284610ead565b336000908152601b60205260408120805492935083929091906119c1908490612c55565b9250508190555080602260008282546119da9190612c55565b9250508190555080602160008282546119f39190612cba565b9091555050602154604051600080516020612ecf83398151915290600090a260408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a3505050565b600080546001600160a01b03163314611a885760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b038216611a9b57600080fd5b6000836009811115611aaf57611aaf612e7d565b1415611afd57611adf7f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260076020526040902055611e77565b6001836009811115611b1157611b11612e7d565b1415611b5f57611b417f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152600a6020526040902055611e77565b6002836009811115611b7357611b73612e7d565b1415611bc157611ba37f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260046020526040902055611e77565b6003836009811115611bd557611bd5612e7d565b1415611c2e57611c067f00000000000000000000000000000000000000000000000000000000000000006002612e2d565b611c109043612cba565b6001600160a01b038316600090815260146020526040902055611e77565b6004836009811115611c4257611c42612e7d565b1415611c9057611c727f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b038316600090815260106020526040902055611e77565b6005836009811115611ca457611ca4612e7d565b1415611cf257611cd47f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152600d6020526040902055611e77565b6006836009811115611d0657611d06612e7d565b1415611d5f57611d377f00000000000000000000000000000000000000000000000000000000000000006002612e2d565b611d419043612cba565b6001600160a01b038316600090815260176020526040902055611e77565b6007836009811115611d7357611d73612e7d565b1415611dc157611da37f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152601a6020526040902055611e77565b6008836009811115611dd557611dd5612e7d565b1415611e2357611e057f000000000000000000000000000000000000000000000000000000000000000043612cba565b6001600160a01b0383166000908152601e6020526040902055611e77565b6009836009811115611e3757611e37612e7d565b1415611e6f57611e677f000000000000000000000000000000000000000000000000000000000000000043612cba565b602055611e77565b506000611081565b826009811115611e8957611e89612e7d565b6040516001600160a01b03841681527f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf9060200160405180910390a250600192915050565b600080546001600160a01b03163314611ef95760405162461bcd60e51b815260040161083790612c6c565b6001600160a01b038316611f0c57600080fd5b600080856009811115611f2157611f21612e7d565b1415611fdd57611f34600760068661285d565b15611fad576001600160a01b038416600090815260076020526040812055611f5d60058561293d565b611fad57600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600660205260409020805460ff81161560ff199091168117909155612745565b6001856009811115611ff157611ff1612e7d565b14156120ad57612004600a60098661285d565b1561207d576001600160a01b0384166000908152600a602052604081205561202d60088561293d565b61207d57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600960205260409020805460ff81161560ff199091168117909155612745565b60028560098111156120c1576120c1612e7d565b141561217d576120d4600460038661285d565b1561214d576001600160a01b0384166000908152600460205260408120556120fd60028561293d565b61214d57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600360205260409020805460ff81161560ff199091168117909155612745565b600385600981111561219157612191612e7d565b141561228a576121a4601460138661285d565b1561225a57601280546001810182557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b03871690811790915560009081526014602052604081205561220a908561293d565b61225a57601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601360205260409020805460ff81161560ff199091168117909155612745565b600485600981111561229e5761229e612e7d565b1415612397576122b16010600f8661285d565b1561236757600e80546001810182557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b038716908117909155600090815260106020526040812055612317908561293d565b61236757600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152600f60205260409020805460ff81161560ff199091168117909155612745565b60058560098111156123ab576123ab612e7d565b1415612489576123be600d600c8661285d565b15612437576001600160a01b0384166000908152600d60205260408120556123e7600b8561293d565b61243757600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b038381166000908152600c60209081526040808320805460ff81161560ff199091168117909155601190925290912080546001600160a01b03191692851692909217909155612745565b600685600981111561249d5761249d612e7d565b1415612559576124b0601760168661285d565b15612529576001600160a01b0384166000908152601760205260408120556124d960158561293d565b61252957601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601660205260409020805460ff81161560ff199091168117909155612745565b600785600981111561256d5761256d612e7d565b141561262957612580601a60198661285d565b156125f9576001600160a01b0384166000908152601a60205260408120556125a960188561293d565b6125f957601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601960205260409020805460ff81161560ff199091168117909155612745565b600885600981111561263d5761263d612e7d565b14156126f957612650601e601d8661285d565b156126c9576001600160a01b0384166000908152601e6020526040812055612679601c8561293d565b6126c957601c80546001810182556000919091527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2110180546001600160a01b0319166001600160a01b0386161790555b506001600160a01b0383166000908152601d60205260409020805460ff81161560ff199091168117909155612745565b600985600981111561270d5761270d612e7d565b141561273b57506000602055601f80546001600160a01b0319166001600160a01b0385161790556001612745565b60009150506127a0565b84600981111561275757612757612e7d565b604080516001600160a01b038716815283151560208201527f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc477910160405180910390a260019150505b9392505050565b600b81815481106109a257600080fd5b6040516001600160a01b03831660248201526044810182905261281a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261299d565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526128579085906323b872dd60e01b906084016127e3565b50505050565b6001600160a01b03811660009081526020839052604081205460ff16612933576001600160a01b0382166000908152602085905260409020546128cf5760405162461bcd60e51b815260206004820152600a6024820152694d75737420717565756560b01b6044820152606401610837565b6001600160a01b03821660009081526020859052604090205443101561292b5760405162461bcd60e51b8152602060048201526011602482015270145d595d59481b9bdd08195e1c1a5c9959607a1b6044820152606401610837565b5060016127a0565b5060009392505050565b6000805b835481101561293357826001600160a01b031684828154811061296657612966612e4c565b6000918252602090912001546001600160a01b0316141561298b576001915050611081565b8061299581612e62565b915050612941565b600080836001600160a01b0316836040516129b89190612e93565b6000604051808303816000865af19150503d80600081146129f5576040519150601f19603f3d011682016040523d82523d6000602084013e6129fa565b606091505b50915091506000821415612a12573d6000803e3d6000fd5b612857815160001480612a34575081806020019051810190612a349190612cd2565b6101a281612a4557612a4581612a49565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b80356001600160a01b0381168114612ab357600080fd5b919050565b60008060408385031215612acb57600080fd5b82359150612adb60208401612a9c565b90509250929050565b600060208284031215612af657600080fd5b5035919050565b600060208284031215612b0f57600080fd5b61107e82612a9c565b60008060408385031215612b2b57600080fd5b612b3483612a9c565b946020939093013593505050565b600080600060608486031215612b5757600080fd5b83359250612b6760208501612a9c565b9150604084013590509250925092565b8035600a8110612ab357600080fd5b60008060408385031215612b9957600080fd5b612ba283612b77565b9150612adb60208401612a9c565b600080600060608486031215612bc557600080fd5b612bce84612b77565b9250612bdc60208501612a9c565b9150612bea60408501612a9c565b90509250925092565b6020808252600c908201526b139bdd081858d8d95c1d195960a21b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612c6757612c67612c3f565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612cb357600080fd5b5051919050565b60008219821115612ccd57612ccd612c3f565b500190565b600060208284031215612ce457600080fd5b815180151581146127a057600080fd5b600060208284031215612d0657600080fd5b815160ff811681146127a057600080fd5b600060ff821660ff841680821015612d3157612d31612c3f565b90039392505050565b600181815b80851115612d75578160001904821115612d5b57612d5b612c3f565b80851615612d6857918102915b93841c9390800290612d3f565b509250929050565b600082612d8c57506001611081565b81612d9957506000611081565b8160018114612daf5760028114612db957612dd5565b6001915050611081565b60ff841115612dca57612dca612c3f565b50506001821b611081565b5060208310610133831016604e8410600b8410161715612df8575081810a611081565b612e028383612d3a565b8060001904821115612e1657612e16612c3f565b029392505050565b600061107e60ff841683612d7d565b6000816000190483118215151615612e4757612e47612c3f565b500290565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e7657612e76612c3f565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000825160005b81811015612eb45760208186018101518583015201612e9a565b81811115612ec3576000828501525b50919091019291505056fe93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d66a26469706673582212207810ae4ed719d5d15ca22235e75abea68542186fd747d279d95cd1feb7c9c8d464736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint",
          "_profit": "uint",
          "_token": "address"
        },
        "returns": {
          "send_": "uint"
        }
      },
      "excessReserves()": {
        "returns": {
          "_0": "uint"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "queue(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "repayDebtWithREQT(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "toggle(uint8,address,address)": {
        "params": {
          "_address": "address",
          "_calculator": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "valueOf(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        },
        "returns": {
          "value_": "uint"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for REQT"
      },
      "excessReserves()": {
        "notice": "returns excess reserves not backing tokens"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mintRewards(address,uint256)": {
        "notice": "send epoch reward to staking contract"
      },
      "queue(uint8,address)": {
        "notice": "queue address to change boolean in mapping"
      },
      "repayDebtWithREQT(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with REQT"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "toggle(uint8,address,address)": {
        "notice": "verify queue then set boolean in mapping"
      },
      "valueOf(address,uint256)": {
        "notice": "returns REQT valuation of asset"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn REQT for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11805,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11807,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7267,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7271,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isReserveToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7275,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveTokenQueue",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7278,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveDepositors",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7282,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isReserveDepositor",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7286,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveDepositorQueue",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7289,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveSpenders",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7293,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isReserveSpender",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7297,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveSpenderQueue",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7300,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "liquidityTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7304,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isLiquidityToken",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7308,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "LiquidityTokenQueue",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7311,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "liquidityDepositors",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7315,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isLiquidityDepositor",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7319,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "LiquidityDepositorQueue",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7323,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "bondCalculator",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7326,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "reserveManagers",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7330,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isReserveManager",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7334,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "ReserveManagerQueue",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7337,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "liquidityManagers",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7341,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isLiquidityManager",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7345,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "LiquidityManagerQueue",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7348,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "debtors",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7352,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isDebtor",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7356,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "debtorQueue",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7360,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "debtorBalance",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7363,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "rewardManagers",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7367,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "isRewardManager",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7371,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "rewardManagerQueue",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7373,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "sREQT",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 7375,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "sREQTQueue",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 7377,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "totalReserves",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 7379,
        "contract": "contracts/RequiemTreasury.sol:RequiemTreasury",
        "label": "totalDebt",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
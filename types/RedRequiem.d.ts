/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RedRequiemInterface extends ethers.utils.Interface {
  functions: {
    "MAXDAYS()": FunctionFragment;
    "MAXTIME()": FunctionFragment;
    "MAX_WITHDRAWAL_PENALTY()": FunctionFragment;
    "MINTIME()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "REF_DATE()": FunctionFragment;
    "YEAR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "create_lock(uint256,uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "earlyWithdrawPenaltyRate()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "emergencyWithdrawAll()": FunctionFragment;
    "get_amount_minted(uint256,uint256)": FunctionFragment;
    "get_locks(address)": FunctionFragment;
    "get_minted_for_lock(address,uint256)": FunctionFragment;
    "get_minted_for_locks(address)": FunctionFragment;
    "get_share(address)": FunctionFragment;
    "get_voting_power(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increase_position(uint256,uint256,address)": FunctionFragment;
    "increase_time_to_maturity(uint256,uint256,uint256)": FunctionFragment;
    "lock_exists(address,uint256)": FunctionFragment;
    "lockedPosition(address,uint256)": FunctionFragment;
    "lockedToken()": FunctionFragment;
    "locked_of(address,uint256)": FunctionFragment;
    "minLockedAmount()": FunctionFragment;
    "mintedForLock(address,uint256)": FunctionFragment;
    "multipliers(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyCollector()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEarlyWithdrawPenaltyRate(uint256)": FunctionFragment;
    "setMinLockedAmount(uint256)": FunctionFragment;
    "setPenaltyCollector(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFullLock(uint256,address)": FunctionFragment;
    "transferLockShare(uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "voting_power_locked_days(uint256,uint256)": FunctionFragment;
    "voting_power_unlock_time(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAXDAYS", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAXTIME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAWAL_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINTIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "REF_DATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "YEAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdrawPenaltyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_amount_minted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_locks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_minted_for_lock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_minted_for_locks",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "get_share", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_voting_power",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_position",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_time_to_maturity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_exists",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "locked_of",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedForLock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multipliers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyWithdrawPenaltyRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLockedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFullLock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLockShare",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_locked_days",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAXDAYS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAXTIME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAWAL_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINTIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REF_DATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YEAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdrawPenaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_amount_minted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_minted_for_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_minted_for_locks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_share", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_voting_power",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_position",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_time_to_maturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_exists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked_of", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedForLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyWithdrawPenaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFullLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLockShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_locked_days",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "EarlyWithdrawPenaltySet(uint256)": EventFragment;
    "MinLockedAmountSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PenaltyCollectorSet(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarlyWithdrawPenaltySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinLockedAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PenaltyCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    provider: string;
    value: BigNumber;
    locktime: BigNumber;
    timestamp: BigNumber;
  }
>;

export type EarlyWithdrawPenaltySetEvent = TypedEvent<
  [BigNumber] & { penalty: BigNumber }
>;

export type MinLockedAmountSetEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PenaltyCollectorSetEvent = TypedEvent<[string] & { addr: string }>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    provider: string;
    value: BigNumber;
    timestamp: BigNumber;
  }
>;

export class RedRequiem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RedRequiemInterface;

  functions: {
    MAXDAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REF_DATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create_lock(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earlyWithdrawPenaltyRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_amount_minted(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          end: BigNumber;
          minted: BigNumber;
          multiplier: BigNumber;
        })[]
      ] & {
        _balances: ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          end: BigNumber;
          minted: BigNumber;
          multiplier: BigNumber;
        })[];
      }
    >;

    get_minted_for_lock(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _minted: BigNumber }>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _minted: BigNumber[] }>;

    get_share(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _vote: BigNumber }>;

    get_voting_power(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _votingPower: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockedPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedToken(overrides?: CallOverrides): Promise<[string]>;

    locked_of(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedForLock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multipliers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penaltyCollector(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarlyWithdrawPenaltyRate(
      _earlyWithdrawPenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLockedAmount(
      _minLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenaltyCollector(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFullLock(
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLockShare(
      _amount: BigNumberish,
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAXDAYS(overrides?: CallOverrides): Promise<BigNumber>;

  MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

  MINTIME(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  REF_DATE(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create_lock(
    _value: BigNumberish,
    _end: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earlyWithdrawPenaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_amount_minted(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_locks(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      end: BigNumber;
      minted: BigNumber;
      multiplier: BigNumber;
    })[]
  >;

  get_minted_for_lock(
    _addr: string,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_minted_for_locks(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  get_share(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_voting_power(
    _addr: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_position(
    _value: BigNumberish,
    _end: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_time_to_maturity(
    _amount: BigNumberish,
    _end: BigNumberish,
    _newEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock_exists(
    _addr: string,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedPosition(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedToken(overrides?: CallOverrides): Promise<string>;

  locked_of(
    _addr: string,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mintedForLock(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multipliers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  penaltyCollector(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarlyWithdrawPenaltyRate(
    _earlyWithdrawPenaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLockedAmount(
    _minLockedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenaltyCollector(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFullLock(
    _end: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLockShare(
    _amount: BigNumberish,
    _end: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voting_power_locked_days(
    _value: BigNumberish,
    _days: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voting_power_unlock_time(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _end: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAXDAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    MINTIME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REF_DATE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    create_lock(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    earlyWithdrawPenaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawAll(overrides?: CallOverrides): Promise<void>;

    get_amount_minted(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        end: BigNumber;
        minted: BigNumber;
        multiplier: BigNumber;
      })[]
    >;

    get_minted_for_lock(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    get_share(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_voting_power(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedToken(overrides?: CallOverrides): Promise<string>;

    locked_of(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintedForLock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipliers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    penaltyCollector(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEarlyWithdrawPenaltyRate(
      _earlyWithdrawPenaltyRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLockedAmount(
      _minLockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyCollector(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFullLock(
      _end: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLockShare(
      _amount: BigNumberish,
      _end: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Deposit(address,uint256,uint256,uint256)"(
      provider?: string | null,
      value?: null,
      locktime?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        value: BigNumber;
        locktime: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Deposit(
      provider?: string | null,
      value?: null,
      locktime?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        value: BigNumber;
        locktime: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "EarlyWithdrawPenaltySet(uint256)"(
      penalty?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { penalty: BigNumber }>;

    EarlyWithdrawPenaltySet(
      penalty?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { penalty: BigNumber }>;

    "MinLockedAmountSet(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    MinLockedAmountSet(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PenaltyCollectorSet(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    PenaltyCollectorSet(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Withdraw(address,uint256,uint256)"(
      provider?: string | null,
      value?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; value: BigNumber; timestamp: BigNumber }
    >;

    Withdraw(
      provider?: string | null,
      value?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; value: BigNumber; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    MAXDAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    MINTIME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REF_DATE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create_lock(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earlyWithdrawPenaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_amount_minted(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_locks(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_minted_for_lock(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_share(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_voting_power(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedToken(overrides?: CallOverrides): Promise<BigNumber>;

    locked_of(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintedForLock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipliers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyCollector(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarlyWithdrawPenaltyRate(
      _earlyWithdrawPenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLockedAmount(
      _minLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenaltyCollector(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFullLock(
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLockShare(
      _amount: BigNumberish,
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXDAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAWAL_PENALTY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REF_DATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create_lock(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earlyWithdrawPenaltyRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_amount_minted(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_minted_for_lock(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_share(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_voting_power(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked_of(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedForLock(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multipliers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarlyWithdrawPenaltyRate(
      _earlyWithdrawPenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLockedAmount(
      _minLockedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyCollector(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFullLock(
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLockShare(
      _amount: BigNumberish,
      _end: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IGovernanceLockInterface extends ethers.utils.Interface {
  functions: {
    "create_lock(uint256,uint256,address)": FunctionFragment;
    "get_locks(address)": FunctionFragment;
    "increase_position(uint256,uint256,address)": FunctionFragment;
    "increase_time_to_maturity(uint256,uint256,uint256)": FunctionFragment;
    "lock_exists(address,uint256)": FunctionFragment;
    "voting_power_locked_days(uint256,uint256)": FunctionFragment;
    "voting_power_unlock_time(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "get_locks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increase_position",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_time_to_maturity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_exists",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_locked_days",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increase_position",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_time_to_maturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_exists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_locked_days",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class IGovernanceLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGovernanceLockInterface;

  functions: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          end: BigNumber;
          minted: BigNumber;
          multiplier: BigNumber;
        })[]
      ] & {
        _balances: ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          end: BigNumber;
          minted: BigNumber;
          multiplier: BigNumber;
        })[];
      }
    >;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create_lock(
    _value: BigNumberish,
    _days: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_locks(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      end: BigNumber;
      minted: BigNumber;
      multiplier: BigNumber;
    })[]
  >;

  increase_position(
    _value: BigNumberish,
    _end: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_time_to_maturity(
    _amount: BigNumberish,
    _end: BigNumberish,
    _newEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock_exists(
    _addr: string,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voting_power_locked_days(
    _value: BigNumberish,
    _days: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voting_power_unlock_time(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _end: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        end: BigNumber;
        minted: BigNumber;
        multiplier: BigNumber;
      })[]
    >;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_locks(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increase_position(
      _value: BigNumberish,
      _end: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_time_to_maturity(
      _amount: BigNumberish,
      _end: BigNumberish,
      _newEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock_exists(
      _addr: string,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _end: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

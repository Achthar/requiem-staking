/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IGovernanceLockInterface extends ethers.utils.Interface {
  functions: {
    "create_lock(uint256,uint256)": FunctionFragment;
    "deposit_for_id(address,uint256,uint256)": FunctionFragment;
    "get_locks(address)": FunctionFragment;
    "get_minted_for_lock(address,uint256)": FunctionFragment;
    "get_minted_for_locks(address)": FunctionFragment;
    "increase_amount(uint256,uint256)": FunctionFragment;
    "increase_unlock_time(uint256,uint256)": FunctionFragment;
    "locked_end(address,uint256)": FunctionFragment;
    "locked_of(address,uint256)": FunctionFragment;
    "voting_power_locked_days(uint256,uint256)": FunctionFragment;
    "voting_power_unlock_time(uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_for_id",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_locks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_minted_for_lock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_minted_for_locks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked_end",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked_of",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_locked_days",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_power_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_for_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_minted_for_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_minted_for_locks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked_end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked_of", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_locked_days",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_power_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class IGovernanceLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGovernanceLockInterface;

  functions: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit_for_id(
      _addr: string,
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber })[]] & {
        _balances: ([BigNumber, BigNumber] & {
          amount: BigNumber;
          end: BigNumber;
        })[];
      }
    >;

    get_minted_for_lock(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _minted: BigNumber }>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _minted: BigNumber[] }>;

    increase_amount(
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _days: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locked_end(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    locked_of(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create_lock(
    _value: BigNumberish,
    _days: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit_for_id(
    _addr: string,
    _value: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_locks(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber })[]
  >;

  get_minted_for_lock(
    _addr: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_minted_for_locks(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  increase_amount(
    _value: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _days: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locked_end(
    _addr: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  locked_of(
    _addr: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voting_power_locked_days(
    _value: BigNumberish,
    _days: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voting_power_unlock_time(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit_for_id(
      _addr: string,
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber })[]
    >;

    get_minted_for_lock(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    increase_amount(
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_unlock_time(
      _days: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    locked_end(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked_of(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit_for_id(
      _addr: string,
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_locks(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_minted_for_lock(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increase_amount(
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_unlock_time(
      _days: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locked_end(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked_of(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create_lock(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit_for_id(
      _addr: string,
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_minted_for_lock(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_minted_for_locks(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _value: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _days: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locked_end(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked_of(
      _addr: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_power_locked_days(
      _value: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_power_unlock_time(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

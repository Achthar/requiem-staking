/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRequiemStableSwapInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256[],uint256,uint256)": FunctionFragment;
    "calculateCurrentWithdrawFee(address)": FunctionFragment;
    "calculateRemoveLiquidity(address,uint256)": FunctionFragment;
    "calculateRemoveLiquidityOneToken(address,uint256,uint8)": FunctionFragment;
    "calculateSwap(uint8,uint8,uint256)": FunctionFragment;
    "calculateTokenAmount(uint256[],bool)": FunctionFragment;
    "flashLoan(address,address[],uint256[],bytes)": FunctionFragment;
    "getA()": FunctionFragment;
    "getAPrecise()": FunctionFragment;
    "getAdminBalance(uint8)": FunctionFragment;
    "getAdminBalances()": FunctionFragment;
    "getLpToken()": FunctionFragment;
    "getNumberOfTokens()": FunctionFragment;
    "getToken(uint8)": FunctionFragment;
    "getTokenBalance(uint8)": FunctionFragment;
    "getTokenBalances()": FunctionFragment;
    "getTokenIndex(address)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "getVirtualPrice()": FunctionFragment;
    "removeLiquidity(uint256,uint256[],uint256)": FunctionFragment;
    "removeLiquidityImbalance(uint256[],uint256,uint256)": FunctionFragment;
    "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": FunctionFragment;
    "swap(uint8,uint8,uint256,uint256,address,uint256)": FunctionFragment;
    "updateUserWithdrawFee(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentWithdrawFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveLiquidityOneToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmount",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAPrecise",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIndex",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVirtualPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityImbalance",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityOneToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserWithdrawFee",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAPrecise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityImbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserWithdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256[],uint256[],uint256,uint256)": EventFragment;
    "CollectProtocolFee(address,uint256)": EventFragment;
    "FeeControllerChanged(address)": EventFragment;
    "FeeDistributorChanged(address)": EventFragment;
    "NewFee(uint256,uint256,uint256,uint256)": EventFragment;
    "RampA(uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256[],uint256[],uint256)": EventFragment;
    "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)": EventFragment;
    "RemoveLiquidityOne(address,uint256,uint256,uint256)": EventFragment;
    "StopRampA(uint256,uint256)": EventFragment;
    "TokenExchange(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopRampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchange"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    fees: BigNumber[];
    invariant: BigNumber;
    tokenSupply: BigNumber;
  }
>;

export type CollectProtocolFeeEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type FeeControllerChangedEvent = TypedEvent<
  [string] & { newController: string }
>;

export type FeeDistributorChangedEvent = TypedEvent<
  [string] & { newController: string }
>;

export type NewFeeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    fee: BigNumber;
    flashFee: BigNumber;
    adminFee: BigNumber;
    withdrawFee: BigNumber;
  }
>;

export type RampAEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    oldA: BigNumber;
    newA: BigNumber;
    initialTime: BigNumber;
    futureTime: BigNumber;
  }
>;

export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    fees: BigNumber[];
    tokenSupply: BigNumber;
  }
>;

export type RemoveLiquidityImbalanceEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    fees: BigNumber[];
    invariant: BigNumber;
    tokenSupply: BigNumber;
  }
>;

export type RemoveLiquidityOneEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    provider: string;
    tokenIndex: BigNumber;
    tokenAmount: BigNumber;
    coinAmount: BigNumber;
  }
>;

export type StopRampAEvent = TypedEvent<
  [BigNumber, BigNumber] & { A: BigNumber; timestamp: BigNumber }
>;

export type TokenExchangeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    soldId: BigNumber;
    tokensSold: BigNumber;
    boughtId: BigNumber;
    tokensBought: BigNumber;
  }
>;

export class IRequiemStableSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRequiemStableSwapInterface;

  functions: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentWithdrawFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRemoveLiquidity(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableTokenAmount: BigNumber }>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      recipient: string,
      tokens: string[],
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getA(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAPrecise(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAdminBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAdminBalances(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { adminBalances: BigNumber[] }>;

    getLpToken(
      overrides?: CallOverrides
    ): Promise<[string] & { lpToken: string }>;

    getNumberOfTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getTokenBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenBalances(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTokenIndex(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getVirtualPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentWithdrawFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRemoveLiquidity(
    account: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calculateRemoveLiquidityOneToken(
    account: string,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwap(
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenAmount(
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    recipient: string,
    tokens: string[],
    amounts: BigNumberish[],
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getA(overrides?: CallOverrides): Promise<BigNumber>;

  getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

  getAdminBalance(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdminBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

  getLpToken(overrides?: CallOverrides): Promise<string>;

  getNumberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokenBalance(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTokenIndex(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

  removeLiquidity(
    amount: BigNumberish,
    minAmounts: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityImbalance(
    amounts: BigNumberish[],
    maxBurnAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserWithdrawFee(
    recipient: string,
    transferAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCurrentWithdrawFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidity(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      recipient: string,
      tokens: string[],
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getA(overrides?: CallOverrides): Promise<BigNumber>;

    getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdminBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

    getLpToken(overrides?: CallOverrides): Promise<string>;

    getNumberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getTokenBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTokenIndex(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidity(address,uint256[],uint256[],uint256,uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    AddLiquidity(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    "CollectProtocolFee(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    CollectProtocolFee(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "FeeControllerChanged(address)"(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    FeeControllerChanged(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    "FeeDistributorChanged(address)"(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    FeeDistributorChanged(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    "NewFee(uint256,uint256,uint256,uint256)"(
      fee?: null,
      flashFee?: null,
      adminFee?: null,
      withdrawFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        fee: BigNumber;
        flashFee: BigNumber;
        adminFee: BigNumber;
        withdrawFee: BigNumber;
      }
    >;

    NewFee(
      fee?: null,
      flashFee?: null,
      adminFee?: null,
      withdrawFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        fee: BigNumber;
        flashFee: BigNumber;
        adminFee: BigNumber;
        withdrawFee: BigNumber;
      }
    >;

    "RampA(uint256,uint256,uint256,uint256)"(
      oldA?: null,
      newA?: null,
      initialTime?: null,
      futureTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldA: BigNumber;
        newA: BigNumber;
        initialTime: BigNumber;
        futureTime: BigNumber;
      }
    >;

    RampA(
      oldA?: null,
      newA?: null,
      initialTime?: null,
      futureTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldA: BigNumber;
        newA: BigNumber;
        initialTime: BigNumber;
        futureTime: BigNumber;
      }
    >;

    "RemoveLiquidity(address,uint256[],uint256[],uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        tokenSupply: BigNumber;
      }
    >;

    RemoveLiquidity(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        tokenSupply: BigNumber;
      }
    >;

    "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    RemoveLiquidityImbalance(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        fees: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    "RemoveLiquidityOne(address,uint256,uint256,uint256)"(
      provider?: string | null,
      tokenIndex?: null,
      tokenAmount?: null,
      coinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        tokenIndex: BigNumber;
        tokenAmount: BigNumber;
        coinAmount: BigNumber;
      }
    >;

    RemoveLiquidityOne(
      provider?: string | null,
      tokenIndex?: null,
      tokenAmount?: null,
      coinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        tokenIndex: BigNumber;
        tokenAmount: BigNumber;
        coinAmount: BigNumber;
      }
    >;

    "StopRampA(uint256,uint256)"(
      A?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { A: BigNumber; timestamp: BigNumber }
    >;

    StopRampA(
      A?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { A: BigNumber; timestamp: BigNumber }
    >;

    "TokenExchange(address,uint256,uint256,uint256,uint256)"(
      buyer?: string | null,
      soldId?: null,
      tokensSold?: null,
      boughtId?: null,
      tokensBought?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        soldId: BigNumber;
        tokensSold: BigNumber;
        boughtId: BigNumber;
        tokensBought: BigNumber;
      }
    >;

    TokenExchange(
      buyer?: string | null,
      soldId?: null,
      tokensSold?: null,
      boughtId?: null,
      tokensBought?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        soldId: BigNumber;
        tokensSold: BigNumber;
        boughtId: BigNumber;
        tokensBought: BigNumber;
      }
    >;
  };

  estimateGas: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentWithdrawFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidity(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      recipient: string,
      tokens: string[],
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getA(overrides?: CallOverrides): Promise<BigNumber>;

    getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdminBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getLpToken(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenIndex(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentWithdrawFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidity(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      recipient: string,
      tokens: string[],
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAPrecise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdminBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdminBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalance(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenIndex(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtualPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
